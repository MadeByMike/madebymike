{
  "nodes": {
    "SitePage /dev-404-page/": {
      "path": "/dev-404-page/",
      "id": "SitePage /dev-404-page/",
      "parent": null,
      "children": [],
      "internal": {
        "type": "SitePage",
        "contentDigest": "f91d29e10ba680b413138cf9ed86e655",
        "owner": "internal-data-bridge"
      }
    },
    "d48d1c52-fe48-53cb-8f08-aa4b47dde5a5": {
      "resolve": "/c/Users/mike/Development/madebymike/madebymike.github.io/node_modules/gatsby/dist/internal-plugins/dev-404-page",
      "id": "d48d1c52-fe48-53cb-8f08-aa4b47dde5a5",
      "name": "dev-404-page",
      "version": "1.0.0",
      "pluginOptions": {
        "plugins": []
      },
      "nodeAPIs": [
        "createPagesStatefully"
      ],
      "browserAPIs": [],
      "ssrAPIs": [],
      "pluginFilepath": "/c/Users/mike/Development/madebymike/madebymike.github.io/node_modules/gatsby/dist/internal-plugins/dev-404-page",
      "packageJson": {
        "name": "dev-404-page",
        "description": "Internal plugin to add a 404 page in development with helpful information",
        "version": "1.0.0",
        "main": "index.js",
        "author": "Kyle Mathews <mathews.kyle@gmail.com>",
        "license": "MIT",
        "dependencies": [],
        "devDependencies": [],
        "peerDependencies": [],
        "optionalDependecies": [],
        "bundledDependecies": []
      },
      "parent": null,
      "children": [],
      "internal": {
        "contentDigest": "5d4c96e11ef8b57b40e0987efe7cd5b1",
        "type": "SitePlugin",
        "owner": "internal-data-bridge"
      }
    },
    "1fc32581-893a-55e8-8927-bcd667e2b700": {
      "resolve": "/c/Users/mike/Development/madebymike/madebymike.github.io/node_modules/gatsby/dist/internal-plugins/load-babel-config",
      "id": "1fc32581-893a-55e8-8927-bcd667e2b700",
      "name": "load-babel-config",
      "version": "1.0.0",
      "pluginOptions": {
        "plugins": []
      },
      "nodeAPIs": [
        "onPreBootstrap"
      ],
      "browserAPIs": [],
      "ssrAPIs": [],
      "pluginFilepath": "/c/Users/mike/Development/madebymike/madebymike.github.io/node_modules/gatsby/dist/internal-plugins/load-babel-config",
      "packageJson": {
        "name": "load-babel-config",
        "description": "Internal plugin that handles loading Babel configs",
        "version": "1.0.0",
        "main": "index.js",
        "author": "Kyle Mathews <mathews.kyle@gmail.com>",
        "license": "MIT",
        "dependencies": [],
        "devDependencies": [],
        "peerDependencies": [],
        "optionalDependecies": [],
        "bundledDependecies": []
      },
      "parent": null,
      "children": [],
      "internal": {
        "contentDigest": "de26d4088d561907f2a3d9a553cde3c2",
        "type": "SitePlugin",
        "owner": "internal-data-bridge"
      }
    },
    "a5079d69-ba80-53dc-82f9-0f440bd5448c": {
      "resolve": "/c/Users/mike/Development/madebymike/madebymike.github.io/node_modules/gatsby/dist/internal-plugins/internal-data-bridge",
      "id": "a5079d69-ba80-53dc-82f9-0f440bd5448c",
      "name": "internal-data-bridge",
      "version": "1.0.0",
      "pluginOptions": {
        "plugins": []
      },
      "nodeAPIs": [
        "sourceNodes",
        "onCreatePage"
      ],
      "browserAPIs": [],
      "ssrAPIs": [],
      "pluginFilepath": "/c/Users/mike/Development/madebymike/madebymike.github.io/node_modules/gatsby/dist/internal-plugins/internal-data-bridge",
      "packageJson": {
        "name": "internal-data-bridge",
        "description": "An internal Gatsby plugin which creates data nodes from internal data",
        "version": "1.0.0",
        "main": "index.js",
        "author": "Kyle Mathews <mathews.kyle@gmail.com>",
        "license": "MIT",
        "dependencies": [],
        "devDependencies": [],
        "peerDependencies": [],
        "optionalDependecies": [],
        "bundledDependecies": []
      },
      "parent": null,
      "children": [],
      "internal": {
        "contentDigest": "c780a1b7d93a1ad3f9a14abf183736a4",
        "type": "SitePlugin",
        "owner": "internal-data-bridge"
      }
    },
    "f795702c-a3b8-5a88-88ee-5d06019d44fa": {
      "resolve": "/c/Users/mike/Development/madebymike/madebymike.github.io/node_modules/gatsby/dist/internal-plugins/prod-404",
      "id": "f795702c-a3b8-5a88-88ee-5d06019d44fa",
      "name": "prod-404",
      "version": "1.0.0",
      "pluginOptions": {
        "plugins": []
      },
      "nodeAPIs": [
        "onCreatePage"
      ],
      "browserAPIs": [],
      "ssrAPIs": [],
      "pluginFilepath": "/c/Users/mike/Development/madebymike/madebymike.github.io/node_modules/gatsby/dist/internal-plugins/prod-404",
      "packageJson": {
        "name": "prod-404",
        "description": "Internal plugin to detect various flavors of 404 pages and ensure there's a 404.html path created as well to ensure compatability with static hosts",
        "version": "1.0.0",
        "main": "index.js",
        "author": "Kyle Mathews <mathews.kyle@gmail.com>",
        "license": "MIT",
        "dependencies": [],
        "devDependencies": [],
        "peerDependencies": [],
        "optionalDependecies": [],
        "bundledDependecies": []
      },
      "parent": null,
      "children": [],
      "internal": {
        "contentDigest": "e2eea47b86a00e2e2c2a31ac9b4404ee",
        "type": "SitePlugin",
        "owner": "internal-data-bridge"
      }
    },
    "84dad27f-1d44-51fc-ac56-4db2e5222995": {
      "resolve": "/c/Users/mike/Development/madebymike/madebymike.github.io/node_modules/gatsby/dist/internal-plugins/query-runner",
      "id": "84dad27f-1d44-51fc-ac56-4db2e5222995",
      "name": "query-runner",
      "version": "1.0.0",
      "pluginOptions": {
        "plugins": []
      },
      "nodeAPIs": [
        "onCreatePage"
      ],
      "browserAPIs": [],
      "ssrAPIs": [],
      "pluginFilepath": "/c/Users/mike/Development/madebymike/madebymike.github.io/node_modules/gatsby/dist/internal-plugins/query-runner",
      "packageJson": {
        "name": "query-runner",
        "description": "Internal plugin for running queries",
        "version": "1.0.0",
        "main": "index.js",
        "author": "",
        "license": "MIT",
        "dependencies": [],
        "devDependencies": [],
        "peerDependencies": [],
        "optionalDependecies": [],
        "bundledDependecies": []
      },
      "parent": null,
      "children": [],
      "internal": {
        "contentDigest": "3d91be47768ac382b41eae35b408198e",
        "type": "SitePlugin",
        "owner": "internal-data-bridge"
      }
    },
    "6f4b2fa9-66b5-5205-a03f-140005a2cfe5": {
      "resolve": "/c/Users/mike/Development/madebymike/madebymike.github.io/node_modules/gatsby/dist/internal-plugins/webpack-theme-component-shadowing",
      "id": "6f4b2fa9-66b5-5205-a03f-140005a2cfe5",
      "name": "webpack-theme-component-shadowing",
      "version": "1.0.0",
      "pluginOptions": {
        "plugins": []
      },
      "nodeAPIs": [
        "onCreateWebpackConfig"
      ],
      "browserAPIs": [],
      "ssrAPIs": [],
      "pluginFilepath": "/c/Users/mike/Development/madebymike/madebymike.github.io/node_modules/gatsby/dist/internal-plugins/webpack-theme-component-shadowing",
      "packageJson": {
        "name": "webpack-theme-component-shadowing",
        "description": "An internal Gatsby plugin which handles configuring webpack to ensure theme components fall back from the user's site to theme modules.",
        "version": "1.0.0",
        "main": "index.js",
        "author": "Chris Biscardi <chris@christopherbiscardi.com>",
        "license": "MIT",
        "dependencies": [],
        "devDependencies": [],
        "peerDependencies": [],
        "optionalDependecies": [],
        "bundledDependecies": []
      },
      "parent": null,
      "children": [],
      "internal": {
        "contentDigest": "d31b4b7f18249634e65b535b8c277211",
        "type": "SitePlugin",
        "owner": "internal-data-bridge"
      }
    },
    "9f28d07a-37b6-51d1-b2d0-5071b57d6dd2": {
      "resolve": "/c/Users/mike/Development/madebymike/madebymike.github.io/node_modules/gatsby-transformer-remark",
      "id": "9f28d07a-37b6-51d1-b2d0-5071b57d6dd2",
      "name": "gatsby-transformer-remark",
      "version": "2.2.3",
      "pluginOptions": {
        "plugins": []
      },
      "nodeAPIs": [
        "onCreateNode",
        "setFieldsOnGraphQLNodeType"
      ],
      "browserAPIs": [],
      "ssrAPIs": [],
      "pluginFilepath": "/c/Users/mike/Development/madebymike/madebymike.github.io/node_modules/gatsby-transformer-remark",
      "packageJson": {
        "name": "gatsby-transformer-remark",
        "description": "Gatsby transformer plugin for Markdown using the Remark library and ecosystem",
        "version": "2.2.3",
        "keywords": [
          "gatsby",
          "gatsby-plugin",
          "markdown",
          "remark"
        ],
        "author": {
          "name": "Kyle Mathews",
          "email": "mathews.kyle@gmail.com"
        },
        "license": "MIT",
        "dependencies": [
          {
            "name": "@babel/runtime",
            "version": "^7.0.0"
          },
          {
            "name": "bluebird",
            "version": "^3.5.0"
          },
          {
            "name": "gray-matter",
            "version": "^4.0.0"
          },
          {
            "name": "hast-util-raw",
            "version": "^4.0.0"
          },
          {
            "name": "hast-util-to-html",
            "version": "^4.0.0"
          },
          {
            "name": "lodash",
            "version": "^4.17.10"
          },
          {
            "name": "mdast-util-to-hast",
            "version": "^3.0.0"
          },
          {
            "name": "mdast-util-toc",
            "version": "^2.0.1"
          },
          {
            "name": "remark",
            "version": "^9.0.0"
          },
          {
            "name": "remark-parse",
            "version": "^5.0.0"
          },
          {
            "name": "remark-retext",
            "version": "^3.1.0"
          },
          {
            "name": "remark-stringify",
            "version": "^5.0.0"
          },
          {
            "name": "retext-english",
            "version": "^3.0.0"
          },
          {
            "name": "sanitize-html",
            "version": "^1.18.2"
          },
          {
            "name": "underscore.string",
            "version": "^3.3.4"
          },
          {
            "name": "unified",
            "version": "^6.1.5"
          },
          {
            "name": "unist-util-remove-position",
            "version": "^1.1.2"
          },
          {
            "name": "unist-util-select",
            "version": "^1.5.0"
          },
          {
            "name": "unist-util-visit",
            "version": "^1.3.0"
          }
        ],
        "devDependencies": [
          {
            "name": "@babel/cli",
            "version": "^7.0.0"
          },
          {
            "name": "@babel/core",
            "version": "^7.0.0"
          },
          {
            "name": "babel-preset-gatsby-package",
            "version": "^0.1.3"
          },
          {
            "name": "cross-env",
            "version": "^5.1.4"
          }
        ],
        "peerDependencies": [
          {
            "name": "gatsby",
            "version": "^2.0.88"
          }
        ],
        "optionalDependecies": [],
        "bundledDependecies": []
      },
      "parent": null,
      "children": [],
      "internal": {
        "contentDigest": "04e200ae18e95cdc3c22141b00bdcc0d",
        "type": "SitePlugin",
        "owner": "internal-data-bridge"
      }
    },
    "1943ff2f-9c0c-558d-8d0c-006603e8106a": {
      "resolve": "/c/Users/mike/Development/madebymike/madebymike.github.io/node_modules/gatsby-plugin-react-helmet",
      "id": "1943ff2f-9c0c-558d-8d0c-006603e8106a",
      "name": "gatsby-plugin-react-helmet",
      "version": "3.0.6",
      "pluginOptions": {
        "plugins": []
      },
      "nodeAPIs": [],
      "browserAPIs": [],
      "ssrAPIs": [
        "onRenderBody"
      ],
      "pluginFilepath": "/c/Users/mike/Development/madebymike/madebymike.github.io/node_modules/gatsby-plugin-react-helmet",
      "packageJson": {
        "name": "gatsby-plugin-react-helmet",
        "description": "Manage document head data with react-helmet. Provides drop-in server rendering support for Gatsby.",
        "version": "3.0.6",
        "main": "index.js",
        "keywords": [
          "gatsby",
          "gatsby-plugin",
          "favicon",
          "react-helmet",
          "seo",
          "document",
          "head",
          "title",
          "meta",
          "link",
          "script",
          "base",
          "noscript",
          "style"
        ],
        "author": {
          "name": "Kyle Mathews",
          "email": "matthews.kyle@gmail.com"
        },
        "license": "MIT",
        "dependencies": [
          {
            "name": "@babel/runtime",
            "version": "^7.0.0"
          }
        ],
        "devDependencies": [
          {
            "name": "@babel/cli",
            "version": "^7.0.0"
          },
          {
            "name": "@babel/core",
            "version": "^7.0.0"
          },
          {
            "name": "babel-preset-gatsby-package",
            "version": "^0.1.3"
          },
          {
            "name": "cross-env",
            "version": "^5.1.4"
          }
        ],
        "peerDependencies": [
          {
            "name": "gatsby",
            "version": "^2.0.0"
          },
          {
            "name": "react-helmet",
            "version": "^5.1.3"
          }
        ],
        "optionalDependecies": [],
        "bundledDependecies": []
      },
      "parent": null,
      "children": [],
      "internal": {
        "contentDigest": "4b8831a7c076e6e6579f1a266bc49a2d",
        "type": "SitePlugin",
        "owner": "internal-data-bridge"
      }
    },
    "d8f4bf2b-73c7-5c69-93d1-79ac2ac7c2e8": {
      "resolve": "/c/Users/mike/Development/madebymike/madebymike.github.io/node_modules/gatsby-plugin-sass",
      "id": "d8f4bf2b-73c7-5c69-93d1-79ac2ac7c2e8",
      "name": "gatsby-plugin-sass",
      "version": "2.0.10",
      "pluginOptions": {
        "plugins": []
      },
      "nodeAPIs": [
        "onCreateWebpackConfig"
      ],
      "browserAPIs": [],
      "ssrAPIs": [],
      "pluginFilepath": "/c/Users/mike/Development/madebymike/madebymike.github.io/node_modules/gatsby-plugin-sass",
      "packageJson": {
        "name": "gatsby-plugin-sass",
        "description": "Gatsby plugin to handle scss/sass files",
        "version": "2.0.10",
        "main": "index.js",
        "keywords": [
          "gatsby",
          "gatsby-plugin",
          "sass",
          "scss"
        ],
        "author": {
          "name": "Daniel Farrell",
          "email": "daniel@mobelux.com"
        },
        "license": "MIT",
        "dependencies": [
          {
            "name": "@babel/runtime",
            "version": "^7.0.0"
          },
          {
            "name": "sass-loader",
            "version": "^7.0.1"
          }
        ],
        "devDependencies": [
          {
            "name": "@babel/cli",
            "version": "^7.0.0"
          },
          {
            "name": "@babel/core",
            "version": "^7.0.0"
          },
          {
            "name": "babel-preset-gatsby-package",
            "version": "^0.1.3"
          },
          {
            "name": "cross-env",
            "version": "^5.1.4"
          }
        ],
        "peerDependencies": [
          {
            "name": "gatsby",
            "version": "^2.0.0"
          },
          {
            "name": "node-sass",
            "version": "^4.9.0"
          }
        ],
        "optionalDependecies": [],
        "bundledDependecies": []
      },
      "parent": null,
      "children": [],
      "internal": {
        "contentDigest": "61e438a89d092f4c85dabde8cae853d1",
        "type": "SitePlugin",
        "owner": "internal-data-bridge"
      }
    },
    "9530e265-3719-51af-ab87-f27435e3191a": {
      "resolve": "/c/Users/mike/Development/madebymike/madebymike.github.io/node_modules/gatsby-plugin-feed",
      "id": "9530e265-3719-51af-ab87-f27435e3191a",
      "name": "gatsby-plugin-feed",
      "version": "2.0.13",
      "pluginOptions": {
        "plugins": [],
        "generator": "Mike Riethmuller",
        "query": "\n    {\n      site {\n        siteMetadata {\n          title\n          description\n          siteUrl\n          site_url: siteUrl\n        }\n      }\n    }\n  ",
        "feeds": [
          {
            "query": "\n      {\n        allContentfulWriting(\n          limit: 1000,\n          sort: { order: DESC, fields: [publishDate] }\n        ) {\n          edges {\n            node {\n              id\n              title\n              slug\n              publishDate\n              tags\n              description {\n                childMarkdownRemark {\n                  html\n                }\n              }\n              body {\n                childMarkdownRemark {\n                  html\n                }\n              }\n            }\n          }\n        }\n      }\n      ",
            "output": "/rss.xml",
            "title": "MadeByMike"
          }
        ]
      },
      "nodeAPIs": [
        "onPostBuild"
      ],
      "browserAPIs": [],
      "ssrAPIs": [
        "onRenderBody"
      ],
      "pluginFilepath": "/c/Users/mike/Development/madebymike/madebymike.github.io/node_modules/gatsby-plugin-feed",
      "packageJson": {
        "name": "gatsby-plugin-feed",
        "description": "Creates an RSS feed for your Gatsby site.",
        "version": "2.0.13",
        "main": "index.js",
        "keywords": [
          "atom",
          "feed",
          "gatsby",
          "gatsby-plugin",
          "rss"
        ],
        "author": {
          "name": "Nicholas Young",
          "email": "nicholas@nicholaswyoung.com"
        },
        "license": "MIT",
        "dependencies": [
          {
            "name": "@babel/runtime",
            "version": "^7.0.0"
          },
          {
            "name": "lodash.merge",
            "version": "^4.6.0"
          },
          {
            "name": "mkdirp",
            "version": "^0.5.1"
          },
          {
            "name": "pify",
            "version": "^3.0.0"
          },
          {
            "name": "rss",
            "version": "^1.2.2"
          }
        ],
        "devDependencies": [
          {
            "name": "@babel/cli",
            "version": "^7.0.0"
          },
          {
            "name": "@babel/core",
            "version": "^7.0.0"
          },
          {
            "name": "babel-preset-gatsby-package",
            "version": "^0.1.3"
          },
          {
            "name": "cross-env",
            "version": "^5.1.4"
          }
        ],
        "peerDependencies": [
          {
            "name": "gatsby",
            "version": "^2.0.0"
          }
        ],
        "optionalDependecies": [],
        "bundledDependecies": []
      },
      "parent": null,
      "children": [],
      "internal": {
        "contentDigest": "335b58a497c5470402730c6d0de64b5c",
        "type": "SitePlugin",
        "owner": "internal-data-bridge"
      }
    },
    "e94dd52b-651d-58ae-a60e-03f84408d51f": {
      "resolve": "/c/Users/mike/Development/madebymike/madebymike.github.io/node_modules/gatsby-transformer-remark",
      "id": "e94dd52b-651d-58ae-a60e-03f84408d51f",
      "name": "gatsby-transformer-remark",
      "version": "2.2.3",
      "pluginOptions": {
        "plugins": [
          {
            "resolve": "/c/Users/mike/Development/madebymike/madebymike.github.io/node_modules/gatsby-remark-prismjs",
            "id": "d13151dc-fd64-50b0-b768-6beaa40f02ac",
            "name": "gatsby-remark-prismjs",
            "version": "3.2.4",
            "pluginOptions": {
              "plugins": [],
              "classPrefix": "language-",
              "inlineCodeMarker": null,
              "aliases": {},
              "showLineNumbers": false,
              "noInlineHighlight": false
            },
            "nodeAPIs": [],
            "browserAPIs": [],
            "ssrAPIs": [],
            "pluginFilepath": "/c/Users/mike/Development/madebymike/madebymike.github.io/node_modules/gatsby-remark-prismjs"
          }
        ]
      },
      "nodeAPIs": [
        "onCreateNode",
        "setFieldsOnGraphQLNodeType"
      ],
      "browserAPIs": [],
      "ssrAPIs": [],
      "pluginFilepath": "/c/Users/mike/Development/madebymike/madebymike.github.io/node_modules/gatsby-transformer-remark",
      "packageJson": {
        "name": "gatsby-transformer-remark",
        "description": "Gatsby transformer plugin for Markdown using the Remark library and ecosystem",
        "version": "2.2.3",
        "keywords": [
          "gatsby",
          "gatsby-plugin",
          "markdown",
          "remark"
        ],
        "author": {
          "name": "Kyle Mathews",
          "email": "mathews.kyle@gmail.com"
        },
        "license": "MIT",
        "dependencies": [
          {
            "name": "@babel/runtime",
            "version": "^7.0.0"
          },
          {
            "name": "bluebird",
            "version": "^3.5.0"
          },
          {
            "name": "gray-matter",
            "version": "^4.0.0"
          },
          {
            "name": "hast-util-raw",
            "version": "^4.0.0"
          },
          {
            "name": "hast-util-to-html",
            "version": "^4.0.0"
          },
          {
            "name": "lodash",
            "version": "^4.17.10"
          },
          {
            "name": "mdast-util-to-hast",
            "version": "^3.0.0"
          },
          {
            "name": "mdast-util-toc",
            "version": "^2.0.1"
          },
          {
            "name": "remark",
            "version": "^9.0.0"
          },
          {
            "name": "remark-parse",
            "version": "^5.0.0"
          },
          {
            "name": "remark-retext",
            "version": "^3.1.0"
          },
          {
            "name": "remark-stringify",
            "version": "^5.0.0"
          },
          {
            "name": "retext-english",
            "version": "^3.0.0"
          },
          {
            "name": "sanitize-html",
            "version": "^1.18.2"
          },
          {
            "name": "underscore.string",
            "version": "^3.3.4"
          },
          {
            "name": "unified",
            "version": "^6.1.5"
          },
          {
            "name": "unist-util-remove-position",
            "version": "^1.1.2"
          },
          {
            "name": "unist-util-select",
            "version": "^1.5.0"
          },
          {
            "name": "unist-util-visit",
            "version": "^1.3.0"
          }
        ],
        "devDependencies": [
          {
            "name": "@babel/cli",
            "version": "^7.0.0"
          },
          {
            "name": "@babel/core",
            "version": "^7.0.0"
          },
          {
            "name": "babel-preset-gatsby-package",
            "version": "^0.1.3"
          },
          {
            "name": "cross-env",
            "version": "^5.1.4"
          }
        ],
        "peerDependencies": [
          {
            "name": "gatsby",
            "version": "^2.0.88"
          }
        ],
        "optionalDependecies": [],
        "bundledDependecies": []
      },
      "parent": null,
      "children": [],
      "internal": {
        "contentDigest": "4fe0ed6f32012ea18f776236fac768eb",
        "type": "SitePlugin",
        "owner": "internal-data-bridge"
      }
    },
    "d13151dc-fd64-50b0-b768-6beaa40f02ac": {
      "resolve": "/c/Users/mike/Development/madebymike/madebymike.github.io/node_modules/gatsby-remark-prismjs",
      "id": "d13151dc-fd64-50b0-b768-6beaa40f02ac",
      "name": "gatsby-remark-prismjs",
      "version": "3.2.4",
      "pluginOptions": {
        "plugins": [],
        "classPrefix": "language-",
        "inlineCodeMarker": null,
        "aliases": {},
        "showLineNumbers": false,
        "noInlineHighlight": false
      },
      "nodeAPIs": [],
      "browserAPIs": [],
      "ssrAPIs": [],
      "pluginFilepath": "/c/Users/mike/Development/madebymike/madebymike.github.io/node_modules/gatsby-remark-prismjs",
      "packageJson": {
        "name": "gatsby-remark-prismjs",
        "description": "Adds syntax highlighting to code blocks at build time using PrismJS",
        "version": "3.2.4",
        "main": "index.js",
        "keywords": [
          "gatsby",
          "gatsby-plugin",
          "prismjs",
          "remark"
        ],
        "author": {
          "name": "Kyle Mathews",
          "email": "mathews.kyle@gmail.com"
        },
        "license": "MIT",
        "dependencies": [
          {
            "name": "@babel/runtime",
            "version": "^7.0.0"
          },
          {
            "name": "parse-numeric-range",
            "version": "^0.0.2"
          },
          {
            "name": "unist-util-visit",
            "version": "^1.3.0"
          }
        ],
        "devDependencies": [
          {
            "name": "@babel/cli",
            "version": "^7.0.0"
          },
          {
            "name": "@babel/core",
            "version": "^7.0.0"
          },
          {
            "name": "babel-preset-gatsby-package",
            "version": "^0.1.3"
          },
          {
            "name": "cross-env",
            "version": "^5.1.4"
          },
          {
            "name": "prismjs",
            "version": "^1.15.0"
          },
          {
            "name": "remark",
            "version": "^9.0.0"
          }
        ],
        "peerDependencies": [
          {
            "name": "gatsby",
            "version": "^2.0.0"
          },
          {
            "name": "prismjs",
            "version": "^1.15.0"
          }
        ],
        "optionalDependecies": [],
        "bundledDependecies": []
      },
      "parent": null,
      "children": [],
      "internal": {
        "contentDigest": "ebb2cc2e440bb098ad16b5f1269a8d19",
        "type": "SitePlugin",
        "owner": "internal-data-bridge"
      }
    },
    "7f6db173-2713-5e12-8585-b372b0d8dbcb": {
      "resolve": "/c/Users/mike/Development/madebymike/madebymike.github.io/node_modules/gatsby-source-contentful",
      "id": "7f6db173-2713-5e12-8585-b372b0d8dbcb",
      "name": "gatsby-source-contentful",
      "version": "2.0.29",
      "pluginOptions": {
        "plugins": [],
        "accessToken": "1e3671fb6da061aff1e175a7001ab1cc4e891aea1fe167896022c2cf9c5b78a5",
        "spaceId": "2cb7djx9f8kv",
        "host": "cdn.contentful.com",
        "environment": "master"
      },
      "nodeAPIs": [
        "setFieldsOnGraphQLNodeType",
        "sourceNodes",
        "onPreExtractQueries"
      ],
      "browserAPIs": [],
      "ssrAPIs": [],
      "pluginFilepath": "/c/Users/mike/Development/madebymike/madebymike.github.io/node_modules/gatsby-source-contentful",
      "packageJson": {
        "name": "gatsby-source-contentful",
        "description": "Gatsby source plugin for building websites using the Contentful CMS as a data source",
        "version": "2.0.29",
        "keywords": [
          "gatsby",
          "gatsby-plugin",
          "gatsby-source-plugin"
        ],
        "author": {
          "name": "Marcus Ericsson",
          "email": "mericsson@gmail.com",
          "url": "mericsson.com"
        },
        "license": "MIT",
        "dependencies": [
          {
            "name": "@babel/runtime",
            "version": "^7.0.0"
          },
          {
            "name": "axios",
            "version": "^0.18.0"
          },
          {
            "name": "base64-img",
            "version": "^1.0.3"
          },
          {
            "name": "bluebird",
            "version": "^3.5.0"
          },
          {
            "name": "contentful",
            "version": "^6.1.0"
          },
          {
            "name": "deep-map",
            "version": "^1.5.0"
          },
          {
            "name": "fs-extra",
            "version": "^4.0.2"
          },
          {
            "name": "gatsby-plugin-sharp",
            "version": "^2.0.20"
          },
          {
            "name": "is-online",
            "version": "^7.0.0"
          },
          {
            "name": "json-stringify-safe",
            "version": "^5.0.1"
          },
          {
            "name": "lodash",
            "version": "^4.17.10"
          },
          {
            "name": "qs",
            "version": "^6.4.0"
          }
        ],
        "devDependencies": [
          {
            "name": "@babel/cli",
            "version": "^7.0.0"
          },
          {
            "name": "@babel/core",
            "version": "^7.0.0"
          },
          {
            "name": "babel-preset-gatsby-package",
            "version": "^0.1.3"
          },
          {
            "name": "cross-env",
            "version": "^5.1.4"
          }
        ],
        "peerDependencies": [
          {
            "name": "gatsby",
            "version": "^2.0.33"
          }
        ],
        "optionalDependecies": [],
        "bundledDependecies": []
      },
      "parent": null,
      "children": [],
      "internal": {
        "contentDigest": "5a5caca0f059af072c069a95ccb0c067",
        "type": "SitePlugin",
        "owner": "internal-data-bridge"
      }
    },
    "532fe8a8-ccb9-5f0a-bdf0-d6e7af8e1fde": {
      "resolve": "/c/Users/mike/Development/madebymike/madebymike.github.io/node_modules/gatsby-plugin-offline",
      "id": "532fe8a8-ccb9-5f0a-bdf0-d6e7af8e1fde",
      "name": "gatsby-plugin-offline",
      "version": "2.0.22",
      "pluginOptions": {
        "plugins": [],
        "navigateFallbackWhitelist": []
      },
      "nodeAPIs": [
        "createPages",
        "onPostBuild"
      ],
      "browserAPIs": [
        "registerServiceWorker",
        "onServiceWorkerActive",
        "onPostPrefetchPathname"
      ],
      "ssrAPIs": [],
      "pluginFilepath": "/c/Users/mike/Development/madebymike/madebymike.github.io/node_modules/gatsby-plugin-offline",
      "packageJson": {
        "name": "gatsby-plugin-offline",
        "description": "Gatsby plugin which sets up a site to be able to run offline",
        "version": "2.0.22",
        "main": "index.js",
        "keywords": [
          "gatsby",
          "gatsby-plugin",
          "offline",
          "precache",
          "service-worker"
        ],
        "author": {
          "name": "Kyle Mathews",
          "email": "mathews.kyle@gmail.com"
        },
        "license": "MIT",
        "dependencies": [
          {
            "name": "@babel/runtime",
            "version": "^7.0.0"
          },
          {
            "name": "cheerio",
            "version": "^1.0.0-rc.2"
          },
          {
            "name": "cpx",
            "version": "^1.5.0"
          },
          {
            "name": "idb-keyval",
            "version": "^3.1.0"
          },
          {
            "name": "lodash",
            "version": "^4.17.10"
          },
          {
            "name": "workbox-build",
            "version": "^3.6.3"
          }
        ],
        "devDependencies": [
          {
            "name": "@babel/cli",
            "version": "^7.0.0"
          },
          {
            "name": "@babel/core",
            "version": "^7.0.0"
          },
          {
            "name": "babel-preset-gatsby-package",
            "version": "^0.1.3"
          },
          {
            "name": "cross-env",
            "version": "^5.1.4"
          }
        ],
        "peerDependencies": [
          {
            "name": "gatsby",
            "version": "^2.0.100"
          }
        ],
        "optionalDependecies": [],
        "bundledDependecies": []
      },
      "parent": null,
      "children": [],
      "internal": {
        "contentDigest": "d578d966656ed9f8e40660659630bfb8",
        "type": "SitePlugin",
        "owner": "internal-data-bridge"
      }
    },
    "7374ebf2-d961-52ee-92a2-c25e7cb387a9": {
      "resolve": "/c/Users/mike/Development/madebymike/madebymike.github.io",
      "id": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
      "name": "default-site-plugin",
      "version": "66c922cfa610211231f42489c0c8247d",
      "pluginOptions": {
        "plugins": []
      },
      "nodeAPIs": [
        "createPages"
      ],
      "browserAPIs": [
        "registerServiceWorker"
      ],
      "ssrAPIs": [],
      "pluginFilepath": "/c/Users/mike/Development/madebymike/madebymike.github.io",
      "packageJson": {
        "name": "made-by-mike",
        "description": "A blog by Mike",
        "version": "1.0.0",
        "main": "n/a",
        "keywords": [
          "gatsby",
          "contentful"
        ],
        "author": "Mike Riethmuller <mike@madebymike.com.au>",
        "license": "MIT",
        "dependencies": [
          {
            "name": "classnames",
            "version": "^2.2.6"
          },
          {
            "name": "contentful-import",
            "version": "^7.0.4"
          },
          {
            "name": "gatsby",
            "version": "^2.0.12"
          },
          {
            "name": "gatsby-paginate",
            "version": "^1.0.16"
          },
          {
            "name": "gatsby-plugin-feed",
            "version": "^2.0.9"
          },
          {
            "name": "gatsby-plugin-offline",
            "version": "^2.0.5"
          },
          {
            "name": "gatsby-plugin-react-helmet",
            "version": "^3.0.0"
          },
          {
            "name": "gatsby-plugin-sass",
            "version": "^2.0.1"
          },
          {
            "name": "gatsby-remark-prismjs",
            "version": "^3.0.1"
          },
          {
            "name": "gatsby-source-contentful",
            "version": "^2.0.1"
          },
          {
            "name": "gatsby-transformer-remark",
            "version": "^2.1.6"
          },
          {
            "name": "html-react-parser",
            "version": "^0.4.7"
          },
          {
            "name": "inquirer",
            "version": "^6.0.0"
          },
          {
            "name": "lodash",
            "version": "^4.17.10"
          },
          {
            "name": "node-sass",
            "version": "^4.9.3"
          },
          {
            "name": "prismjs",
            "version": "^1.15.0"
          },
          {
            "name": "react",
            "version": "^16.4.1"
          },
          {
            "name": "react-dom",
            "version": "^16.4.1"
          },
          {
            "name": "react-helmet",
            "version": "^5.2.0"
          },
          {
            "name": "terser",
            "version": "^3.14.1"
          },
          {
            "name": "yargs-parser",
            "version": "^10.1.0"
          }
        ],
        "devDependencies": [
          {
            "name": "babel-eslint",
            "version": "^8.2.1"
          },
          {
            "name": "chalk",
            "version": "^2.3.1"
          },
          {
            "name": "eslint",
            "version": "^4.15.0"
          },
          {
            "name": "eslint-plugin-react",
            "version": "^7.5.1"
          },
          {
            "name": "prettier",
            "version": "^1.10.2"
          }
        ],
        "peerDependencies": [],
        "optionalDependecies": [],
        "bundledDependecies": []
      },
      "parent": null,
      "children": [],
      "internal": {
        "contentDigest": "33f83825d34991e995c8db687c1033a9",
        "type": "SitePlugin",
        "owner": "internal-data-bridge"
      }
    },
    "a4d93223-8fff-57c6-ac53-216f9a832581": {
      "resolve": "/c/Users/mike/Development/madebymike/madebymike.github.io/node_modules/gatsby-plugin-page-creator",
      "id": "a4d93223-8fff-57c6-ac53-216f9a832581",
      "name": "gatsby-plugin-page-creator",
      "version": "2.0.6",
      "pluginOptions": {
        "plugins": [],
        "path": "/c/Users/mike/Development/madebymike/madebymike.github.io/src/pages",
        "pathCheck": false
      },
      "nodeAPIs": [
        "createPagesStatefully"
      ],
      "browserAPIs": [],
      "ssrAPIs": [],
      "pluginFilepath": "/c/Users/mike/Development/madebymike/madebymike.github.io/node_modules/gatsby-plugin-page-creator",
      "packageJson": {
        "name": "gatsby-plugin-page-creator",
        "description": "Gatsby plugin that automatically creates pages from React components in specified directories",
        "version": "2.0.6",
        "main": "index.js",
        "keywords": [
          "gatsby",
          "gatsby-plugin"
        ],
        "author": {
          "name": "Kyle Mathews",
          "email": "mathews.kyle@gmail.com"
        },
        "license": "MIT",
        "dependencies": [
          {
            "name": "@babel/runtime",
            "version": "^7.0.0"
          },
          {
            "name": "bluebird",
            "version": "^3.5.0"
          },
          {
            "name": "chokidar",
            "version": "^1.7.0"
          },
          {
            "name": "fs-exists-cached",
            "version": "^1.0.0"
          },
          {
            "name": "glob",
            "version": "^7.1.1"
          },
          {
            "name": "lodash",
            "version": "^4.17.10"
          },
          {
            "name": "micromatch",
            "version": "^3.1.10"
          },
          {
            "name": "parse-filepath",
            "version": "^1.0.1"
          },
          {
            "name": "slash",
            "version": "^1.0.0"
          }
        ],
        "devDependencies": [
          {
            "name": "@babel/cli",
            "version": "^7.0.0"
          },
          {
            "name": "@babel/core",
            "version": "^7.0.0"
          },
          {
            "name": "babel-preset-gatsby-package",
            "version": "^0.1.3"
          },
          {
            "name": "cross-env",
            "version": "^5.0.5"
          }
        ],
        "peerDependencies": [
          {
            "name": "gatsby",
            "version": "^2.0.0"
          }
        ],
        "optionalDependecies": [],
        "bundledDependecies": []
      },
      "parent": null,
      "children": [],
      "internal": {
        "contentDigest": "098206fc739a1800110bc29c0fd0f79c",
        "type": "SitePlugin",
        "owner": "internal-data-bridge"
      }
    },
    "Site": {
      "siteMetadata": {
        "title": "MadeByMike",
        "description": "A web development blog where basically I think stuff and sometimes I write about it.",
        "siteUrl": "https://madebymike.com.au/"
      },
      "pathPrefix": "",
      "polyfill": true,
      "buildTime": "2019-02-04T01:16:57.413Z",
      "id": "Site",
      "parent": null,
      "children": [],
      "internal": {
        "contentDigest": "f17299bc1bee4f7787a112f8dce964b4",
        "type": "Site",
        "owner": "internal-data-bridge"
      }
    },
    "d5ec56d6-0ed9-5d14-8f9e-fed9a1a32753": {
      "id": "d5ec56d6-0ed9-5d14-8f9e-fed9a1a32753",
      "parent": null,
      "children": [],
      "name": "Writing",
      "displayField": "title",
      "description": "",
      "internal": {
        "type": "ContentfulContentType",
        "contentDigest": "a5cc2d8384cde75129c8798891d5e674",
        "owner": "gatsby-source-contentful"
      }
    },
    "9f8ce28c-46ed-53e2-953e-c137a753c839": {
      "title": "Getting the heck out of React",
      "slug": "getting-the-heck-out-of-react",
      "publishDate": "2018-11-28T00:00+11:00",
      "tags": [
        "React",
        "JavaScript"
      ],
      "color": "Gold",
      "size": "Normal",
      "description___NODE": "199a7631-d10c-580d-a568-d1d310305a9f",
      "body___NODE": "25f0dc3b-b0ff-550d-851c-869c10a098ff",
      "id": "9f8ce28c-46ed-53e2-953e-c137a753c839",
      "contentful_id": "2Wx8n97t9mqMCOqaymOUA4",
      "createdAt": "2018-11-28T11:32:37.888Z",
      "updatedAt": "2018-11-30T05:00:47.341Z",
      "parent": "Writing",
      "children": [
        "199a7631-d10c-580d-a568-d1d310305a9f",
        "25f0dc3b-b0ff-550d-851c-869c10a098ff"
      ],
      "internal": {
        "type": "ContentfulWriting",
        "contentDigest": "73ed35ae3d4bf62fa5e597394f9df726",
        "owner": "gatsby-source-contentful"
      },
      "node_locale": "en-US"
    },
    "61d5a6ea-d1fb-5cae-97a6-c1bbf402a4f8": {
      "title": "Thoughts on design patters in CSS",
      "slug": "thoughts-on-design-patterns-in-css",
      "publishDate": "2014-05-25T00:00+10:00",
      "description___NODE": "f88193a9-2b71-517f-8473-a856ee592d6a",
      "body___NODE": "ce8a8962-f0a6-5d17-a5e6-d807af493943",
      "id": "61d5a6ea-d1fb-5cae-97a6-c1bbf402a4f8",
      "contentful_id": "5quiwmLGlU2aO0QGU4m8M2",
      "createdAt": "2018-07-28T23:51:42.615Z",
      "updatedAt": "2018-11-15T05:51:49.813Z",
      "parent": "Writing",
      "children": [
        "f88193a9-2b71-517f-8473-a856ee592d6a",
        "ce8a8962-f0a6-5d17-a5e6-d807af493943"
      ],
      "internal": {
        "type": "ContentfulWriting",
        "contentDigest": "7cf4230900bb7b7b26ef508959fa404a",
        "owner": "gatsby-source-contentful"
      },
      "node_locale": "en-US"
    },
    "76644d91-6583-5489-b822-c89360b11ff0": {
      "title": "Difference between currentColor & Custom Properties",
      "slug": "currentcolor-and-custom-properties",
      "publishDate": "2018-11-11T00:00+00:00",
      "tags": [
        "CSS",
        "Custom Properties"
      ],
      "color": "Gold",
      "description___NODE": "2874f855-f45b-5dd2-a1b8-8851a376ffb7",
      "body___NODE": "1df335a7-d623-5e24-8a29-5c438e0b1e5f",
      "id": "76644d91-6583-5489-b822-c89360b11ff0",
      "contentful_id": "2BZbTT1c1WuguqQciKuscm",
      "createdAt": "2018-11-11T20:22:50.198Z",
      "updatedAt": "2018-11-11T21:37:24.273Z",
      "parent": "Writing",
      "children": [
        "2874f855-f45b-5dd2-a1b8-8851a376ffb7",
        "1df335a7-d623-5e24-8a29-5c438e0b1e5f"
      ],
      "internal": {
        "type": "ContentfulWriting",
        "contentDigest": "62580fc24705013accc87a5bcab2837f",
        "owner": "gatsby-source-contentful"
      },
      "node_locale": "en-US"
    },
    "2cc84a29-b335-555a-a3e4-c99f05b52ad7": {
      "title": "What is this in JavaScript?",
      "slug": "this-in-javascript",
      "publishDate": "2018-11-11T00:00+01:00",
      "description___NODE": "0932c157-ca35-5676-af96-da8aafc3554d",
      "body___NODE": "2f5acfad-2a61-502c-a61e-7c5d127b4c54",
      "id": "2cc84a29-b335-555a-a3e4-c99f05b52ad7",
      "contentful_id": "4EfIrXDXqoekwAYsyUggMI",
      "createdAt": "2018-11-11T19:07:56.766Z",
      "updatedAt": "2018-11-11T19:15:09.138Z",
      "parent": "Writing",
      "children": [
        "0932c157-ca35-5676-af96-da8aafc3554d",
        "2f5acfad-2a61-502c-a61e-7c5d127b4c54"
      ],
      "internal": {
        "type": "ContentfulWriting",
        "contentDigest": "f05b8364f151bc9af3343d62f87c1725",
        "owner": "gatsby-source-contentful"
      },
      "node_locale": "en-US"
    },
    "ce59dc47-13aa-5dc3-85af-a91760a04da7": {
      "title": "SVG has more potential",
      "slug": "svg-has-more-potential",
      "publishDate": "2016-09-19T00:00+10:00",
      "tags": [
        "SVG",
        "CSS"
      ],
      "extraCss___NODE": [
        "c8a06606-0027-516e-9391-3ca5a86d1b02"
      ],
      "extraJs___NODE": [
        "472177d7-84a3-5d4c-ac73-82053877b36b"
      ],
      "description___NODE": "70e1f972-b4fb-5bc5-a537-7dd452c62767",
      "body___NODE": "c48f80ac-3145-53fd-8f4b-f7a2cb05de16",
      "id": "ce59dc47-13aa-5dc3-85af-a91760a04da7",
      "contentful_id": "76qFXBUyacmMckMO8iUySO",
      "createdAt": "2018-07-28T23:54:19.908Z",
      "updatedAt": "2018-11-09T13:32:27.652Z",
      "parent": "Writing",
      "children": [
        "70e1f972-b4fb-5bc5-a537-7dd452c62767",
        "c48f80ac-3145-53fd-8f4b-f7a2cb05de16"
      ],
      "internal": {
        "type": "ContentfulWriting",
        "contentDigest": "b6498af4ee93ee7f3d3b74bb72085dad",
        "owner": "gatsby-source-contentful"
      },
      "node_locale": "en-US"
    },
    "565dc228-2761-5a54-b40c-30a184e2aae6": {
      "title": "New website & some new CSS tricks",
      "slug": "new-website-new-css-tricks",
      "publishDate": "2018-01-10T00:00+10:00",
      "tags": [
        "CSS"
      ],
      "color": "Default",
      "description___NODE": "08c74e4a-4ddb-5ff1-a4a9-3e038bde1a0f",
      "body___NODE": "7e6d88cf-aae1-584d-9159-208ff5a8e1b9",
      "id": "565dc228-2761-5a54-b40c-30a184e2aae6",
      "contentful_id": "6cMmi9Nfywemuw2GSeSk2a",
      "createdAt": "2018-07-29T00:05:57.168Z",
      "updatedAt": "2018-11-04T10:19:05.625Z",
      "parent": "Writing",
      "children": [
        "08c74e4a-4ddb-5ff1-a4a9-3e038bde1a0f",
        "7e6d88cf-aae1-584d-9159-208ff5a8e1b9"
      ],
      "internal": {
        "type": "ContentfulWriting",
        "contentDigest": "992f1f5aaa79a9b11fdb473ec1f474c0",
        "owner": "gatsby-source-contentful"
      },
      "node_locale": "en-US"
    },
    "33f212d1-aa8d-5ea4-9d34-75c498f4632e": {
      "title": "Using CSS variables correctly",
      "slug": "using-css-variables",
      "publishDate": "2017-06-18T00:00+10:00",
      "tags": [
        "CSS",
        "Custom Properties"
      ],
      "color": "Default",
      "description___NODE": "bc9bf393-6e61-5355-a730-0b2e0916ea12",
      "body___NODE": "62b3e0c8-638d-5b7c-adaf-0a3adbfab453",
      "id": "33f212d1-aa8d-5ea4-9d34-75c498f4632e",
      "contentful_id": "15awHUQiVie6mcgacqUqGI",
      "createdAt": "2018-07-28T23:47:22.789Z",
      "updatedAt": "2018-11-04T09:30:17.462Z",
      "parent": "Writing",
      "children": [
        "bc9bf393-6e61-5355-a730-0b2e0916ea12",
        "62b3e0c8-638d-5b7c-adaf-0a3adbfab453"
      ],
      "internal": {
        "type": "ContentfulWriting",
        "contentDigest": "6602f7f55c51d268e5c0635dd3dc44ce",
        "owner": "gatsby-source-contentful"
      },
      "node_locale": "en-US"
    },
    "05b0c536-9190-556e-934a-78762e13d05c": {
      "title": "Accessible contrast with Less and Sass",
      "slug": "accessible-contrast-with-less-and-sass",
      "publishDate": "2014-06-15T00:00+10:00",
      "tags": [
        "color",
        "scss",
        "css"
      ],
      "color": "Default",
      "description___NODE": "282a38a2-4762-570d-93f5-c47b1e332254",
      "body___NODE": "d7f66d94-46ad-5006-b1c3-8d470a427940",
      "id": "05b0c536-9190-556e-934a-78762e13d05c",
      "contentful_id": "6bvrAgKbZekEmmAMY8wIa0",
      "createdAt": "2018-07-29T00:15:31.766Z",
      "updatedAt": "2018-11-04T09:30:09.524Z",
      "parent": "Writing",
      "children": [
        "282a38a2-4762-570d-93f5-c47b1e332254",
        "d7f66d94-46ad-5006-b1c3-8d470a427940"
      ],
      "internal": {
        "type": "ContentfulWriting",
        "contentDigest": "da7bd566afcde1a4f2ba93f584dfd837",
        "owner": "gatsby-source-contentful"
      },
      "node_locale": "en-US"
    },
    "284d5caf-4d3f-5a7d-9365-493ed874b17d": {
      "title": "Image manipulation techniques with 2d canvas",
      "slug": "canvas-image-manipulation",
      "publishDate": "2016-07-07T00:00+10:00",
      "tags": [
        "canvas",
        "webgl"
      ],
      "color": "Default",
      "size": "Normal",
      "description___NODE": "9a47d419-9186-55bf-b1f9-e58855d46859",
      "body___NODE": "134e8913-076c-599f-aa35-5754ac4805ce",
      "id": "284d5caf-4d3f-5a7d-9365-493ed874b17d",
      "contentful_id": "2ciKd0BqRCUQe2cIK2kuAG",
      "createdAt": "2018-07-29T00:10:38.357Z",
      "updatedAt": "2018-11-04T09:29:59.852Z",
      "parent": "Writing",
      "children": [
        "9a47d419-9186-55bf-b1f9-e58855d46859",
        "134e8913-076c-599f-aa35-5754ac4805ce"
      ],
      "internal": {
        "type": "ContentfulWriting",
        "contentDigest": "90448a9d400852649f17e521e2834c91",
        "owner": "gatsby-source-contentful"
      },
      "node_locale": "en-US"
    },
    "4c31379f-ca7f-50b7-a62a-caa5c684f392": {
      "title": "Detecting transition start",
      "slug": "detecting-transition-start",
      "publishDate": "2014-06-06T00:00+10:00",
      "tags": [
        "css"
      ],
      "body___NODE": "b662b1cf-1d20-5ab8-8229-327a802660f4",
      "id": "4c31379f-ca7f-50b7-a62a-caa5c684f392",
      "contentful_id": "6EIdZ5AhnqWq00A8W40k4",
      "createdAt": "2018-07-29T00:10:23.980Z",
      "updatedAt": "2018-11-04T09:29:51.511Z",
      "parent": "Writing",
      "children": [
        "b662b1cf-1d20-5ab8-8229-327a802660f4"
      ],
      "internal": {
        "type": "ContentfulWriting",
        "contentDigest": "a03a7d744c4b804de86df9e054ae8fe1",
        "owner": "gatsby-source-contentful"
      },
      "node_locale": "en-US"
    },
    "8e079e1e-0d9c-5e9c-8838-2b0020cbe068": {
      "title": "The invisible parts of CSS",
      "slug": "the-invisible-parts-of-css",
      "publishDate": "2017-04-04T00:00+10:00",
      "tags": [
        "CSS"
      ],
      "description___NODE": "3a5203f8-e756-57a1-8c78-80d5b9da33c4",
      "body___NODE": "a62cea07-f354-5149-a8ba-d464f2a336a5",
      "id": "8e079e1e-0d9c-5e9c-8838-2b0020cbe068",
      "contentful_id": "77SLJpM23ug2GeuW8eQAI0",
      "createdAt": "2018-07-28T23:52:44.068Z",
      "updatedAt": "2018-11-04T09:29:45.020Z",
      "parent": "Writing",
      "children": [
        "3a5203f8-e756-57a1-8c78-80d5b9da33c4",
        "a62cea07-f354-5149-a8ba-d464f2a336a5"
      ],
      "internal": {
        "type": "ContentfulWriting",
        "contentDigest": "c9887fb753e5974421f43f4f49e227bf",
        "owner": "gatsby-source-contentful"
      },
      "node_locale": "en-US"
    },
    "9607cf50-94d1-56ae-90fc-55c96e6add74": {
      "title": "How do I CSS?",
      "slug": "how-do-i-css",
      "publishDate": "2015-06-15T00:00+10:00",
      "tags": [
        "CSS"
      ],
      "description___NODE": "f3ba2b4b-6e7f-5870-b7cf-5cc21e58ce8c",
      "body___NODE": "fb571099-b2bd-50d9-86fa-bac3fea518cb",
      "update___NODE": "aab62576-341d-5551-8ca3-b2de36174327",
      "id": "9607cf50-94d1-56ae-90fc-55c96e6add74",
      "contentful_id": "ATCu9ygCd2qYqYCEYAcKY",
      "createdAt": "2018-07-28T23:06:14.179Z",
      "updatedAt": "2018-11-04T09:29:39.059Z",
      "parent": "Writing",
      "children": [
        "f3ba2b4b-6e7f-5870-b7cf-5cc21e58ce8c",
        "fb571099-b2bd-50d9-86fa-bac3fea518cb",
        "aab62576-341d-5551-8ca3-b2de36174327"
      ],
      "internal": {
        "type": "ContentfulWriting",
        "contentDigest": "089e60a98440620922b7ebc7f1d6c4e9",
        "owner": "gatsby-source-contentful"
      },
      "node_locale": "en-US"
    },
    "d0d7dd46-3209-5714-b885-f77157e9465c": {
      "title": "Fluid typography examples",
      "slug": "fluid-type-calc-examples",
      "publishDate": "2015-07-15T00:00+10:00",
      "tags": [
        "CSS",
        "Typography"
      ],
      "extraCss___NODE": [
        "19c28b57-e9de-5728-9904-e60a0b29c5b1"
      ],
      "description___NODE": "cafbb96f-8489-5af7-9b6f-45908bc1638b",
      "body___NODE": "e0cb0a30-a6cd-522f-a826-58579b181bb8",
      "id": "d0d7dd46-3209-5714-b885-f77157e9465c",
      "contentful_id": "4TouTGzkZy6Ccsgyg0AS8A",
      "createdAt": "2018-07-29T00:06:54.400Z",
      "updatedAt": "2018-11-04T09:28:08.531Z",
      "parent": "Writing",
      "children": [
        "cafbb96f-8489-5af7-9b6f-45908bc1638b",
        "e0cb0a30-a6cd-522f-a826-58579b181bb8"
      ],
      "internal": {
        "type": "ContentfulWriting",
        "contentDigest": "c9b8ef0c9113302a3e820a947231bed7",
        "owner": "gatsby-source-contentful"
      },
      "node_locale": "en-US"
    },
    "a8818912-1058-588d-9376-6c6621140fdb": {
      "title": "Non-linear interpolation in CSS",
      "slug": "non-linear-interpolation-in-css",
      "publishDate": "2017-05-18T00:00+10:00",
      "tags": [
        "CSS"
      ],
      "description___NODE": "7211b149-f415-5cb0-a4ff-aac39a578d73",
      "body___NODE": "d4412520-8f39-58a6-ac7f-23612cf49f92",
      "id": "a8818912-1058-588d-9376-6c6621140fdb",
      "contentful_id": "5y8GRMgR9u84eW62O0e4uI",
      "createdAt": "2018-07-29T00:05:44.890Z",
      "updatedAt": "2018-11-04T09:27:47.934Z",
      "parent": "Writing",
      "children": [
        "7211b149-f415-5cb0-a4ff-aac39a578d73",
        "d4412520-8f39-58a6-ac7f-23612cf49f92"
      ],
      "internal": {
        "type": "ContentfulWriting",
        "contentDigest": "69a483bf9d8f216075ca836da295a44a",
        "owner": "gatsby-source-contentful"
      },
      "node_locale": "en-US"
    },
    "8ba8ae2e-6a81-5ea3-9414-0d5884bbe52f": {
      "title": "Pattern: Robust icons",
      "slug": "pattern-robust-icons",
      "publishDate": "2015-08-22T00:00+10:00",
      "tags": [
        "CSS",
        "Icons"
      ],
      "extraCss___NODE": [
        "b5e6787d-7e68-58d3-ab18-432325ecd715"
      ],
      "description___NODE": "8a964b1b-2e87-5899-8e8f-6df6de3d4b55",
      "body___NODE": "9fefdebb-0172-5ad5-96e1-717fe3a28fea",
      "id": "8ba8ae2e-6a81-5ea3-9414-0d5884bbe52f",
      "contentful_id": "5HGpyDUXF6EWIkuMskEAcO",
      "createdAt": "2018-07-29T00:05:26.274Z",
      "updatedAt": "2018-11-04T09:27:42.628Z",
      "parent": "Writing",
      "children": [
        "8a964b1b-2e87-5899-8e8f-6df6de3d4b55",
        "9fefdebb-0172-5ad5-96e1-717fe3a28fea"
      ],
      "internal": {
        "type": "ContentfulWriting",
        "contentDigest": "762e50f2d9be0f30dcfab461df86343d",
        "owner": "gatsby-source-contentful"
      },
      "node_locale": "en-US"
    },
    "4c0495e4-f68f-504d-875d-b783b1399ad0": {
      "title": "HTML5 periodic table DMCA takedown request",
      "slug": "html5-periodic-table-dmca-takedown-request",
      "publishDate": "2015-04-16T00:00+10:00",
      "tags": [
        "Personal"
      ],
      "body___NODE": "77f61876-bfcb-5f48-bc9c-64cf15937b21",
      "id": "4c0495e4-f68f-504d-875d-b783b1399ad0",
      "contentful_id": "4LBU5P85iw64gGGqckoCik",
      "createdAt": "2018-07-29T00:02:50.686Z",
      "updatedAt": "2018-11-04T09:27:38.020Z",
      "parent": "Writing",
      "children": [
        "77f61876-bfcb-5f48-bc9c-64cf15937b21"
      ],
      "internal": {
        "type": "ContentfulWriting",
        "contentDigest": "b837815bf04f16178146cd9ca2908f10",
        "owner": "gatsby-source-contentful"
      },
      "node_locale": "en-US"
    },
    "6cd6dd13-9477-50bd-923e-6a60cb9d51bb": {
      "title": "Determine the quality of light in live video streams",
      "slug": "html5-video-streaming",
      "publishDate": "2014-12-12T00:00+10:00",
      "tags": [
        "Canvas"
      ],
      "description___NODE": "efd12b4a-ed97-5a4c-a022-e620def935a3",
      "body___NODE": "fe842c12-0073-57bf-9ace-d02d6dfcc40c",
      "id": "6cd6dd13-9477-50bd-923e-6a60cb9d51bb",
      "contentful_id": "2104x6TOEYWI8IAQMYQ4Yg",
      "createdAt": "2018-07-29T00:02:29.682Z",
      "updatedAt": "2018-11-04T09:27:30.560Z",
      "parent": "Writing",
      "children": [
        "efd12b4a-ed97-5a4c-a022-e620def935a3",
        "fe842c12-0073-57bf-9ace-d02d6dfcc40c"
      ],
      "internal": {
        "type": "ContentfulWriting",
        "contentDigest": "748c9149fc64db0d19a69037eaa6f6e2",
        "owner": "gatsby-source-contentful"
      },
      "node_locale": "en-US"
    },
    "4d7f0e82-276e-5222-9e4e-57e08cb8fd4e": {
      "title": "Interpolation in CSS without animation",
      "slug": "interpolation-without-animation",
      "publishDate": "2016-12-29T00:00+10:00",
      "tags": [
        "CSS"
      ],
      "description___NODE": "a80ddecb-8905-5c76-a8c7-002b50024020",
      "body___NODE": "f6491b0b-d4b6-5216-a807-95bd18eb4ac8",
      "id": "4d7f0e82-276e-5222-9e4e-57e08cb8fd4e",
      "contentful_id": "3TjCUrb5eM0IcKeOwsMUw8",
      "createdAt": "2018-07-29T00:01:44.967Z",
      "updatedAt": "2018-11-04T09:27:25.827Z",
      "parent": "Writing",
      "children": [
        "a80ddecb-8905-5c76-a8c7-002b50024020",
        "f6491b0b-d4b6-5216-a807-95bd18eb4ac8"
      ],
      "internal": {
        "type": "ContentfulWriting",
        "contentDigest": "ee30eb122ee01703e2e7bd3ade257ee8",
        "owner": "gatsby-source-contentful"
      },
      "node_locale": "en-US"
    },
    "7b95e6bc-209b-5da6-a1fc-5eed05257a3a": {
      "title": "A love letter to jQuery",
      "slug": "love-letter-to-jquery",
      "publishDate": "2016-02-19T00:00+10:00",
      "description___NODE": "a7bdaa30-4cbf-5a24-8f2c-0cb4eb0eef41",
      "body___NODE": "8882dfb4-a256-5f64-9b6c-abaa1bf71b86",
      "id": "7b95e6bc-209b-5da6-a1fc-5eed05257a3a",
      "contentful_id": "6UUvuARsL6m2WokUeikeaw",
      "createdAt": "2018-07-29T00:01:17.802Z",
      "updatedAt": "2018-11-04T09:27:18.327Z",
      "parent": "Writing",
      "children": [
        "a7bdaa30-4cbf-5a24-8f2c-0cb4eb0eef41",
        "8882dfb4-a256-5f64-9b6c-abaa1bf71b86"
      ],
      "internal": {
        "type": "ContentfulWriting",
        "contentDigest": "32c72479175817fd1a402898fd1b0df5",
        "owner": "gatsby-source-contentful"
      },
      "node_locale": "en-US"
    },
    "a2f197ea-93d2-50d7-adfd-b3e34a24a2f2": {
      "title": "On maths and coding",
      "slug": "maths-and-code",
      "publishDate": "2016-10-16T00:00+10:00",
      "tags": [
        "Personal"
      ],
      "description___NODE": "94f77e6c-3427-56f8-beb5-984846348062",
      "body___NODE": "0d3f20f9-0a59-5827-93be-03b9ec6df855",
      "id": "a2f197ea-93d2-50d7-adfd-b3e34a24a2f2",
      "contentful_id": "68m7pN9O8MAKuw0MOiMUEQ",
      "createdAt": "2018-07-29T00:00:59.675Z",
      "updatedAt": "2018-11-04T09:27:05.136Z",
      "parent": "Writing",
      "children": [
        "94f77e6c-3427-56f8-beb5-984846348062",
        "0d3f20f9-0a59-5827-93be-03b9ec6df855"
      ],
      "internal": {
        "type": "ContentfulWriting",
        "contentDigest": "383d6a378579d663303fd71809533803",
        "owner": "gatsby-source-contentful"
      },
      "node_locale": "en-US"
    },
    "47f21b2f-8c31-573c-b016-8af2a56545cf": {
      "title": "Merging JSON data sets",
      "slug": "merging-json-data-sets",
      "publishDate": "2014-08-08T00:00+10:00",
      "body___NODE": "b9f2ada5-ca57-5d1a-9ba3-629df8351a6d",
      "id": "47f21b2f-8c31-573c-b016-8af2a56545cf",
      "contentful_id": "5kDXnDftgkcW8mWU8sgm6o",
      "createdAt": "2018-07-29T00:00:55.455Z",
      "updatedAt": "2018-11-04T09:26:58.493Z",
      "parent": "Writing",
      "children": [
        "b9f2ada5-ca57-5d1a-9ba3-629df8351a6d"
      ],
      "internal": {
        "type": "ContentfulWriting",
        "contentDigest": "6e4c1f91a31ad1b38641a2b39a624ecd",
        "owner": "gatsby-source-contentful"
      },
      "node_locale": "en-US"
    },
    "d562810d-ee79-5edc-8a4d-e0546757cda3": {
      "title": "Precise control over responsive typography",
      "slug": "precise-control-responsive-typography",
      "publishDate": "2015-03-17T00:00+10:00",
      "tags": [
        "CSS",
        "Typography"
      ],
      "extraCss___NODE": [
        "ecbb9040-429a-5f61-a310-e1baf415c6f0"
      ],
      "description___NODE": "953a7add-782d-5c98-9b05-db47236fa8cd",
      "body___NODE": "4d8876be-0337-50e2-9044-eb7bc16b973c",
      "id": "d562810d-ee79-5edc-8a4d-e0546757cda3",
      "contentful_id": "nvprNFJHEsci4AAgGqAI8",
      "createdAt": "2018-07-28T23:59:45.772Z",
      "updatedAt": "2018-11-04T09:26:48.711Z",
      "parent": "Writing",
      "children": [
        "953a7add-782d-5c98-9b05-db47236fa8cd",
        "4d8876be-0337-50e2-9044-eb7bc16b973c"
      ],
      "internal": {
        "type": "ContentfulWriting",
        "contentDigest": "d495fbe8652e01a76e50955eb60382fc",
        "owner": "gatsby-source-contentful"
      },
      "node_locale": "en-US"
    },
    "f08bd495-cb62-5bd8-ae0b-03bf223a6015": {
      "title": "Understanding flexbox",
      "slug": "understanding-flexbox",
      "publishDate": "2014-09-09T00:00+10:00",
      "tags": [
        "CSS",
        "Flexbox"
      ],
      "extraCss___NODE": [
        "54fc6d41-fc84-586f-b70f-a3455882d736"
      ],
      "description___NODE": "9f99c124-9efc-5525-889e-5b3a2e97152f",
      "body___NODE": "26d7a417-f231-572e-9c83-fd12952aa7bf",
      "id": "f08bd495-cb62-5bd8-ae0b-03bf223a6015",
      "contentful_id": "6Nvt6dLRh6AM8i0WoEGIoO",
      "createdAt": "2018-07-28T23:50:21.497Z",
      "updatedAt": "2018-11-04T09:26:36.588Z",
      "parent": "Writing",
      "children": [
        "9f99c124-9efc-5525-889e-5b3a2e97152f",
        "26d7a417-f231-572e-9c83-fd12952aa7bf"
      ],
      "internal": {
        "type": "ContentfulWriting",
        "contentDigest": "2dfa5909551388c5cc202c9c84190595",
        "owner": "gatsby-source-contentful"
      },
      "node_locale": "en-US"
    },
    "844f4bd2-a6ee-5f7b-b4f4-eb4d10c3bbb6": {
      "title": "Resizing and Cropping Images with Canvas",
      "slug": "resizing-and-cropping-images-with-canvas",
      "publishDate": "2014-10-30T00:00+10:00",
      "tags": [
        "Canvas"
      ],
      "description___NODE": "c0b00b48-7402-5d9f-971c-61d3cfab3fbe",
      "body___NODE": "6d09f4e3-b5f4-5745-ab25-8247ae61a599",
      "id": "844f4bd2-a6ee-5f7b-b4f4-eb4d10c3bbb6",
      "contentful_id": "2AHPauYOLYioCysOQIWsSi",
      "createdAt": "2018-07-28T23:58:44.442Z",
      "updatedAt": "2018-11-04T09:25:25.305Z",
      "parent": "Writing",
      "children": [
        "c0b00b48-7402-5d9f-971c-61d3cfab3fbe",
        "6d09f4e3-b5f4-5745-ab25-8247ae61a599"
      ],
      "internal": {
        "type": "ContentfulWriting",
        "contentDigest": "d11992e79de24a587751ffa45397af17",
        "owner": "gatsby-source-contentful"
      },
      "node_locale": "en-US"
    },
    "3ee8fe14-1a33-5758-a779-da11375b203a": {
      "title": "Style Guides: 50 shades of corporate blue",
      "slug": "style-guides-50-shades-of-corporate-blue",
      "publishDate": "2016-02-26T00:00+10:00",
      "tags": [
        "Style Guides",
        "CSS"
      ],
      "description___NODE": "894edf2d-e701-5b58-8997-646afa8f834a",
      "body___NODE": "5890fe96-7bd1-56b5-b84d-9facc5a27739",
      "id": "3ee8fe14-1a33-5758-a779-da11375b203a",
      "contentful_id": "3r1FXDtyreg8u4qgW0Wqm2",
      "createdAt": "2018-07-28T23:58:18.129Z",
      "updatedAt": "2018-11-04T09:25:20.594Z",
      "parent": "Writing",
      "children": [
        "894edf2d-e701-5b58-8997-646afa8f834a",
        "5890fe96-7bd1-56b5-b84d-9facc5a27739"
      ],
      "internal": {
        "type": "ContentfulWriting",
        "contentDigest": "99280d3e6e992f765c1950a215d8765e",
        "owner": "gatsby-source-contentful"
      },
      "node_locale": "en-US"
    },
    "11e689e2-017c-57b6-b59f-e6df0d1714fa": {
      "title": "Zero element loading animations",
      "slug": "zero-element-loading-animations",
      "publishDate": "2015-01-05T00:00+10:00",
      "tags": [
        "CSS"
      ],
      "extraCss___NODE": [
        "65f897cf-dad1-5603-93a0-22a39e2c7a0f"
      ],
      "description___NODE": "0dbc01af-f742-5068-843d-77a80963ed36",
      "body___NODE": "e447a460-b7ae-56db-992b-7a982f9c1c63",
      "id": "11e689e2-017c-57b6-b59f-e6df0d1714fa",
      "contentful_id": "RA4FdciMik00gaEIS0gSy",
      "createdAt": "2018-07-28T23:46:58.813Z",
      "updatedAt": "2018-11-04T09:24:18.022Z",
      "parent": "Writing",
      "children": [
        "0dbc01af-f742-5068-843d-77a80963ed36",
        "e447a460-b7ae-56db-992b-7a982f9c1c63"
      ],
      "internal": {
        "type": "ContentfulWriting",
        "contentDigest": "682e735bc02a48ce0378876242fa341a",
        "owner": "gatsby-source-contentful"
      },
      "node_locale": "en-US"
    },
    "c6021bd8-4e79-5e53-8ada-6ac2fb68027c": {
      "title": "Offline content with service workers",
      "slug": "service-workers",
      "publishDate": "2016-08-22T00:00+10:00",
      "tags": [
        "Service Workers",
        "Offline"
      ],
      "description___NODE": "3efb439f-b7ac-543d-baf6-ece41d990898",
      "body___NODE": "edfd379f-9adc-5b92-baeb-ecae57cff7a1",
      "update___NODE": "5e46b326-64db-572b-a140-15a2fe4bfdf1",
      "id": "c6021bd8-4e79-5e53-8ada-6ac2fb68027c",
      "contentful_id": "PY4MidqAwK0GCUKu0Msk6",
      "createdAt": "2018-07-28T23:58:31.116Z",
      "updatedAt": "2018-11-03T15:15:02.093Z",
      "parent": "Writing",
      "children": [
        "3efb439f-b7ac-543d-baf6-ece41d990898",
        "edfd379f-9adc-5b92-baeb-ecae57cff7a1",
        "5e46b326-64db-572b-a140-15a2fe4bfdf1"
      ],
      "internal": {
        "type": "ContentfulWriting",
        "contentDigest": "d960cbc490158d26b4ecf076af70a3ee",
        "owner": "gatsby-source-contentful"
      },
      "node_locale": "en-US"
    },
    "199a7631-d10c-580d-a568-d1d310305a9f": {
      "id": "199a7631-d10c-580d-a568-d1d310305a9f",
      "parent": "9f8ce28c-46ed-53e2-953e-c137a753c839",
      "children": [
        "42d2ab12-f858-558a-b3e8-01809bbc9c87"
      ],
      "description": "React has limitations when it comes to working with persistent stateful media objects. In this article I discuss techniques for working with media elements like canvas, video and third-party libraries in React.",
      "internal": {
        "type": "contentfulWritingDescriptionTextNode",
        "mediaType": "text/markdown",
        "content": "React has limitations when it comes to working with persistent stateful media objects. In this article I discuss techniques for working with media elements like canvas, video and third-party libraries in React.",
        "contentDigest": "913e940f9ff498ddc2307185b24e2254",
        "owner": "gatsby-source-contentful"
      }
    },
    "25f0dc3b-b0ff-550d-851c-869c10a098ff": {
      "id": "25f0dc3b-b0ff-550d-851c-869c10a098ff",
      "parent": "9f8ce28c-46ed-53e2-953e-c137a753c839",
      "children": [
        "8541e5c9-619a-58e2-bb48-a09126320af5"
      ],
      "body": "One of the biggest advantages of React is that we need to worry less about managing updates to the UI. The presentation is defined once within the `render()` method of a component and it will update automatically when data changes.\n\nThe `render()` method returns elements via `JSX` that instruct React to update the DOM. This is the strength of React because it can manage updates to the DOM more efficiently than I would, and `JSX` provides a declarative means of describing a component structure, much like HTML.\n\nThere is however, one key assumption in all of this and that is that updating data should result in updates to the DOM. This assumption is central to the React component lifecycle, and in-fact the render method is the only required method of a React component. That's a pretty core assumption, and as a result accessing the DOM node of a React rendered element, is not always straight-forward.\n\nTypically DOM manipulation outside the render method is discouraged, but there are some elements in HTML that are not quite as descriptive when it comes to updates. Examples of these include elements like `<video>` and `<canvas>`. Updating these usually requires calling a native method to clear the canvas, or to pause video playback. To interact with these native methods we need to get a reference to the element in the DOM and for this React has refs. \n\n## Accessing the DOM in React\n\nRefs, as the name implies, provide us with a reference to an element in the DOM. We can access this only after React has rendered the element. \n\nMethods for creating and retrieving refs have changed between React versions with backward compatibility, so you might see other techniques used in the wild. Here I am using the `createRef()` method introduced in React 16.3. \n\n```javascript\nclass CanvasComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.myCanvas = React.createRef();\n  }\n  \n  componentDidMount() {\n    const ctx = this.myCanvas.current.getContext('2d');\n    ctx.fillRect(0, 0, 100, 100);\n  }\n  \n  render() {\n    return <canvas ref={this.myCanvas} width={100} height={100} />\n  }\n}\n```\nIn this example I create a ref named `myCanvas` in the `constructor()`, attact it to the component in the `render()` method, and then access it after the component has mounted, where I can finally draw to the HTML canvas.\n\nThis technique works well enough if I only need draw once, but for more complex examples, we're going to run into problems. React is calling the render method constantly, but because it is clever, it's recycling the DOM elements rather than re-building it each time. This is great because we want the canvas to be persistent. However changes to the surrounding HTML, and particularly higher up the document tree, can result in re-building parts of the DOM. If you'd like to know more about why and when React re-builds the DOM, I'd suggest reading the [React documentation on reconciliation](https://reactjs.org/docs/reconciliation.html).\n\n## Working with stateful media objects\n\nTake a look at this example of a random \"Rainbow Walker\": \n\n<div class=\"full-width\">\n<p data-height=\"350\" data-theme-id=\"light\" data-slug-hash=\"c795e7e7eb0a542a64739d7a1cb485a0\" data-default-tab=\"result\" data-user=\"MadeByMike\" data-pen-title=\"Rainbow walker\" data-preview=\"true\" class=\"codepen\">See the Pen <a href=\"https://codepen.io/MadeByMike/pen/c795e7e7eb0a542a64739d7a1cb485a0/\">Rainbow walker</a> by Mike (<a href=\"https://codepen.io/MadeByMike\">@MadeByMike</a>) on <a href=\"https://codepen.io\">CodePen</a>.</p>\n<script async src=\"https://static.codepen.io/assets/embed/ei.js\"></script>\n</div>\n\nIt looks great, but \"information\" is stored directly on the canvas. Each `tick` of the animation draws a new part of the line and the previous position and color information is lost. The cumulative result of this drawing procedure is stored on the canvas for as long as the canvas exists, but if React creates a new element, this information is lost forever. This is one of the challenges of working with persistent and stateful media objects in React.\n\nTake a look at this updated example and click the wrap\\unwrap button to see what happens: \n\n<div class=\"full-width\">\n<p data-height=\"400\" data-theme-id=\"light\" data-slug-hash=\"e8ec1be6a6c4cd28212473074e6b4607\" data-default-tab=\"result\" data-user=\"MadeByMike\" data-pen-title=\"Rainbow walker wrap\\unwrap\" data-preview=\"true\" class=\"codepen\">See the Pen <a href=\"https://codepen.io/MadeByMike/pen/e8ec1be6a6c4cd28212473074e6b4607/\">Rainbow walker wrap\\unwrap</a> by Mike (<a href=\"https://codepen.io/MadeByMike\">@MadeByMike</a>) on <a href=\"https://codepen.io\">CodePen</a>.</p>\n<script async src=\"https://static.codepen.io/assets/embed/ei.js\"></script>\n</div>\n\nAll the button does is change the `render()` method to wrap the `<canvas>` in an extra `<div>`. This is something that can happen frequently with larger applications and it's not always easy to avoid. Wrapping an element is one of many things that can cause parts of the DOM to be re-drawn.\n\nIt's worth noting that the current position of the walker is not reset when clicking the wrap\\unwrap button. That's because the component itself is not unmounted when its output changes. However, it's not always easy to avoid unmounting components either. Logically we try to split components into smaller chunks and once again the sorrounding layout can change. Take a look at this example of a canvas clock: \n\n<div class=\"full-width\">\n<p data-height=\"250\" data-theme-id=\"light\" data-slug-hash=\"5c3293dade22de7d823741c8241950b3\" data-default-tab=\"js,result\" data-user=\"MadeByMike\" data-pen-title=\"Clock\" data-preview=\"true\" class=\"codepen\">See the Pen <a href=\"https://codepen.io/MadeByMike/pen/5c3293dade22de7d823741c8241950b3/\">Clock</a> by Mike (<a href=\"https://codepen.io/MadeByMike\">@MadeByMike</a>) on <a href=\"https://codepen.io\">CodePen</a>.</p>\n<script async src=\"https://static.codepen.io/assets/embed/ei.js\"></script>\n</div>\n\nHere I've split the logic for the clock and the layout between two different components. When the layout surrounding the clock changes the component is re-mounted. In addition to a new `canvas`, data in state is lost and the counter is reset to 0. You will also see a noticeable flash as the canvas is re-initialised. For elements like `canvas` this is much more expensive than re-drawing a typical DOM node. This is especially true if we need to re-initialise a 3rd-party library as well.\n\n## Imperative & declarative APIs\n\nIt's not just `canvas`, these issues exist for `video` and other media, as well as 3rd-party libraries for things like data visualisation, mapping and charts. The problem is that libraries like D3.js, three.js, mapbox and whatever the hottest chart library is right now, have imperative APIs. This typically means that there is a single object that represents an entity on the page and we invoke actions directly on it. For example with Mapbox after creating a new map, we call methods like `flyTo()` to trigger actions. E.g.\n\n```\nvar map = new mapboxgl.Map(mapboxOptions);\nmap.flyTo({center: [0, 0], zoom: 9});\n```\n\nThis approach is very different from HTML or JSX that have a more declarative API. With a declarative API it's more descriptive. We update the description of the map with new properties and the library resolves these changes into a set of actions required to update the map.\n\nAnimations or any action that occurs over time can be difficult to describe using a declarative API. This is because declarative components don't typically have a persistent state. Think about how animations work in CSS. New animations can be triggered by the addition of a classname but these properties will reset the existing animation, causing it to start from its initial state. \n\nDespite this, I see numerous attempts to \"solve\" the challenges of working with stateful media in React by creating libraries convert imperative APIs into a set of declarative React components. They do this by wrapping another layer of abstraction around 3rd-party tools and native APIs. \n\nThe [react-map-gl](https://github.com/uber/react-map-gl) library has more than 4000 stars. This recreation of the HTML5 canvas API [react-konva](https://github.com/konvajs/react-konva) has more than 2000. The [react-d3-components](https://github.com/codesuki/react-d3-components) library has over 1400 and there are many more like these. \n\nTo me these are the jQuery plugins of this era. They all provide limited on-rails solutions that serves to comfort developers with a React mindset. Perhaps the only advantage is that the better-designed examples of these allow developers to continue splitting logic into smaller components. \n\n## Escaping React\n\nOften a `<canvas>`, `<video>`, or chart container will be the lowest level item in the DOM that React is aware of. Therefore the React component that mounts these can become bloated with all the custom methods, events and other logic that controls the embedded object.\n\nI don't think the solution is to try and envelope everything into React. Although declarative APIs can be amazingly succinct and performant they are not the solution to everything. I also think that trying to map an existing imperative API to a set of React components going to result in something less than the original.   \n\nMy solution is to get the heck out of React when I need to and find a way to make these things work together. Let's take a look at an example of an HTML `<video>` element and a solution that avoids:\n\n- clearing stateful data (such as the video source and play state) when React re-renders,\n- methods and actions restricted to a single component\n\n__Note:__ In this example, I'm using es6 imports to demonstrate how elements, functions and components can be shared between files. \n\nIn one file I create a component with a ref similar to the first example.\n\n```javascript\nimport React from \"react\";\n\nconst videoElement = document.createElement(\"video\");\n\nclass Video extends React.Component {\n  constructor(props) {\n    super(props);\n    this.myVideoContainer = React.createRef();\n  }\n\n  componentDidMount() {\n    this.myVideoContainer.current.appendChild(videoElement);\n  }\n\n  render() {\n    return <div ref={this.myVideoContainer} />;\n  }\n}\n\nexport { videoElement, Video };\n\n```\nInstead of attaching it to a canvas or video element, the ref is attached to an empty `<div>` container. The video element is a detached DOM node that exists outside the component. I append this to the container once the React component is mounted. \n\nBecause the video element exists outside a React component, even if React re-renders the container or unmounts the component, the video will be re-mounted without losing its source, play state, or any other data.\n\nWe're exporting the `videoElement` so we can access it in different components. I can now create a load button that applies a video source to the element:\n\n```javascript\nimport React from \"react\";\nimport { videoElement } from \"./video\";\n\nclass LoadButton extends React.Component {\n  render() {\n    return (\n      <button\n        onClick={function() {\n          //  Thank you MDN for the video source! \n          videoElement.src =\n            \"https://interactive-examples.mdn.mozilla.net/media/examples/flower.mp4\";\n        }}\n      >\n        Load\n      </button>\n    );\n  }\n}\n\nexport { LoadButton };\n```\n\nAs well as a play button: \n\n```javascript\nimport React from \"react\";\nimport { videoElement } from \"./video\";\n\nclass PlayButton extends React.Component {\n  render() {\n    return (\n      <button\n        onClick={function() {\n          videoElement.play();\n        }}\n      >\n        Play\n      </button>\n    );\n  }\n}\n\nexport { PlayButton };\n\n```\n\nI can even create custom functions that extend the native `<video>` element. Here I've added a method to inverts colours by toggling a classname:\n\n```javascript\nimport React from \"react\";\nimport { videoElement } from \"./video\";\n\nfunction invertVideo() {\n  videoElement.classList.toggle(\"invert\");\n}\n\nclass InvertButton extends React.Component {\n  render() {\n    return (\n      <button\n        onClick={function() {\n          invertVideo();\n        }}\n      >\n        Invert\n      </button>\n    );\n  }\n}\n\nexport { InvertButton };\n```\n\nIn a real application, functions like `invertVideo()` might not be tied to a single UI element such as in this example. A function that clears data on a map, for example, might be triggered by multiple UI actions. In cases like this, it makes more sense to import functions rather than co-locating them with the UI components.\n\nEither way, the ability to split this code and organise it in different ways is a huge win compared with a massive React component and some of the techniques used to pass imperative actions like that of a play button between independent components.\n\nYou can check out a full demo here:\n\n[![Edit react-html-video](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/n9zp6yry7p)\n\n__Note__: By importing the `videoElement` we're creating an implicit link between components. \n\nIdeally, React components are dumb and fully reusable. I wanted to show the simplest example first, but also practically speaking, I think this technique is sufficient for many applications. Most importantly it's not difficult to refactor if you need greater flexibility or multiple instances of components later. \n\n## Multiple instances\n\nThe examples above deal with a single instance of a media element. If we needed a 2nd video, we'd have to create a 2nd component along with a 2nd play button, load button etc...\n\nDespite its limitations, if you can get away with it, I think a single entity is a lot easier to work with, but there are problems when we have multiple instances. \n\nIf you pass the `videoElement` as a prop a lot of the problems can be solved. However, if we are going to re-structure components to be more reusable, rather than just passing the DOM element, it might help to organise some of the functions and exports into methods and properties within a class. \n\nThere are several different patterns you could use. What's best depends on your particular project. This is an example I created for the canvas clock: \n\n```javascript\nclass Counter {\n  constructor() {\n    this.element = document.createElement(\"canvas\");\n    this.ctx = this.element.getContext(\"2d\");\n\n    this.element.width = 100;\n    this.element.height = 100;\n    \n    this.ctx.font = \"40px Georgia, serif\";\n    this.ctx.textAlign = \"center\";\n    this.ctx.textBaseline = \"middle\";\n    \n    this.timer = false;\n    this.counter = 0;\n    \n    this.step = this.step.bind(this);\n  }\n\n  start() {\n    this.timer = setInterval(this.step, 100);\n  }\n\n  stop() {\n    clearInterval(this.timer);\n  }\n\n  step() {\n    this.counter = this.counter < 99 ? this.counter + 1 : 0;\n    this.ctx.fillStyle = \"black\";\n    this.ctx.fillRect(0, 0, 100, 100);\n    this.ctx.fillStyle = \"white\";\n    this.ctx.fillText(this.counter, 50, 50);\n  }\n}\n```\n\nWith this generic class, we create an instance of `Counter` for each clock, I then pass the instance as a parameter to the `<Clock/>` and `<StopButton/>` components.\n\n```javascript\nimport { Clock } from \"./clock\";\nimport { StopButton } from \"./stop-button\";\nimport { Counter } from './counter'\n\nconst clockA = new Counter();\nconst clockB = new Counter();\n\n<Clock counter={clockA} /> \n<StopButton counter={clockA} />\n<Clock counter={clockA} /> \n<StopButton counter={clockA} />\n```\n\nIn the `<Clock/>` and `<StopButton/>` components we can retrieve the DOM element and access methods via the `counter` prop:\n\n```javascript\nclass Clock extends React.Component {\n  constructor(props) {\n    super(props);\n    this.myClockContainer = React.createRef();\n  }\n\n  componentDidMount() {\n    this.myClockContainer.current.appendChild(this.props.counter.element);\n    this.props.counter.start();\n  }\n\n  render() {\n    return <div ref={this.myClockContainer} />;\n  }\n}\n```\n\nOnce again you can see a full example here: \n\n[![Edit react-many-clocks](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/y06pjpo0lx)\n\n## Sharing data\n\nThe final challenge we have is sharing data between React and the media elements. Many of these have internal state and retrieving this is often as easy as calling a method. For example to get the current play time of a video we can import the element and query the `currentTime` property: \n\n```javascript\nimport { videoElement } from './video' \nconst time = videoElement.currentTime\n```\n\nThis is adequate in many cases, but React is not going to re-render when the `currentTime` changes. We need to communicate relevant internal state changes to React. The video element has a `timeupdate` event. We can import the element and listen for `timeupdate`, then set state within React.\n\n```javascript\nimport React from \"react\";\nimport { videoElement } from \"./video\";\n\nclass VideoTimer extends React.Component {\n\n  constructor(props) {\n    super(props)\n    this.state = { time: 0 }\n    this.setTime = this.setTime.bind(this)\n  }\n\n  setTime() {\n    this.setState({ time: videoElement.currentTime })\n  }\n  \n  componentDidMount() {\n    videoElement.addEventListener(\"timeupdate\", this.setTime);\n  }\n  \n  componentWillUnmount() {\n    videoElement.removeEventListener(\"timeupdate\", this.setTime);\n  }\n\n  render() {\n    return (\n      <p>\n        {this.state.time}\n      </p>\n    );\n  }\n}\n```\n\nThere are situations where we want to keep large amounts of data in-sync. We can call imperative actions on media elements and listen for events within React components, and this is adequate for things like a video play button, a timer, or a simple `flyTo()` action on a map, but examples can easily become more complex than this. \n\nConsider a search and filtering interface that updates the application UI, then triggers a map to `zoomTo` and fit the bounds of filtered items. \n\nHere there are numerous state changes, computations and derived actions that need to be triggered on the map. It's not clear which component should be responsible for listening to updates and triggering imperative actions on the map. \n\nIn these situations, it helps to use some kind of store for state management. With this, we can share state between React and the media element. You can use [Redux](https://redux.js.org/introduction) if you are familiar with it, or if you want a recommendation I've been enjoying [Unistore](https://github.com/developit/unistore) recently. It doesn't matter what you use as long as you can subscribe to state changes and imperatively get the state from the store.\n\nThere are two different approaches we can use. With canvas animations, games, and libraries like Three.js or D3.js you might want to implement a render loop. A render loop will run periodically (usually several times a second) and we can fetch state from the store and call an update method.\n\nA very simple example of a render loop looks something like this:\n\n```javascript\nimport { store } from './store'\n\nfunction loop() {\n  const state = store.getState();\n  \n  // Do updates\n  \n  requestAnimationFrame(loop)\n}\n  \nrequestAnimationFrame(loop)\n```\n\nThis approach is constantly calling `loop()` using `requestAnimationFrame()`. It then gets state from the store and applies updates on every frame. \n\nThe other approach is to subscribe to the store and call update only when the store changes.\n\n```javascript\nimport { store } from './store'\n\nfunction update() { \n  const state = store.getState();\n  // Do updates\n}\n\nstore.subscribe(update)\n```\n\nWith both these examples, it is possible to call `store.setState()` or dispatch actions and have React components respond to data changes initiated by the media element.\n\nHere's an example of a map application that shares data between media elements, UI components within React: \n\n[![Edit react-map-unistore](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/2x6xwz6k2n)\n\nI really like this approach because we can have two highly separate applications that work largely independently yet share the same data source. In theory, it's not necessary to mount the map into a React application. It could just as easily be mounted by a different framework or plain onld JavaScript. This makes things much more portable and easy to test. \n\nIf you find working with canvas, video and 3rd-party libraries like D3.js, three.js, or mapbox difficult within React, I hope this has helped you understand some of the reasons, as well as some possible solutions. ",
      "internal": {
        "type": "contentfulWritingBodyTextNode",
        "mediaType": "text/markdown",
        "content": "One of the biggest advantages of React is that we need to worry less about managing updates to the UI. The presentation is defined once within the `render()` method of a component and it will update automatically when data changes.\n\nThe `render()` method returns elements via `JSX` that instruct React to update the DOM. This is the strength of React because it can manage updates to the DOM more efficiently than I would, and `JSX` provides a declarative means of describing a component structure, much like HTML.\n\nThere is however, one key assumption in all of this and that is that updating data should result in updates to the DOM. This assumption is central to the React component lifecycle, and in-fact the render method is the only required method of a React component. That's a pretty core assumption, and as a result accessing the DOM node of a React rendered element, is not always straight-forward.\n\nTypically DOM manipulation outside the render method is discouraged, but there are some elements in HTML that are not quite as descriptive when it comes to updates. Examples of these include elements like `<video>` and `<canvas>`. Updating these usually requires calling a native method to clear the canvas, or to pause video playback. To interact with these native methods we need to get a reference to the element in the DOM and for this React has refs. \n\n## Accessing the DOM in React\n\nRefs, as the name implies, provide us with a reference to an element in the DOM. We can access this only after React has rendered the element. \n\nMethods for creating and retrieving refs have changed between React versions with backward compatibility, so you might see other techniques used in the wild. Here I am using the `createRef()` method introduced in React 16.3. \n\n```javascript\nclass CanvasComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.myCanvas = React.createRef();\n  }\n  \n  componentDidMount() {\n    const ctx = this.myCanvas.current.getContext('2d');\n    ctx.fillRect(0, 0, 100, 100);\n  }\n  \n  render() {\n    return <canvas ref={this.myCanvas} width={100} height={100} />\n  }\n}\n```\nIn this example I create a ref named `myCanvas` in the `constructor()`, attact it to the component in the `render()` method, and then access it after the component has mounted, where I can finally draw to the HTML canvas.\n\nThis technique works well enough if I only need draw once, but for more complex examples, we're going to run into problems. React is calling the render method constantly, but because it is clever, it's recycling the DOM elements rather than re-building it each time. This is great because we want the canvas to be persistent. However changes to the surrounding HTML, and particularly higher up the document tree, can result in re-building parts of the DOM. If you'd like to know more about why and when React re-builds the DOM, I'd suggest reading the [React documentation on reconciliation](https://reactjs.org/docs/reconciliation.html).\n\n## Working with stateful media objects\n\nTake a look at this example of a random \"Rainbow Walker\": \n\n<div class=\"full-width\">\n<p data-height=\"350\" data-theme-id=\"light\" data-slug-hash=\"c795e7e7eb0a542a64739d7a1cb485a0\" data-default-tab=\"result\" data-user=\"MadeByMike\" data-pen-title=\"Rainbow walker\" data-preview=\"true\" class=\"codepen\">See the Pen <a href=\"https://codepen.io/MadeByMike/pen/c795e7e7eb0a542a64739d7a1cb485a0/\">Rainbow walker</a> by Mike (<a href=\"https://codepen.io/MadeByMike\">@MadeByMike</a>) on <a href=\"https://codepen.io\">CodePen</a>.</p>\n<script async src=\"https://static.codepen.io/assets/embed/ei.js\"></script>\n</div>\n\nIt looks great, but \"information\" is stored directly on the canvas. Each `tick` of the animation draws a new part of the line and the previous position and color information is lost. The cumulative result of this drawing procedure is stored on the canvas for as long as the canvas exists, but if React creates a new element, this information is lost forever. This is one of the challenges of working with persistent and stateful media objects in React.\n\nTake a look at this updated example and click the wrap\\unwrap button to see what happens: \n\n<div class=\"full-width\">\n<p data-height=\"400\" data-theme-id=\"light\" data-slug-hash=\"e8ec1be6a6c4cd28212473074e6b4607\" data-default-tab=\"result\" data-user=\"MadeByMike\" data-pen-title=\"Rainbow walker wrap\\unwrap\" data-preview=\"true\" class=\"codepen\">See the Pen <a href=\"https://codepen.io/MadeByMike/pen/e8ec1be6a6c4cd28212473074e6b4607/\">Rainbow walker wrap\\unwrap</a> by Mike (<a href=\"https://codepen.io/MadeByMike\">@MadeByMike</a>) on <a href=\"https://codepen.io\">CodePen</a>.</p>\n<script async src=\"https://static.codepen.io/assets/embed/ei.js\"></script>\n</div>\n\nAll the button does is change the `render()` method to wrap the `<canvas>` in an extra `<div>`. This is something that can happen frequently with larger applications and it's not always easy to avoid. Wrapping an element is one of many things that can cause parts of the DOM to be re-drawn.\n\nIt's worth noting that the current position of the walker is not reset when clicking the wrap\\unwrap button. That's because the component itself is not unmounted when its output changes. However, it's not always easy to avoid unmounting components either. Logically we try to split components into smaller chunks and once again the sorrounding layout can change. Take a look at this example of a canvas clock: \n\n<div class=\"full-width\">\n<p data-height=\"250\" data-theme-id=\"light\" data-slug-hash=\"5c3293dade22de7d823741c8241950b3\" data-default-tab=\"js,result\" data-user=\"MadeByMike\" data-pen-title=\"Clock\" data-preview=\"true\" class=\"codepen\">See the Pen <a href=\"https://codepen.io/MadeByMike/pen/5c3293dade22de7d823741c8241950b3/\">Clock</a> by Mike (<a href=\"https://codepen.io/MadeByMike\">@MadeByMike</a>) on <a href=\"https://codepen.io\">CodePen</a>.</p>\n<script async src=\"https://static.codepen.io/assets/embed/ei.js\"></script>\n</div>\n\nHere I've split the logic for the clock and the layout between two different components. When the layout surrounding the clock changes the component is re-mounted. In addition to a new `canvas`, data in state is lost and the counter is reset to 0. You will also see a noticeable flash as the canvas is re-initialised. For elements like `canvas` this is much more expensive than re-drawing a typical DOM node. This is especially true if we need to re-initialise a 3rd-party library as well.\n\n## Imperative & declarative APIs\n\nIt's not just `canvas`, these issues exist for `video` and other media, as well as 3rd-party libraries for things like data visualisation, mapping and charts. The problem is that libraries like D3.js, three.js, mapbox and whatever the hottest chart library is right now, have imperative APIs. This typically means that there is a single object that represents an entity on the page and we invoke actions directly on it. For example with Mapbox after creating a new map, we call methods like `flyTo()` to trigger actions. E.g.\n\n```\nvar map = new mapboxgl.Map(mapboxOptions);\nmap.flyTo({center: [0, 0], zoom: 9});\n```\n\nThis approach is very different from HTML or JSX that have a more declarative API. With a declarative API it's more descriptive. We update the description of the map with new properties and the library resolves these changes into a set of actions required to update the map.\n\nAnimations or any action that occurs over time can be difficult to describe using a declarative API. This is because declarative components don't typically have a persistent state. Think about how animations work in CSS. New animations can be triggered by the addition of a classname but these properties will reset the existing animation, causing it to start from its initial state. \n\nDespite this, I see numerous attempts to \"solve\" the challenges of working with stateful media in React by creating libraries convert imperative APIs into a set of declarative React components. They do this by wrapping another layer of abstraction around 3rd-party tools and native APIs. \n\nThe [react-map-gl](https://github.com/uber/react-map-gl) library has more than 4000 stars. This recreation of the HTML5 canvas API [react-konva](https://github.com/konvajs/react-konva) has more than 2000. The [react-d3-components](https://github.com/codesuki/react-d3-components) library has over 1400 and there are many more like these. \n\nTo me these are the jQuery plugins of this era. They all provide limited on-rails solutions that serves to comfort developers with a React mindset. Perhaps the only advantage is that the better-designed examples of these allow developers to continue splitting logic into smaller components. \n\n## Escaping React\n\nOften a `<canvas>`, `<video>`, or chart container will be the lowest level item in the DOM that React is aware of. Therefore the React component that mounts these can become bloated with all the custom methods, events and other logic that controls the embedded object.\n\nI don't think the solution is to try and envelope everything into React. Although declarative APIs can be amazingly succinct and performant they are not the solution to everything. I also think that trying to map an existing imperative API to a set of React components going to result in something less than the original.   \n\nMy solution is to get the heck out of React when I need to and find a way to make these things work together. Let's take a look at an example of an HTML `<video>` element and a solution that avoids:\n\n- clearing stateful data (such as the video source and play state) when React re-renders,\n- methods and actions restricted to a single component\n\n__Note:__ In this example, I'm using es6 imports to demonstrate how elements, functions and components can be shared between files. \n\nIn one file I create a component with a ref similar to the first example.\n\n```javascript\nimport React from \"react\";\n\nconst videoElement = document.createElement(\"video\");\n\nclass Video extends React.Component {\n  constructor(props) {\n    super(props);\n    this.myVideoContainer = React.createRef();\n  }\n\n  componentDidMount() {\n    this.myVideoContainer.current.appendChild(videoElement);\n  }\n\n  render() {\n    return <div ref={this.myVideoContainer} />;\n  }\n}\n\nexport { videoElement, Video };\n\n```\nInstead of attaching it to a canvas or video element, the ref is attached to an empty `<div>` container. The video element is a detached DOM node that exists outside the component. I append this to the container once the React component is mounted. \n\nBecause the video element exists outside a React component, even if React re-renders the container or unmounts the component, the video will be re-mounted without losing its source, play state, or any other data.\n\nWe're exporting the `videoElement` so we can access it in different components. I can now create a load button that applies a video source to the element:\n\n```javascript\nimport React from \"react\";\nimport { videoElement } from \"./video\";\n\nclass LoadButton extends React.Component {\n  render() {\n    return (\n      <button\n        onClick={function() {\n          //  Thank you MDN for the video source! \n          videoElement.src =\n            \"https://interactive-examples.mdn.mozilla.net/media/examples/flower.mp4\";\n        }}\n      >\n        Load\n      </button>\n    );\n  }\n}\n\nexport { LoadButton };\n```\n\nAs well as a play button: \n\n```javascript\nimport React from \"react\";\nimport { videoElement } from \"./video\";\n\nclass PlayButton extends React.Component {\n  render() {\n    return (\n      <button\n        onClick={function() {\n          videoElement.play();\n        }}\n      >\n        Play\n      </button>\n    );\n  }\n}\n\nexport { PlayButton };\n\n```\n\nI can even create custom functions that extend the native `<video>` element. Here I've added a method to inverts colours by toggling a classname:\n\n```javascript\nimport React from \"react\";\nimport { videoElement } from \"./video\";\n\nfunction invertVideo() {\n  videoElement.classList.toggle(\"invert\");\n}\n\nclass InvertButton extends React.Component {\n  render() {\n    return (\n      <button\n        onClick={function() {\n          invertVideo();\n        }}\n      >\n        Invert\n      </button>\n    );\n  }\n}\n\nexport { InvertButton };\n```\n\nIn a real application, functions like `invertVideo()` might not be tied to a single UI element such as in this example. A function that clears data on a map, for example, might be triggered by multiple UI actions. In cases like this, it makes more sense to import functions rather than co-locating them with the UI components.\n\nEither way, the ability to split this code and organise it in different ways is a huge win compared with a massive React component and some of the techniques used to pass imperative actions like that of a play button between independent components.\n\nYou can check out a full demo here:\n\n[![Edit react-html-video](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/n9zp6yry7p)\n\n__Note__: By importing the `videoElement` we're creating an implicit link between components. \n\nIdeally, React components are dumb and fully reusable. I wanted to show the simplest example first, but also practically speaking, I think this technique is sufficient for many applications. Most importantly it's not difficult to refactor if you need greater flexibility or multiple instances of components later. \n\n## Multiple instances\n\nThe examples above deal with a single instance of a media element. If we needed a 2nd video, we'd have to create a 2nd component along with a 2nd play button, load button etc...\n\nDespite its limitations, if you can get away with it, I think a single entity is a lot easier to work with, but there are problems when we have multiple instances. \n\nIf you pass the `videoElement` as a prop a lot of the problems can be solved. However, if we are going to re-structure components to be more reusable, rather than just passing the DOM element, it might help to organise some of the functions and exports into methods and properties within a class. \n\nThere are several different patterns you could use. What's best depends on your particular project. This is an example I created for the canvas clock: \n\n```javascript\nclass Counter {\n  constructor() {\n    this.element = document.createElement(\"canvas\");\n    this.ctx = this.element.getContext(\"2d\");\n\n    this.element.width = 100;\n    this.element.height = 100;\n    \n    this.ctx.font = \"40px Georgia, serif\";\n    this.ctx.textAlign = \"center\";\n    this.ctx.textBaseline = \"middle\";\n    \n    this.timer = false;\n    this.counter = 0;\n    \n    this.step = this.step.bind(this);\n  }\n\n  start() {\n    this.timer = setInterval(this.step, 100);\n  }\n\n  stop() {\n    clearInterval(this.timer);\n  }\n\n  step() {\n    this.counter = this.counter < 99 ? this.counter + 1 : 0;\n    this.ctx.fillStyle = \"black\";\n    this.ctx.fillRect(0, 0, 100, 100);\n    this.ctx.fillStyle = \"white\";\n    this.ctx.fillText(this.counter, 50, 50);\n  }\n}\n```\n\nWith this generic class, we create an instance of `Counter` for each clock, I then pass the instance as a parameter to the `<Clock/>` and `<StopButton/>` components.\n\n```javascript\nimport { Clock } from \"./clock\";\nimport { StopButton } from \"./stop-button\";\nimport { Counter } from './counter'\n\nconst clockA = new Counter();\nconst clockB = new Counter();\n\n<Clock counter={clockA} /> \n<StopButton counter={clockA} />\n<Clock counter={clockA} /> \n<StopButton counter={clockA} />\n```\n\nIn the `<Clock/>` and `<StopButton/>` components we can retrieve the DOM element and access methods via the `counter` prop:\n\n```javascript\nclass Clock extends React.Component {\n  constructor(props) {\n    super(props);\n    this.myClockContainer = React.createRef();\n  }\n\n  componentDidMount() {\n    this.myClockContainer.current.appendChild(this.props.counter.element);\n    this.props.counter.start();\n  }\n\n  render() {\n    return <div ref={this.myClockContainer} />;\n  }\n}\n```\n\nOnce again you can see a full example here: \n\n[![Edit react-many-clocks](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/y06pjpo0lx)\n\n## Sharing data\n\nThe final challenge we have is sharing data between React and the media elements. Many of these have internal state and retrieving this is often as easy as calling a method. For example to get the current play time of a video we can import the element and query the `currentTime` property: \n\n```javascript\nimport { videoElement } from './video' \nconst time = videoElement.currentTime\n```\n\nThis is adequate in many cases, but React is not going to re-render when the `currentTime` changes. We need to communicate relevant internal state changes to React. The video element has a `timeupdate` event. We can import the element and listen for `timeupdate`, then set state within React.\n\n```javascript\nimport React from \"react\";\nimport { videoElement } from \"./video\";\n\nclass VideoTimer extends React.Component {\n\n  constructor(props) {\n    super(props)\n    this.state = { time: 0 }\n    this.setTime = this.setTime.bind(this)\n  }\n\n  setTime() {\n    this.setState({ time: videoElement.currentTime })\n  }\n  \n  componentDidMount() {\n    videoElement.addEventListener(\"timeupdate\", this.setTime);\n  }\n  \n  componentWillUnmount() {\n    videoElement.removeEventListener(\"timeupdate\", this.setTime);\n  }\n\n  render() {\n    return (\n      <p>\n        {this.state.time}\n      </p>\n    );\n  }\n}\n```\n\nThere are situations where we want to keep large amounts of data in-sync. We can call imperative actions on media elements and listen for events within React components, and this is adequate for things like a video play button, a timer, or a simple `flyTo()` action on a map, but examples can easily become more complex than this. \n\nConsider a search and filtering interface that updates the application UI, then triggers a map to `zoomTo` and fit the bounds of filtered items. \n\nHere there are numerous state changes, computations and derived actions that need to be triggered on the map. It's not clear which component should be responsible for listening to updates and triggering imperative actions on the map. \n\nIn these situations, it helps to use some kind of store for state management. With this, we can share state between React and the media element. You can use [Redux](https://redux.js.org/introduction) if you are familiar with it, or if you want a recommendation I've been enjoying [Unistore](https://github.com/developit/unistore) recently. It doesn't matter what you use as long as you can subscribe to state changes and imperatively get the state from the store.\n\nThere are two different approaches we can use. With canvas animations, games, and libraries like Three.js or D3.js you might want to implement a render loop. A render loop will run periodically (usually several times a second) and we can fetch state from the store and call an update method.\n\nA very simple example of a render loop looks something like this:\n\n```javascript\nimport { store } from './store'\n\nfunction loop() {\n  const state = store.getState();\n  \n  // Do updates\n  \n  requestAnimationFrame(loop)\n}\n  \nrequestAnimationFrame(loop)\n```\n\nThis approach is constantly calling `loop()` using `requestAnimationFrame()`. It then gets state from the store and applies updates on every frame. \n\nThe other approach is to subscribe to the store and call update only when the store changes.\n\n```javascript\nimport { store } from './store'\n\nfunction update() { \n  const state = store.getState();\n  // Do updates\n}\n\nstore.subscribe(update)\n```\n\nWith both these examples, it is possible to call `store.setState()` or dispatch actions and have React components respond to data changes initiated by the media element.\n\nHere's an example of a map application that shares data between media elements, UI components within React: \n\n[![Edit react-map-unistore](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/2x6xwz6k2n)\n\nI really like this approach because we can have two highly separate applications that work largely independently yet share the same data source. In theory, it's not necessary to mount the map into a React application. It could just as easily be mounted by a different framework or plain onld JavaScript. This makes things much more portable and easy to test. \n\nIf you find working with canvas, video and 3rd-party libraries like D3.js, three.js, or mapbox difficult within React, I hope this has helped you understand some of the reasons, as well as some possible solutions. ",
        "contentDigest": "2c2ba95566a5c3cbc98ac8fdbccd6f99",
        "owner": "gatsby-source-contentful"
      }
    },
    "f88193a9-2b71-517f-8473-a856ee592d6a": {
      "id": "f88193a9-2b71-517f-8473-a856ee592d6a",
      "parent": "61d5a6ea-d1fb-5cae-97a6-c1bbf402a4f8",
      "children": [
        "01f51edb-62ef-5f06-99b9-f328701e5682"
      ],
      "description": "Me thinking about component-based architecture for CSS in 2014, before I knew what to call it.",
      "internal": {
        "type": "contentfulWritingDescriptionTextNode",
        "mediaType": "text/markdown",
        "content": "Me thinking about component-based architecture for CSS in 2014, before I knew what to call it.",
        "contentDigest": "4ddaad001d76e380f7d042f061fc3bc3",
        "owner": "gatsby-source-contentful"
      }
    },
    "ce8a8962-f0a6-5d17-a5e6-d807af493943": {
      "id": "ce8a8962-f0a6-5d17-a5e6-d807af493943",
      "parent": "61d5a6ea-d1fb-5cae-97a6-c1bbf402a4f8",
      "children": [
        "6c6773dc-5d26-542b-bd2e-82c9524c8ec9"
      ],
      "body": "Typically when we begin a new web project we start by creating a number of directories for CSS, JavaScript and other resources. This task hasn't changed much and it's a typical step for most developers. In many cases, this structure is a non-optional part of the workflow enforced by scaffolding tools like [yeoman](http://yeoman.io/), an MVC framework or a [boilerplate](http://html5boilerplate.com/).\n\nReasons behind it relate to the well-established principle <a href=\"http://en.wikipedia.org/wiki/Separation_of_concerns\">separation of concerns</a>. In web development we get separation of concerns for free. It is built into the difference between HTML, CSS and JavaScript, each relating to content, presentation, and behaviour respectively.\n\nDespite the importance of this principal, I've found that simple separation of CSS, JavaScript and resources within a project folder, is increasingly inadequate - especially for larger projects, and I'm starting to think there might be a better way.\n\n\nThis change of thinking started with [object oriented CSS](https://github.com/stubbornella/oocss/wiki), and [BEM](http://bem.info/) methodologies. These ideas changed the way I think about different components on the screen and Brad Frost's concept of [Atomic](http://bradfrostweb.com/blog/post/atomic-web-design/) [Design](http://patternlab.io/about.html), perfectly articulates the evolution of this thinking.\n\nThese ideas changed the way I structure my CSS, but it wasn't until I started using build tools in my front-end development workflow to generate API references and documentation, that I started to realise some limitations of the typical project structure. I suspect that these limitations may become even more apparent with the take-up of [web components](http://css-tricks.com/modular-future-web-components).\n\n\nOne of the problems I see is that components we think of are not really isolated. If you need to remove something you need to find the scripts, the styles, each of the resources, remove import statements if you are using a CSS pre compiler and perhaps update your build script. You often still don’t know if any of the resources are shared between components.\n\nHow we structure our projects is now often at odds with our thinking and how we set out API references, style guides, pattern libraries and other documentation. You have all of those right?\n\nI’m starting to suspect (and I reserve the right to be wrong) that with modern build tools we have today, we can structure projects to better reflect our modular thinking.\n\nI'm not suggesting that separation of concerns is no longer relevant, not at all, but separation can exist at a component level and while the end result might look much like a traditional project, this doesn't have to be the case for development.\n\nRecently I’ve been experimenting with having each of the styles, scripts and resources inside a unique folder per component.\n\nSo far this approach has worked well for any project that involves developing a component library, which means most websites.\n\nDoing it this way you can keep better track of resources related to the component I'm working on. You can keep examples and documentation in the same folder and update them whenever you work on that component. You can even keep test libraries and other files close to the source. However the biggest advantage is you can easily and confidently remove a component simply by removing the folder.\n\nOf course, there are some limitations -it’s not always obvious what represents a component. Smaller components must be grouped together and things like mixins and resets might also represent unique components in this structure. It’s always not easy to follow a rule, sometimes just decide what works best.\n\nIf including 3rd party libraries, you may have to refactor them or make exceptions when they don't fit the structure you're using -although this can be the case in any project.\n\nAdvantages of projects structured around components:\n\n* It's easy to update and remove components\n* Components become more portable between projects\n* It encourages modular thinking and development practise\n* It's easy for outsiders and non-technical people to understand\n* Faster\n\nDisadvantages of projects structured around components:\n\n* More complicated build scripts\n* Components must be largely independent of each other\n* 3rd party libraries are sometimes difficult to include\n",
      "internal": {
        "type": "contentfulWritingBodyTextNode",
        "mediaType": "text/markdown",
        "content": "Typically when we begin a new web project we start by creating a number of directories for CSS, JavaScript and other resources. This task hasn't changed much and it's a typical step for most developers. In many cases, this structure is a non-optional part of the workflow enforced by scaffolding tools like [yeoman](http://yeoman.io/), an MVC framework or a [boilerplate](http://html5boilerplate.com/).\n\nReasons behind it relate to the well-established principle <a href=\"http://en.wikipedia.org/wiki/Separation_of_concerns\">separation of concerns</a>. In web development we get separation of concerns for free. It is built into the difference between HTML, CSS and JavaScript, each relating to content, presentation, and behaviour respectively.\n\nDespite the importance of this principal, I've found that simple separation of CSS, JavaScript and resources within a project folder, is increasingly inadequate - especially for larger projects, and I'm starting to think there might be a better way.\n\n\nThis change of thinking started with [object oriented CSS](https://github.com/stubbornella/oocss/wiki), and [BEM](http://bem.info/) methodologies. These ideas changed the way I think about different components on the screen and Brad Frost's concept of [Atomic](http://bradfrostweb.com/blog/post/atomic-web-design/) [Design](http://patternlab.io/about.html), perfectly articulates the evolution of this thinking.\n\nThese ideas changed the way I structure my CSS, but it wasn't until I started using build tools in my front-end development workflow to generate API references and documentation, that I started to realise some limitations of the typical project structure. I suspect that these limitations may become even more apparent with the take-up of [web components](http://css-tricks.com/modular-future-web-components).\n\n\nOne of the problems I see is that components we think of are not really isolated. If you need to remove something you need to find the scripts, the styles, each of the resources, remove import statements if you are using a CSS pre compiler and perhaps update your build script. You often still don’t know if any of the resources are shared between components.\n\nHow we structure our projects is now often at odds with our thinking and how we set out API references, style guides, pattern libraries and other documentation. You have all of those right?\n\nI’m starting to suspect (and I reserve the right to be wrong) that with modern build tools we have today, we can structure projects to better reflect our modular thinking.\n\nI'm not suggesting that separation of concerns is no longer relevant, not at all, but separation can exist at a component level and while the end result might look much like a traditional project, this doesn't have to be the case for development.\n\nRecently I’ve been experimenting with having each of the styles, scripts and resources inside a unique folder per component.\n\nSo far this approach has worked well for any project that involves developing a component library, which means most websites.\n\nDoing it this way you can keep better track of resources related to the component I'm working on. You can keep examples and documentation in the same folder and update them whenever you work on that component. You can even keep test libraries and other files close to the source. However the biggest advantage is you can easily and confidently remove a component simply by removing the folder.\n\nOf course, there are some limitations -it’s not always obvious what represents a component. Smaller components must be grouped together and things like mixins and resets might also represent unique components in this structure. It’s always not easy to follow a rule, sometimes just decide what works best.\n\nIf including 3rd party libraries, you may have to refactor them or make exceptions when they don't fit the structure you're using -although this can be the case in any project.\n\nAdvantages of projects structured around components:\n\n* It's easy to update and remove components\n* Components become more portable between projects\n* It encourages modular thinking and development practise\n* It's easy for outsiders and non-technical people to understand\n* Faster\n\nDisadvantages of projects structured around components:\n\n* More complicated build scripts\n* Components must be largely independent of each other\n* 3rd party libraries are sometimes difficult to include\n",
        "contentDigest": "dc370b0ecb7a282d1c288627b1609562",
        "owner": "gatsby-source-contentful"
      }
    },
    "2874f855-f45b-5dd2-a1b8-8851a376ffb7": {
      "id": "2874f855-f45b-5dd2-a1b8-8851a376ffb7",
      "parent": "76644d91-6583-5489-b822-c89360b11ff0",
      "children": [
        "780e2dc2-67c9-5443-9cfc-47610b7ecd36"
      ],
      "description": "There are some interesting differences between how currentColor and custom properties work. Both are examples of dynamic properties in CSS but how they are resolved differs in some very important ways. I recently came across an example of this that had me scratching my head for a while.",
      "internal": {
        "type": "contentfulWritingDescriptionTextNode",
        "mediaType": "text/markdown",
        "content": "There are some interesting differences between how currentColor and custom properties work. Both are examples of dynamic properties in CSS but how they are resolved differs in some very important ways. I recently came across an example of this that had me scratching my head for a while.",
        "contentDigest": "d2d4395e4baeef402f25fc0ddcbf0e7d",
        "owner": "gatsby-source-contentful"
      }
    },
    "1df335a7-d623-5e24-8a29-5c438e0b1e5f": {
      "id": "1df335a7-d623-5e24-8a29-5c438e0b1e5f",
      "parent": "76644d91-6583-5489-b822-c89360b11ff0",
      "children": [
        "5e891d27-8efe-5e28-9b51-3f210c33daee"
      ],
      "body": "A friend was trying to set a theme on a container and have it apply a color to the border of a heading, and the body text. Something like this:\n![A black heading with a blue border and blue paragraphs below](//images.ctfassets.net/2cb7djx9f8kv/5d9fvupAkguQaCqAIkAIeY/fbc8b88a1eca000dba724401728e2dcb/custom-props.png)\n\nShe wanted to keep it simple with minimal CSS and ideally set the theme by applying just a single class in the HTML.\n \nSince we wanted to change the color of more than just paragraphs in the body text, it made sense to start by setting the `color` property on a container element. This would allow all elements inside the container to inherit the theme color and we could just set the headings back to black.\n\nSince we wanted to set the color in just one place, I suggested we set the value of `border-color` on the headings to inherit. This would cause the heading element to have the same value for `border-color` as its parent element. To my initial surprise the color of the border was black.\n\nMy CSS was something like this:\n\n```css\n.theme {\n  color: #2378a3;\n}\n\n.theme-heading {\n  color: black;\n  border-color: inherit;\n}\n```\n\nSince there is no `border-color` set on the `.theme` class, the default value is used. The default for `border-color` is `currentColor`, and in the context of `.theme`, the value of `currentColor` in this example is `#2378a3`.  This is the value I expected `.theme-heading` to inherit. \n\nYou might be wondering, as I was, what exactly is happening? The answer is, it’s not a bug, and it’s still inheriting from the parent element. It turns out, when we inherit `currentColor` we are not retrieving the resolved value of that property from the parent. Instead we are inheriting the keyword itself, and the computed value will be resolved in the local context. And, therefore in this example the border color will be black.\n\nThe solution is of course to set the value of the `border-color` as well as `color` in the `.theme` selector:\n\n```css\n\n.theme {\n  color: #2378a3;\n  border-color: #2378a3;\n}\n\n.theme-heading {\n  color: black;\n  border-color: inherit;\n}\n```\n\nNow we are no longer inheriting a dynamic property and the border color will be `#2378a3` as expected. And we are still setting the color values only on the `.theme` class.\n\nMaybe this is what you expected. Perhaps the reason I didn’t, is that I’ve been working with custom properties a lot recently, and although they are both dynamic, custom properties will not work like `currentColor` in the same situation.\n\nAn equivalent example with custom properties would look something like this:\n\n```css\n.theme {\n  --theme-color: #2378a3;\n  color: var(--theme-color);\n  border-color: var(--theme-color);\n}\n\n.theme-heading {\n  --theme-color: black;\n  color: var(--theme-color);\n  border-color: inherit; \n}\n```\n\nIn this situation the `border-color` of `.theme-heading` is inheriting the `--theme-color` custom property from the parent element. Yet even though the value of `--theme-color` is set locally to black, its border-color will not use this local value in the same way `currentColor` did.\n\nInheriting a value set by a custom property will always match the resolved value from the parent.\n\n__Note__: The `color` property in this example will take the local value, because it is not inherited.\n\nThe key difference here is: The `currentColor` keyword is not resolved at computed-value time, but is a reference to the used value of the local `color` property.\n\nSince learning about custom properties, I'd started to think of `currentColor` as a dynamic property in a very similar to custom properties. It turns out there are some fundamental differences that have real implications that we should be aware of. And again, this example highlights how different custom properties are from variables in preprocessors.\n\n\n\n",
      "internal": {
        "type": "contentfulWritingBodyTextNode",
        "mediaType": "text/markdown",
        "content": "A friend was trying to set a theme on a container and have it apply a color to the border of a heading, and the body text. Something like this:\n![A black heading with a blue border and blue paragraphs below](//images.ctfassets.net/2cb7djx9f8kv/5d9fvupAkguQaCqAIkAIeY/fbc8b88a1eca000dba724401728e2dcb/custom-props.png)\n\nShe wanted to keep it simple with minimal CSS and ideally set the theme by applying just a single class in the HTML.\n \nSince we wanted to change the color of more than just paragraphs in the body text, it made sense to start by setting the `color` property on a container element. This would allow all elements inside the container to inherit the theme color and we could just set the headings back to black.\n\nSince we wanted to set the color in just one place, I suggested we set the value of `border-color` on the headings to inherit. This would cause the heading element to have the same value for `border-color` as its parent element. To my initial surprise the color of the border was black.\n\nMy CSS was something like this:\n\n```css\n.theme {\n  color: #2378a3;\n}\n\n.theme-heading {\n  color: black;\n  border-color: inherit;\n}\n```\n\nSince there is no `border-color` set on the `.theme` class, the default value is used. The default for `border-color` is `currentColor`, and in the context of `.theme`, the value of `currentColor` in this example is `#2378a3`.  This is the value I expected `.theme-heading` to inherit. \n\nYou might be wondering, as I was, what exactly is happening? The answer is, it’s not a bug, and it’s still inheriting from the parent element. It turns out, when we inherit `currentColor` we are not retrieving the resolved value of that property from the parent. Instead we are inheriting the keyword itself, and the computed value will be resolved in the local context. And, therefore in this example the border color will be black.\n\nThe solution is of course to set the value of the `border-color` as well as `color` in the `.theme` selector:\n\n```css\n\n.theme {\n  color: #2378a3;\n  border-color: #2378a3;\n}\n\n.theme-heading {\n  color: black;\n  border-color: inherit;\n}\n```\n\nNow we are no longer inheriting a dynamic property and the border color will be `#2378a3` as expected. And we are still setting the color values only on the `.theme` class.\n\nMaybe this is what you expected. Perhaps the reason I didn’t, is that I’ve been working with custom properties a lot recently, and although they are both dynamic, custom properties will not work like `currentColor` in the same situation.\n\nAn equivalent example with custom properties would look something like this:\n\n```css\n.theme {\n  --theme-color: #2378a3;\n  color: var(--theme-color);\n  border-color: var(--theme-color);\n}\n\n.theme-heading {\n  --theme-color: black;\n  color: var(--theme-color);\n  border-color: inherit; \n}\n```\n\nIn this situation the `border-color` of `.theme-heading` is inheriting the `--theme-color` custom property from the parent element. Yet even though the value of `--theme-color` is set locally to black, its border-color will not use this local value in the same way `currentColor` did.\n\nInheriting a value set by a custom property will always match the resolved value from the parent.\n\n__Note__: The `color` property in this example will take the local value, because it is not inherited.\n\nThe key difference here is: The `currentColor` keyword is not resolved at computed-value time, but is a reference to the used value of the local `color` property.\n\nSince learning about custom properties, I'd started to think of `currentColor` as a dynamic property in a very similar to custom properties. It turns out there are some fundamental differences that have real implications that we should be aware of. And again, this example highlights how different custom properties are from variables in preprocessors.\n\n\n\n",
        "contentDigest": "0f3cf8083b678c7b15608dfa37d31643",
        "owner": "gatsby-source-contentful"
      }
    },
    "0932c157-ca35-5676-af96-da8aafc3554d": {
      "id": "0932c157-ca35-5676-af96-da8aafc3554d",
      "parent": "2cc84a29-b335-555a-a3e4-c99f05b52ad7",
      "children": [
        "ad6bcb86-a31e-540b-a741-b9881c11a73a"
      ],
      "description": "My attempt at a very basic explanation of the 'this' keyword in JavaScript.",
      "internal": {
        "type": "contentfulWritingDescriptionTextNode",
        "mediaType": "text/markdown",
        "content": "My attempt at a very basic explanation of the 'this' keyword in JavaScript.",
        "contentDigest": "b5449a1ce594ade857d221059fb27568",
        "owner": "gatsby-source-contentful"
      }
    },
    "2f5acfad-2a61-502c-a61e-7c5d127b4c54": {
      "id": "2f5acfad-2a61-502c-a61e-7c5d127b4c54",
      "parent": "2cc84a29-b335-555a-a3e4-c99f05b52ad7",
      "children": [
        "479da221-e984-5c18-853d-a5d8edff3717"
      ],
      "body": "Like many things, the `this` keyword in JavaScript is something I learned to work with and around, long before I gained any proper understanding of how it works. Recently I was asked to describe it and found despite my experience I still strugled to find simple terms. So I thought I'd write down my best attempt.\n\nThere is a special keyword in JavaScript called `this`. It is a reference to an object. This reference is sometimes called a `binding` because it ties the value of `this` to a specific object. What object, and the value of `this`, depends on how and where the function is called.\n\nThe default value of `this` is the `window` object in browsers or `undefined` when in strict mode. \n\nWe can explicitly set what `this` points by executing functions with methods like `call`, `bind` and `apply`. \n\n```javascript\nfunction myFunc() {\n  return this;\n}\n\nmyFunc() // window\nvar myBinding = myFunc.bind('hello'); // .bind() returns a new function with a different binding\nmyBinding(); // 'hello'\nmyFunc.call('hello'); // 'hello'\nmyFunc.apply('hello'); // 'hello'\n```\n\nWhat confuses me sometimes is JavaScript will implicity bind `this` if the function is called within an context owning object. This means when a function is a property of a context owning object, the value of `this` will be the object itself. In the example below the owning object, and therfore value of `this` is `myObject`:  \n\n```javascript\nfunction myFunc() {\n  return this.greeting;\n}\n\nvar myObject = {\n\tgreeting: 'hello',\n  function: myFunc\n}\n\nconsole.log(myObject.function()); // 'hello'\n```\n\nCalling a function with the keyword `new` will result in a new empty object bound to `this`. \n\n```javascript\nfunction myFunc(something) {\n\tthis.thing = something;\n\treturn this.thing;\n}\n\nconsole.log(new myFunc('something'));\n```\n\nThis has been a very short introduction that covers only basic information. If you want to know more I was inspired to attempt my own explaination after reading Willian Martins, [Taming this In JavaScript With Bind Operator](https://www.smashingmagazine.com/2018/10/taming-this-javascript-bind-operator/) . I could also not write about `this` without recommending Kyle Simpson's explaination in [You Don't Know JavaScript](https://github.com/getify/You-Dont-Know-JS/blob/master/this%20%26%20object%20prototypes/ch2.md), especially the [TLDR](https://github.com/getify/You-Dont-Know-JS/blob/master/this%20%26%20object%20prototypes/ch2.md#review-tldr).\n\n",
      "internal": {
        "type": "contentfulWritingBodyTextNode",
        "mediaType": "text/markdown",
        "content": "Like many things, the `this` keyword in JavaScript is something I learned to work with and around, long before I gained any proper understanding of how it works. Recently I was asked to describe it and found despite my experience I still strugled to find simple terms. So I thought I'd write down my best attempt.\n\nThere is a special keyword in JavaScript called `this`. It is a reference to an object. This reference is sometimes called a `binding` because it ties the value of `this` to a specific object. What object, and the value of `this`, depends on how and where the function is called.\n\nThe default value of `this` is the `window` object in browsers or `undefined` when in strict mode. \n\nWe can explicitly set what `this` points by executing functions with methods like `call`, `bind` and `apply`. \n\n```javascript\nfunction myFunc() {\n  return this;\n}\n\nmyFunc() // window\nvar myBinding = myFunc.bind('hello'); // .bind() returns a new function with a different binding\nmyBinding(); // 'hello'\nmyFunc.call('hello'); // 'hello'\nmyFunc.apply('hello'); // 'hello'\n```\n\nWhat confuses me sometimes is JavaScript will implicity bind `this` if the function is called within an context owning object. This means when a function is a property of a context owning object, the value of `this` will be the object itself. In the example below the owning object, and therfore value of `this` is `myObject`:  \n\n```javascript\nfunction myFunc() {\n  return this.greeting;\n}\n\nvar myObject = {\n\tgreeting: 'hello',\n  function: myFunc\n}\n\nconsole.log(myObject.function()); // 'hello'\n```\n\nCalling a function with the keyword `new` will result in a new empty object bound to `this`. \n\n```javascript\nfunction myFunc(something) {\n\tthis.thing = something;\n\treturn this.thing;\n}\n\nconsole.log(new myFunc('something'));\n```\n\nThis has been a very short introduction that covers only basic information. If you want to know more I was inspired to attempt my own explaination after reading Willian Martins, [Taming this In JavaScript With Bind Operator](https://www.smashingmagazine.com/2018/10/taming-this-javascript-bind-operator/) . I could also not write about `this` without recommending Kyle Simpson's explaination in [You Don't Know JavaScript](https://github.com/getify/You-Dont-Know-JS/blob/master/this%20%26%20object%20prototypes/ch2.md), especially the [TLDR](https://github.com/getify/You-Dont-Know-JS/blob/master/this%20%26%20object%20prototypes/ch2.md#review-tldr).\n\n",
        "contentDigest": "de11696b5d7b40a7316cf5f40ebcc9f7",
        "owner": "gatsby-source-contentful"
      }
    },
    "70e1f972-b4fb-5bc5-a537-7dd452c62767": {
      "id": "70e1f972-b4fb-5bc5-a537-7dd452c62767",
      "parent": "ce59dc47-13aa-5dc3-85af-a91760a04da7",
      "children": [
        "356913e5-6f2d-5cb4-a897-f1a3eb269adf"
      ],
      "description": "A bunch of interesting techniques for using SVG to make unique responsive components.",
      "internal": {
        "type": "contentfulWritingDescriptionTextNode",
        "mediaType": "text/markdown",
        "content": "A bunch of interesting techniques for using SVG to make unique responsive components.",
        "contentDigest": "a747777608105543776b112d65d9b68f",
        "owner": "gatsby-source-contentful"
      }
    },
    "c48f80ac-3145-53fd-8f4b-f7a2cb05de16": {
      "id": "c48f80ac-3145-53fd-8f4b-f7a2cb05de16",
      "parent": "ce59dc47-13aa-5dc3-85af-a91760a04da7",
      "children": [
        "a922708e-f857-56ad-826b-f41c58cc739e"
      ],
      "body": "I think many of us are not using SVG to its full potential. I often see SVG used as an alternative image format or as a simple solution for icons, and whilst it's great for these things, it's also a lot more than that. SVG can solve problems that HTML and CSS alone can't. It has responsive properties that go beyond vector scaling, such as control over aspect ratio, embedded CSS and a unique co-ordinate system. I rarely see all the features of SVG used together to create unique responsive solutions.\n\nPerhaps the full potential of SVG on the web remains untapped because to get the most out of it, you need care a little more about the mark-up. I'm not advocating writing SVG by hand, but the level of control that most graphics applications give us is not adequate for implementing anything more than basic techniques.\n\nHow we overcome this I'm not sure, unlike HTML we need a graphical interface for producing SVG images, but SVG is also a mark-up language, and there are good reasons why we use text editors for HTML. Perhaps SVG will always need both designers and developers to get the most out of it.\n\nWith that in mind, let's take some things you can do with SVG that you might not have seen, and perhaps not even considered possible.\n\n## Complex positioning\n\nSVG has a complex positioning and coordinate system that is entirely different from the box model that you are (hopefully) familiar with. To gain a full understanding of it, I recommend reading Sara Soueidan's excellent articles on [Understanding SVG Coordinate Systems and Transformations](https://sarasoueidan.com/blog/svg-coordinate-systems/) as well as Amelia Bellamy-Royd's, [How to Scale SVG](https://css-tricks.com/scale-svg/). I couldn't match the detail provided in these articles, so I choose not to try.\n\nIf you think of SVG like any other image format, to be responsive, it should stretch and scale to fill the available space. You should not be surprised to learn that \"Scalable Vector Graphics\" are great at this. Amelia's article demonstrated that, depending on the `viewBox` and `preserveAspectRatio` attributes, we can exercise more precise control over how SVG images scale.\n\nTake a look at this example of an ornate border and try to imaging how you might do this with only CSS and HTML.\n\n\n<div class=\"js-resizable\">\n  <img class=\"js-resizable-image\" src=\"/demos/svg/simple-border.svg\">\n</div>\n\n\nDig into the SVG source and you will see we're taking advantage of symbols, masks, transformations and other goodness that HTML and CSS have only ever dreamt of. It works great, but it is by no means the extent of the responsive capabilities of SVG.\n\nOne interesting and little known fact about SVG is that the `viewBox` is an optional attribute. Did you also know that you can nest SVG elements and establish a new coordinate system on nested SVG and symbol elements, by applying a new `viewBox`?\n\nWith that in mind, imaging for a minute that this is not an image on the web. How might a traditional artist adapt this design for a different sized page? They would probably not just uniformly scale the design. More likely, the corner flourishes and diamond would remain roughly same size and the length of the line connecting them would be reduced.\n\n<div class=\"js-resizable\">\n  <img class=\"js-resizable-image\" src=\"/demos/svg/complex-border.svg\">\n</div>\n\nWe can do this with SVG! Compare this to the prior example, the difference is particularly notable on smaller screens.\n\nThis type of responsive design is particularly suited to SVG and with a little understanding of the SVG coordinates system you can break out of the limitations of the box model.\n\n## Art directed responsive images with SVG\n\nAlthough the [picture element](http://caniuse.com/#feat=picture) and [srcset](http://caniuse.com/#feat=srcset) are now widely supported (with the exception of Internet Explorer), did you know you can create responsive art-directed images using SVG?\n\n<div class=\"js-resizable\">\n  <img class=\"js-resizable-image\" src=\"/demos/svg/ad-main.svg\" >\n</div>\n\nResize your window to see how it works.\n\nYou may recognise the image from an [influential blog post](http://cloudinary.com/blog/automatically_art_directed_responsive_images) and [example by Eric Portis](https://ericportis.com/etc/cloudinary/). Although it looks the same, this example is achieved using only SVG and CSS.\n\nTo achieve this technique I'm loading an SVG as the `src` attribute for an image. The SVG itself has an image element and embedded CSS that resizes and reframes the image using media queries.\n\nThe image element inside the SVG, has a base64 encoded dataURI. I'm using a dataURI because when loading external SVG files in an image element, such as via `<image src=\"image.svg\" >` they will not load additional linked resources. This is perhaps to prevent recursive references or for network performance reasons. Either way, to get around this limitation I'm using a dataURI.\n\n**Note:** Thanks to Amelia Bellamy-Royds for letting me know that external resources will load in SVG files referenced via an `object` or `iframe` element.\n\nCSS is global, so when embedding SVG in HTML (inline SVG), any CSS in the HTML document can also style SVG elements. Likewise `<style>` tags embedded in the SVG, when used inline, will not be scoped to the SVG element. They will be treated just like any other `<style>` tag found in the HTML body, that is, applied globally.\n\nDevelopers often take advantage of this, using SVG sprites and CSS to change the colour of icons. Some developers complain that they cannot use CSS to style SVG elements that are not used inline.\n\nI agree that this would be handy in some cases, but if you think about it the other way around many people are failing to take advantage of the fact that a referenced SVG (not inline) has its own document context.\n\nTherefore, CSS in referenced SVG files, is scoped. This includes media queries! I can take advantage of that fact to create a responsive image that is aware of its own width and adjusts display accordingly. The size of the page doesn't matter, it's responsiveness is relative to the size of the image itself. This works the same for backgrounds and other methods of referencing external SVG.\n\nOne disadvantage this technique has over `srcset` or the `picture` element is that everything in the SVG will be loaded, there is no opportunity to prioritise loading only required assets first, depending on the user agent.\n\nOn the flip side, this technique works anywhere SVG does including in IE and offers the opportunity for customisation beyond just supplying a different source image. For example you could apply different filters for particular image sizes or anything else you can do with CSS and SVG.\n\nDepending on the situation, this technique will not necessarily result in a larger download. So be clever and creative; use this technique where it makes sense.\n\n## Adaptive images\n\nWe've learnt that media queries in referenced SVG will be bound to the width of the image or element they are used on. This sounds a lot like [container queries](https://alistapart.com/article/container-queries-once-more-unto-the-breach), one of the most requested browser features over the last few years, and in many ways (although not all), it works now in SVG.\n\nI've seen very few examples that take advantage of this, the icon library [iconic](https://useiconic.com/) is one that comes to mind. But I don't think I've seen anyone use it to its full potential yet.\n\nHow about something that's not an icon? Let's update my ornate border example to resize and even remove the corner flourishes, in response to the available width.\n\n<div class=\"js-resizable\">\n  <img class=\"js-resizable-image\" src=\"/demos/svg/adaptive-border.svg\" >\n</div>\n\nThere is no way that I know of to achieve this with just CSS and HTML. Why aren't we doing much more of this on the web?!\n\n## Container queries?\n\nHow far can we push this? Pretty far is the answer! But as always, with some caveats and limitations.\n\nLet's try and reproduce another influential example. Remember Mat Marquis' article [Container Queries: Once More Unto the Breach](https://alistapart.com/article/container-queries-once-more-unto-the-breach)? Do you think we can do that with SVG?\n\n<div class=\"js-resizable\" style=\"min-width: 450px !important;\">\n  <img class=\"js-resizable-image\" src=\"/demos/svg/cq-main.svg\">\n</div>\n\n**Note**: Sorry this demo is a little buggy in Firefox &amp; IE.\n\n### Caveats and limitations\n\nNow that you are hopefully excited, I'm sorry to say this example is intended to demonstrate some limitations. It is obviously not the type of content you would normally use an image for, and this technique does not change that. It is definitely not accessible. On top of that, I've detailed some further technical limitations below.\n\n#### Setting X & Y attributes with CSS\n\nFor the most part setting and changing X and Y attributes of SVG elements with CSS will not work. Although this will be fully possible in SVG 2.0, for now there is an exception to this rule in Chrome with regard  to `<image>` elements. It is sometimes possible to use CSS transforms to manipulate positioning, but you will find this has limitations as well.\n\n#### External sources in embedded SVG\n\nAs I mentioned in the earlier example of responsive art directed images, external SVG files loaded as an `img` source, will not load additional link references in the SVG source. Other limitations require that I use images, so I've used base64 encoded dataURIs.\n\nIn this case I'm encoding additional SVG files as the image source. Each has their own CSS and the ability to be responsive based on their own width. This can get complicated quickly, but it can also be a powerful technique.\n\n#### Changing the height\n\nThe final limitation and the one I could not get around is that setting or changing the height of an SVG with CSS doesn't work! Even if it did, the image in the HTML sets its height based on the SVG attribute value only. I doubt the image would resize when an internal media query changes the height of the resource. It's like the SVG would have to reach up into the parent context and notify it of a change in height. This is the same for other methods of embedding external SVG.\n\nThere's still plenty you can do, given these limitations.\n\n## Time of discovery\n\nEvery new technology has limitations, and the web has many. Because of this, I think we often give ourselves perceived limitations, based on our past experience. In this case it's easy to approach SVG with the same mindset as HTML and CSS, because \"I know how images work on the web\".\n\nWhen we do this it's easy to miss opportunities to explore new and creative techniques. The examples I've demonstrated, probably only scratch the surface of unique possibilities with SVG. I hope I've got you thinking and I would love to see more examples.\n\nOne final though, it's important to be wary of perceived limitations, not just with SVG. This is especially true at the moment with a wealth of new layout features landing in browsers soon. It will require new perspectives to take advantage of new opportunities. Practice this now, there's never been a better time in the history of the web for creativity and discovery.\n",
      "internal": {
        "type": "contentfulWritingBodyTextNode",
        "mediaType": "text/markdown",
        "content": "I think many of us are not using SVG to its full potential. I often see SVG used as an alternative image format or as a simple solution for icons, and whilst it's great for these things, it's also a lot more than that. SVG can solve problems that HTML and CSS alone can't. It has responsive properties that go beyond vector scaling, such as control over aspect ratio, embedded CSS and a unique co-ordinate system. I rarely see all the features of SVG used together to create unique responsive solutions.\n\nPerhaps the full potential of SVG on the web remains untapped because to get the most out of it, you need care a little more about the mark-up. I'm not advocating writing SVG by hand, but the level of control that most graphics applications give us is not adequate for implementing anything more than basic techniques.\n\nHow we overcome this I'm not sure, unlike HTML we need a graphical interface for producing SVG images, but SVG is also a mark-up language, and there are good reasons why we use text editors for HTML. Perhaps SVG will always need both designers and developers to get the most out of it.\n\nWith that in mind, let's take some things you can do with SVG that you might not have seen, and perhaps not even considered possible.\n\n## Complex positioning\n\nSVG has a complex positioning and coordinate system that is entirely different from the box model that you are (hopefully) familiar with. To gain a full understanding of it, I recommend reading Sara Soueidan's excellent articles on [Understanding SVG Coordinate Systems and Transformations](https://sarasoueidan.com/blog/svg-coordinate-systems/) as well as Amelia Bellamy-Royd's, [How to Scale SVG](https://css-tricks.com/scale-svg/). I couldn't match the detail provided in these articles, so I choose not to try.\n\nIf you think of SVG like any other image format, to be responsive, it should stretch and scale to fill the available space. You should not be surprised to learn that \"Scalable Vector Graphics\" are great at this. Amelia's article demonstrated that, depending on the `viewBox` and `preserveAspectRatio` attributes, we can exercise more precise control over how SVG images scale.\n\nTake a look at this example of an ornate border and try to imaging how you might do this with only CSS and HTML.\n\n\n<div class=\"js-resizable\">\n  <img class=\"js-resizable-image\" src=\"/demos/svg/simple-border.svg\">\n</div>\n\n\nDig into the SVG source and you will see we're taking advantage of symbols, masks, transformations and other goodness that HTML and CSS have only ever dreamt of. It works great, but it is by no means the extent of the responsive capabilities of SVG.\n\nOne interesting and little known fact about SVG is that the `viewBox` is an optional attribute. Did you also know that you can nest SVG elements and establish a new coordinate system on nested SVG and symbol elements, by applying a new `viewBox`?\n\nWith that in mind, imaging for a minute that this is not an image on the web. How might a traditional artist adapt this design for a different sized page? They would probably not just uniformly scale the design. More likely, the corner flourishes and diamond would remain roughly same size and the length of the line connecting them would be reduced.\n\n<div class=\"js-resizable\">\n  <img class=\"js-resizable-image\" src=\"/demos/svg/complex-border.svg\">\n</div>\n\nWe can do this with SVG! Compare this to the prior example, the difference is particularly notable on smaller screens.\n\nThis type of responsive design is particularly suited to SVG and with a little understanding of the SVG coordinates system you can break out of the limitations of the box model.\n\n## Art directed responsive images with SVG\n\nAlthough the [picture element](http://caniuse.com/#feat=picture) and [srcset](http://caniuse.com/#feat=srcset) are now widely supported (with the exception of Internet Explorer), did you know you can create responsive art-directed images using SVG?\n\n<div class=\"js-resizable\">\n  <img class=\"js-resizable-image\" src=\"/demos/svg/ad-main.svg\" >\n</div>\n\nResize your window to see how it works.\n\nYou may recognise the image from an [influential blog post](http://cloudinary.com/blog/automatically_art_directed_responsive_images) and [example by Eric Portis](https://ericportis.com/etc/cloudinary/). Although it looks the same, this example is achieved using only SVG and CSS.\n\nTo achieve this technique I'm loading an SVG as the `src` attribute for an image. The SVG itself has an image element and embedded CSS that resizes and reframes the image using media queries.\n\nThe image element inside the SVG, has a base64 encoded dataURI. I'm using a dataURI because when loading external SVG files in an image element, such as via `<image src=\"image.svg\" >` they will not load additional linked resources. This is perhaps to prevent recursive references or for network performance reasons. Either way, to get around this limitation I'm using a dataURI.\n\n**Note:** Thanks to Amelia Bellamy-Royds for letting me know that external resources will load in SVG files referenced via an `object` or `iframe` element.\n\nCSS is global, so when embedding SVG in HTML (inline SVG), any CSS in the HTML document can also style SVG elements. Likewise `<style>` tags embedded in the SVG, when used inline, will not be scoped to the SVG element. They will be treated just like any other `<style>` tag found in the HTML body, that is, applied globally.\n\nDevelopers often take advantage of this, using SVG sprites and CSS to change the colour of icons. Some developers complain that they cannot use CSS to style SVG elements that are not used inline.\n\nI agree that this would be handy in some cases, but if you think about it the other way around many people are failing to take advantage of the fact that a referenced SVG (not inline) has its own document context.\n\nTherefore, CSS in referenced SVG files, is scoped. This includes media queries! I can take advantage of that fact to create a responsive image that is aware of its own width and adjusts display accordingly. The size of the page doesn't matter, it's responsiveness is relative to the size of the image itself. This works the same for backgrounds and other methods of referencing external SVG.\n\nOne disadvantage this technique has over `srcset` or the `picture` element is that everything in the SVG will be loaded, there is no opportunity to prioritise loading only required assets first, depending on the user agent.\n\nOn the flip side, this technique works anywhere SVG does including in IE and offers the opportunity for customisation beyond just supplying a different source image. For example you could apply different filters for particular image sizes or anything else you can do with CSS and SVG.\n\nDepending on the situation, this technique will not necessarily result in a larger download. So be clever and creative; use this technique where it makes sense.\n\n## Adaptive images\n\nWe've learnt that media queries in referenced SVG will be bound to the width of the image or element they are used on. This sounds a lot like [container queries](https://alistapart.com/article/container-queries-once-more-unto-the-breach), one of the most requested browser features over the last few years, and in many ways (although not all), it works now in SVG.\n\nI've seen very few examples that take advantage of this, the icon library [iconic](https://useiconic.com/) is one that comes to mind. But I don't think I've seen anyone use it to its full potential yet.\n\nHow about something that's not an icon? Let's update my ornate border example to resize and even remove the corner flourishes, in response to the available width.\n\n<div class=\"js-resizable\">\n  <img class=\"js-resizable-image\" src=\"/demos/svg/adaptive-border.svg\" >\n</div>\n\nThere is no way that I know of to achieve this with just CSS and HTML. Why aren't we doing much more of this on the web?!\n\n## Container queries?\n\nHow far can we push this? Pretty far is the answer! But as always, with some caveats and limitations.\n\nLet's try and reproduce another influential example. Remember Mat Marquis' article [Container Queries: Once More Unto the Breach](https://alistapart.com/article/container-queries-once-more-unto-the-breach)? Do you think we can do that with SVG?\n\n<div class=\"js-resizable\" style=\"min-width: 450px !important;\">\n  <img class=\"js-resizable-image\" src=\"/demos/svg/cq-main.svg\">\n</div>\n\n**Note**: Sorry this demo is a little buggy in Firefox &amp; IE.\n\n### Caveats and limitations\n\nNow that you are hopefully excited, I'm sorry to say this example is intended to demonstrate some limitations. It is obviously not the type of content you would normally use an image for, and this technique does not change that. It is definitely not accessible. On top of that, I've detailed some further technical limitations below.\n\n#### Setting X & Y attributes with CSS\n\nFor the most part setting and changing X and Y attributes of SVG elements with CSS will not work. Although this will be fully possible in SVG 2.0, for now there is an exception to this rule in Chrome with regard  to `<image>` elements. It is sometimes possible to use CSS transforms to manipulate positioning, but you will find this has limitations as well.\n\n#### External sources in embedded SVG\n\nAs I mentioned in the earlier example of responsive art directed images, external SVG files loaded as an `img` source, will not load additional link references in the SVG source. Other limitations require that I use images, so I've used base64 encoded dataURIs.\n\nIn this case I'm encoding additional SVG files as the image source. Each has their own CSS and the ability to be responsive based on their own width. This can get complicated quickly, but it can also be a powerful technique.\n\n#### Changing the height\n\nThe final limitation and the one I could not get around is that setting or changing the height of an SVG with CSS doesn't work! Even if it did, the image in the HTML sets its height based on the SVG attribute value only. I doubt the image would resize when an internal media query changes the height of the resource. It's like the SVG would have to reach up into the parent context and notify it of a change in height. This is the same for other methods of embedding external SVG.\n\nThere's still plenty you can do, given these limitations.\n\n## Time of discovery\n\nEvery new technology has limitations, and the web has many. Because of this, I think we often give ourselves perceived limitations, based on our past experience. In this case it's easy to approach SVG with the same mindset as HTML and CSS, because \"I know how images work on the web\".\n\nWhen we do this it's easy to miss opportunities to explore new and creative techniques. The examples I've demonstrated, probably only scratch the surface of unique possibilities with SVG. I hope I've got you thinking and I would love to see more examples.\n\nOne final though, it's important to be wary of perceived limitations, not just with SVG. This is especially true at the moment with a wealth of new layout features landing in browsers soon. It will require new perspectives to take advantage of new opportunities. Practice this now, there's never been a better time in the history of the web for creativity and discovery.\n",
        "contentDigest": "ee956bcad91424b49867423f4be3a62e",
        "owner": "gatsby-source-contentful"
      }
    },
    "08c74e4a-4ddb-5ff1-a4a9-3e038bde1a0f": {
      "id": "08c74e4a-4ddb-5ff1-a4a9-3e038bde1a0f",
      "parent": "565dc228-2761-5a54-b40c-30a184e2aae6",
      "children": [
        "a24bbccc-aea3-5b6a-8abe-684134d709f1"
      ],
      "description": "New design, content and some new CSS tricks on my website.",
      "internal": {
        "type": "contentfulWritingDescriptionTextNode",
        "mediaType": "text/markdown",
        "content": "New design, content and some new CSS tricks on my website.",
        "contentDigest": "5316ebb35bcfb24acc8a1e675b420d51",
        "owner": "gatsby-source-contentful"
      }
    },
    "7e6d88cf-aae1-584d-9159-208ff5a8e1b9": {
      "id": "7e6d88cf-aae1-584d-9159-208ff5a8e1b9",
      "parent": "565dc228-2761-5a54-b40c-30a184e2aae6",
      "children": [
        "a90a4e74-2696-551b-883f-de669a903acd"
      ],
      "body": "Like many people, I decided to redesign my website for 2018. In addition to updating the visual design, I changed the way I publish content. I want to share more than just long-form blog post, so expect to see CodePen collections, short lists, videos and links to content I've published elsewhere. \n\nOne of the things I am really excited about is the chance to share content and resources created by friends in the community. That's why I created the \"Not Ads\" section I want to post new stuff here every couple of weeks so if you have something you want me to share [email me](mailto:mike@madebymike.com.au), but remember they are \"not ads\". \n\nI've also made some technical updates. The site is now making extensive use of CSS Grid and Custom Properties and I want to share a few tricks I've learnt during the development process.\n\n## Tricks with CSS Grid\n\nI've used a number of a number of different grids on the site, but by far the most complicated is the list of cards on the homepage. Although it looks relatively simple, it's actually quite a complicated layout problem. \n\nI wanted to auto-fill a region of the grid while having a full height item in the left-hand column that spans all the rows.\n\n<img data-src=\"/img/grid-trick.png\" alt=\"A CSS grid trick\">\n\nMy first idea was to make a narrow container for the left column and a wide container for the right columns placing different grids in each of these containers. This could have worked, except my cards have variable widths and the number of columns on the right-hand side is variable depending on the space available. This means the number of rows is also variable.\n\nI also wanted all columns to have the same width and I quickly realised to achieve this with variable widths, the left column had to be part of the same grid.\n\nLet's look at the requirements for the grid: There can be any number of cards in the grid, the cards can be different sizes and might span multiple columns or rows. Columns also have a minimum width and the number of columns varies depending on the space available. \n\nTo create a responsive grid like this, we can use the `grid-template-columns` along with the `repeat()`, `minmax()` and the `auto-fit` keyword. It might look something like this:\n\n```css\n.card-grid {\n  grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));\n  grid-gap: 10px;\n}\n.card-wide {\n  grid-column: span 2;\n}\n.card-tall {\n  grid-row: span 2;\n}\n.card-large {\n  grid-row: span 2;\n  grid-column: span 2;\n}\n```\n\nThe first item in the grid is now the left column. This special item is both a grid-item and a grid-container. It has a grid with a single column that can contain other grid items. The mark-up looks something like this:\n\n```html\n<div class=\"grid\">\n   <div class=\"grid-item special-item\">\n    <div class=\"grid-item other-item\"></div>\n    <div class=\"grid-item other-item\"></div>\n   </div>\n   <div class=\"grid-item\"></div>\n   <div class=\"grid-item\"></div>\n   <div class=\"grid-item\"></div>\n</div>\n```\n\nBy default the left column with take up a single grid cell in the grid. Just like any other item, it spans a single row and other items in the gird can be placed beside and beneath this item.\n\nWith the tall and large cards we created earlier, we already know how to make grid items span multiple columns and rows. We could make the left column span the full height using: `grid-row: span 5;`, but this grid is responsive. When the number of columns is reduced, the number of rows increases. \n\nThis is when I thought what if I make the item span 999 rows? This meant 999 rows were added to the grid. Rows without content have a height of 0, but the `grid-gap` meant I had 9,990 pixels of whitespace beneath the grid. I like a little whitespace but not that much.\n\nLuckily margins collapse so I swapped the `grid-gap` for margins on individual grid-items. I did the old trick of adding a negative left and right margin on the grid container, equal to the margin on the grid-items. This means everything in the grid will align with other content on the page. The final result is something like this:\n\n```css\n.card-grid {\n  grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));\n}\n.card {\n  margin: 10px;\n}\n.left-col {\n  display: grid;\n  grid-row-start: 1;\n  grid-row-end: 999;\n  order: 0;\n  align-items: start;\n}\n```\n\nI added a few media queries and adjusted the `grid-template-columns` slightly for different layout on smaller screens. I added `order: 0;` to the left column because this meant I could change the DOM order and move it underneath the main content on mobile. This also makes sense for screen-readers as it's secondary content.\n\nI've isolated a simple demo in a CodePen so you can experiment with or copy this technique. \n\n<p data-height=\"495\" data-theme-id=\"light\" data-slug-hash=\"ppwPBo\" data-default-tab=\"html,result\" data-user=\"MadeByMike\" data-embed-version=\"2\" data-pen-title=\"A CSS grid trick\" class=\"codepen\">See the Pen <a href=\"https://codepen.io/MadeByMike/pen/ppwPBo/\">A CSS grid trick</a> by Mike (<a href=\"https://codepen.io/MadeByMike\">@MadeByMike</a>) on <a href=\"https://codepen.io\">CodePen</a>.</p>\n<script async src=\"https://production-assets.codepen.io/assets/embed/ei.js\"></script> \n\nIn the end, I was very happy with this result. It's definitely a bit of a hack but it's a nice one.\n\n## Visited link checklists\n\nYou might have noticed that some of the lists I've published have checkboxes next to them. They are not interactive but if you visit one of the pages on the list you will see the item become checked.\n\n<img data-src=\"/img/check-list.png\">\n\nThis is a nifty little design feature that I am very happy with. It's just an elaborate visited `:visited` style, but the technique is far from simple. \n\nMy idea was to create a checkbox style with CSS, then toggle the opacity of the tick depending on the :visited state. But visited styles are extremely restrictive. MDN does a great job of [explaining these restrictions](https://developer.mozilla.org/en-US/docs/Web/CSS/%3Avisited). In short, you can only style color values, but this includes SVG `fill` and `stroke`.\n\nMy idea became to use an inline SVG. Did you know that you can set a `fill` property on an HTML element and that an inline SVG can inherit this color?\n\n```css\na {\n  fill: rgba(0,0,0,0);\n}\n\na:visited {\n  fill: rgba(0,0,0,1);\n}\n```\n\n```html\n<li>\n  <a href=\"...\">\n    <svg>\n      <use xlink:href=\"#icon-tick\"></use>\n    </svg>\n    Check Link</a>\n</li>\n```\n\nI knew I couldn't change the display or the opacity so my plan was to change the fill on the tick mark from `rgba(0,0,0,0)` to `rgba(0,0,0,1)`. This should work because I am only changing the color right? I was wrong! CSS was not going take any of my nonsense.\n\nAnother interesting restriction on styling `:visited` links is that the color and fill will retain the original alpha value. If you are interested in the reason behind these restrictions [read the MDN explaination](https://developer.mozilla.org/en-US/docs/Web/CSS/Privacy_and_the_:visited_selector).\n\nOk, plan C. What if I make the fill of the tick, match the background color? The only problem with this approach was that the tick would be visible over the top of the box resulting in this: <img alt=\"check-mark with broken border\" data-src=\"/img/check.png\">\n\nThat's far from the end of the world, but the broken borders on the box were going to annoy me and the solution was simple. When visible the tick is almost the same color as the border, so I can place the box over the top of the tick symbol. Even though the border will be drawn on the top, it won't be visible.\n\nThe final result looks something like this:\n\n<p data-height=\"279\" data-theme-id=\"light\" data-slug-hash=\"XVEoOX\" data-default-tab=\"html,result\" data-user=\"MadeByMike\" data-embed-version=\"2\" data-pen-title=\"CSS :visited checklist\" class=\"codepen\">See the Pen <a href=\"https://codepen.io/MadeByMike/pen/XVEoOX/\">CSS :visited checklist</a> by Mike (<a href=\"https://codepen.io/MadeByMike\">@MadeByMike</a>) on <a href=\"https://codepen.io\">CodePen</a>.</p>\n<script async src=\"https://production-assets.codepen.io/assets/embed/ei.js\"></script>\n\nIt takes a little effort to get nice visited styles but I think it can be a helpful little bit of UX.",
      "internal": {
        "type": "contentfulWritingBodyTextNode",
        "mediaType": "text/markdown",
        "content": "Like many people, I decided to redesign my website for 2018. In addition to updating the visual design, I changed the way I publish content. I want to share more than just long-form blog post, so expect to see CodePen collections, short lists, videos and links to content I've published elsewhere. \n\nOne of the things I am really excited about is the chance to share content and resources created by friends in the community. That's why I created the \"Not Ads\" section I want to post new stuff here every couple of weeks so if you have something you want me to share [email me](mailto:mike@madebymike.com.au), but remember they are \"not ads\". \n\nI've also made some technical updates. The site is now making extensive use of CSS Grid and Custom Properties and I want to share a few tricks I've learnt during the development process.\n\n## Tricks with CSS Grid\n\nI've used a number of a number of different grids on the site, but by far the most complicated is the list of cards on the homepage. Although it looks relatively simple, it's actually quite a complicated layout problem. \n\nI wanted to auto-fill a region of the grid while having a full height item in the left-hand column that spans all the rows.\n\n<img data-src=\"/img/grid-trick.png\" alt=\"A CSS grid trick\">\n\nMy first idea was to make a narrow container for the left column and a wide container for the right columns placing different grids in each of these containers. This could have worked, except my cards have variable widths and the number of columns on the right-hand side is variable depending on the space available. This means the number of rows is also variable.\n\nI also wanted all columns to have the same width and I quickly realised to achieve this with variable widths, the left column had to be part of the same grid.\n\nLet's look at the requirements for the grid: There can be any number of cards in the grid, the cards can be different sizes and might span multiple columns or rows. Columns also have a minimum width and the number of columns varies depending on the space available. \n\nTo create a responsive grid like this, we can use the `grid-template-columns` along with the `repeat()`, `minmax()` and the `auto-fit` keyword. It might look something like this:\n\n```css\n.card-grid {\n  grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));\n  grid-gap: 10px;\n}\n.card-wide {\n  grid-column: span 2;\n}\n.card-tall {\n  grid-row: span 2;\n}\n.card-large {\n  grid-row: span 2;\n  grid-column: span 2;\n}\n```\n\nThe first item in the grid is now the left column. This special item is both a grid-item and a grid-container. It has a grid with a single column that can contain other grid items. The mark-up looks something like this:\n\n```html\n<div class=\"grid\">\n   <div class=\"grid-item special-item\">\n    <div class=\"grid-item other-item\"></div>\n    <div class=\"grid-item other-item\"></div>\n   </div>\n   <div class=\"grid-item\"></div>\n   <div class=\"grid-item\"></div>\n   <div class=\"grid-item\"></div>\n</div>\n```\n\nBy default the left column with take up a single grid cell in the grid. Just like any other item, it spans a single row and other items in the gird can be placed beside and beneath this item.\n\nWith the tall and large cards we created earlier, we already know how to make grid items span multiple columns and rows. We could make the left column span the full height using: `grid-row: span 5;`, but this grid is responsive. When the number of columns is reduced, the number of rows increases. \n\nThis is when I thought what if I make the item span 999 rows? This meant 999 rows were added to the grid. Rows without content have a height of 0, but the `grid-gap` meant I had 9,990 pixels of whitespace beneath the grid. I like a little whitespace but not that much.\n\nLuckily margins collapse so I swapped the `grid-gap` for margins on individual grid-items. I did the old trick of adding a negative left and right margin on the grid container, equal to the margin on the grid-items. This means everything in the grid will align with other content on the page. The final result is something like this:\n\n```css\n.card-grid {\n  grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));\n}\n.card {\n  margin: 10px;\n}\n.left-col {\n  display: grid;\n  grid-row-start: 1;\n  grid-row-end: 999;\n  order: 0;\n  align-items: start;\n}\n```\n\nI added a few media queries and adjusted the `grid-template-columns` slightly for different layout on smaller screens. I added `order: 0;` to the left column because this meant I could change the DOM order and move it underneath the main content on mobile. This also makes sense for screen-readers as it's secondary content.\n\nI've isolated a simple demo in a CodePen so you can experiment with or copy this technique. \n\n<p data-height=\"495\" data-theme-id=\"light\" data-slug-hash=\"ppwPBo\" data-default-tab=\"html,result\" data-user=\"MadeByMike\" data-embed-version=\"2\" data-pen-title=\"A CSS grid trick\" class=\"codepen\">See the Pen <a href=\"https://codepen.io/MadeByMike/pen/ppwPBo/\">A CSS grid trick</a> by Mike (<a href=\"https://codepen.io/MadeByMike\">@MadeByMike</a>) on <a href=\"https://codepen.io\">CodePen</a>.</p>\n<script async src=\"https://production-assets.codepen.io/assets/embed/ei.js\"></script> \n\nIn the end, I was very happy with this result. It's definitely a bit of a hack but it's a nice one.\n\n## Visited link checklists\n\nYou might have noticed that some of the lists I've published have checkboxes next to them. They are not interactive but if you visit one of the pages on the list you will see the item become checked.\n\n<img data-src=\"/img/check-list.png\">\n\nThis is a nifty little design feature that I am very happy with. It's just an elaborate visited `:visited` style, but the technique is far from simple. \n\nMy idea was to create a checkbox style with CSS, then toggle the opacity of the tick depending on the :visited state. But visited styles are extremely restrictive. MDN does a great job of [explaining these restrictions](https://developer.mozilla.org/en-US/docs/Web/CSS/%3Avisited). In short, you can only style color values, but this includes SVG `fill` and `stroke`.\n\nMy idea became to use an inline SVG. Did you know that you can set a `fill` property on an HTML element and that an inline SVG can inherit this color?\n\n```css\na {\n  fill: rgba(0,0,0,0);\n}\n\na:visited {\n  fill: rgba(0,0,0,1);\n}\n```\n\n```html\n<li>\n  <a href=\"...\">\n    <svg>\n      <use xlink:href=\"#icon-tick\"></use>\n    </svg>\n    Check Link</a>\n</li>\n```\n\nI knew I couldn't change the display or the opacity so my plan was to change the fill on the tick mark from `rgba(0,0,0,0)` to `rgba(0,0,0,1)`. This should work because I am only changing the color right? I was wrong! CSS was not going take any of my nonsense.\n\nAnother interesting restriction on styling `:visited` links is that the color and fill will retain the original alpha value. If you are interested in the reason behind these restrictions [read the MDN explaination](https://developer.mozilla.org/en-US/docs/Web/CSS/Privacy_and_the_:visited_selector).\n\nOk, plan C. What if I make the fill of the tick, match the background color? The only problem with this approach was that the tick would be visible over the top of the box resulting in this: <img alt=\"check-mark with broken border\" data-src=\"/img/check.png\">\n\nThat's far from the end of the world, but the broken borders on the box were going to annoy me and the solution was simple. When visible the tick is almost the same color as the border, so I can place the box over the top of the tick symbol. Even though the border will be drawn on the top, it won't be visible.\n\nThe final result looks something like this:\n\n<p data-height=\"279\" data-theme-id=\"light\" data-slug-hash=\"XVEoOX\" data-default-tab=\"html,result\" data-user=\"MadeByMike\" data-embed-version=\"2\" data-pen-title=\"CSS :visited checklist\" class=\"codepen\">See the Pen <a href=\"https://codepen.io/MadeByMike/pen/XVEoOX/\">CSS :visited checklist</a> by Mike (<a href=\"https://codepen.io/MadeByMike\">@MadeByMike</a>) on <a href=\"https://codepen.io\">CodePen</a>.</p>\n<script async src=\"https://production-assets.codepen.io/assets/embed/ei.js\"></script>\n\nIt takes a little effort to get nice visited styles but I think it can be a helpful little bit of UX.",
        "contentDigest": "f4deacddc29e44b1a2c802203ee4d082",
        "owner": "gatsby-source-contentful"
      }
    },
    "bc9bf393-6e61-5355-a730-0b2e0916ea12": {
      "id": "bc9bf393-6e61-5355-a730-0b2e0916ea12",
      "parent": "33f212d1-aa8d-5ea4-9d34-75c498f4632e",
      "children": [
        "bfe81f4d-ec12-55fe-981c-b8606f1d245e"
      ],
      "description": "Custom Properties have the potential to change how we write and think about CSS.",
      "internal": {
        "type": "contentfulWritingDescriptionTextNode",
        "mediaType": "text/markdown",
        "content": "Custom Properties have the potential to change how we write and think about CSS.",
        "contentDigest": "188ffa2ee04fe3b4772f203d4b952076",
        "owner": "gatsby-source-contentful"
      }
    },
    "62b3e0c8-638d-5b7c-adaf-0a3adbfab453": {
      "id": "62b3e0c8-638d-5b7c-adaf-0a3adbfab453",
      "parent": "33f212d1-aa8d-5ea4-9d34-75c498f4632e",
      "children": [
        "e58a4175-933b-5247-9c96-09ee2cf67200"
      ],
      "body": "CSS Variables (also known as Custom Properties) are now supported in all modern browsers and people are starting to use them in production. This is great but they're different from variables in preprocessors and I've already seen some examples of people using them without considering the advantage they offer.\n\nThey have the potential to change how we write and think about CSS. I thought I'd do a few quick demos that show some good and bad ways to use CSS variables, and how their differences from preprocessors might change how we structure CSS.\n\n## How do they differ?\n\nFirstly how do they differ? The main difference is CSS variables can change. This might not sound surprising, variables typically do change. You might not have thought about it, but variables in preprocessors like Sass are static. Sure, you can update the value of a variable at different points in the compilation process, but when it's rendered to CSS the values are always static.\n\nThis makes variables in preprocessors a great tool for writing DRY (Don't Repeat Yourself) code and manageable CSS. CSS variables on the other hand, can respond to context within the page.\n\nWe can refer to variables as statically or dynamically scoped and CSS variables as dynamically scoped.\n\nIn this instance, dynamically scoped means they are subject to inheritance and the cascade. This is great because you can change the value of a CSS variable inside a media query or when an element matches a CSS selector. Using the same variable we can have different values in different places on the page. You can even read and manipulate CSS variables with JavaScript.\n\nIf you haven't thought of a ton of uses for CSS Variables already you will have by the end of this article. But first let me demonstrate how not to use CSS variables.\n\n## Modular Scale with CSS variables\n\nI'm going to use modular scales as an example. A modular scale is a mathematical scale that can be used as a basis for choosing heading sizes. I like to do this, and I like to choose different scales for small and large screens.\n\nI'm going to use a scale 1.2 for smalls screens and 1.33 for large screens. I don't like maths so I got these values from [modularscale.com](http://www.modularscale.com/) and these are my heading sizes:\n\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">1.2</th>\n<th style=\"text-align:center\">1.33</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">2.488rem</td>\n<td style=\"text-align:center\">4.209rem</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">2.074rem</td>\n<td style=\"text-align:center\">3.157rem</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">1.728rem</td>\n<td style=\"text-align:center\">2.369rem</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">1.44rem</td>\n<td style=\"text-align:center\">1.777rem</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">1.2rem</td>\n<td style=\"text-align:center\">1.333rem</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">1rem</td>\n<td style=\"text-align:center\">1rem</td>\n</tr>\n</tbody>\n</table>\n\n## Not like this...\n\nThis is a perfect situation to use CSS variables. The way I would have approached this with Sass, and how I've seen most people use CSS variables so far, is something like this:\n\n```css\n:root {\n  /* scale for 1.2 */\n  --ms-small-1: 1rem;\n  --ms-small-2: 1.2rem;\n  --ms-small-3: 1.44rem;\n  --ms-small-4: 1.728rem;\n  --ms-small-5: 2.074rem;\n  --ms-small-6: 2.488rem;\n\n  /* scale for 1.33 */\n  --ms-large-1: 1rem;\n  --ms-large-2: 1.333rem;\n  --ms-large-3: 1.777rem;\n  --ms-large-4: 2.369rem;\n  --ms-large-5: 3.157rem;\n  --ms-large-6: 4.209rem;\n}\n```\n\nThis seems fairly logical, We've defined variables for each of the values in each of the different scales. Next I'd expect to see this:\n\n```css\n/* Small scale for small screens: */\nh1 {\n  font-size: var(--ms-small-6);\n}\nh2 {\n  font-size: var(--ms-small-5);\n}\nh3 {\n  font-size: var(--ms-small-4);\n}\nh4 {\n  font-size: var(--ms-small-3);\n}\nh5 {\n  font-size: var(--ms-small-2);\n}\nh6 {\n  font-size: var(--ms-small-1);\n}\n\n/* And large scale for larger screens */\n@media screen and (min-width: 800px) {\n  h1 {\n    font-size: var(--ms-large-6);\n  }\n  h2 {\n    font-size: var(--ms-large-5);\n  }\n  h3 {\n    font-size: var(--ms-large-4);\n  }\n  h4 {\n    font-size: var(--ms-large-3);\n  }\n  h5 {\n    font-size: var(--ms-large-2);\n  }\n  h6 {\n    font-size: var(--ms-large-1);\n  }\n}\n```\n\n<a target=\"_blank\" href=\"https://codepen.io/MadeByMike/pen/dRoLpJ\">This works!</a> More than that, if I want to change any of these values I can do it in one place. That's an even bigger advantage if I'm using variables elsewhere in my CSS.\n\nThis is DRY like Sass and I guess that's better than regular CSS. But we can do better.\n\n## More like this...\n\nThe example above might seem like the most logical way to do things but it's not taking advantage of how CSS variables work. Let's try again, remembering that CSS variables are scoped to the DOM therefore subject to inheritance and the cascade.\n\n```css\n:root {\n  /* scale for 1.2 */\n  --font-size-1: 1rem;\n  --font-size-2: 1.2rem;\n  --font-size-3: 1.44rem;\n  --font-size-4: 1.728rem;\n  --font-size-5: 2.074rem;\n  --font-size-6: 2.488rem;\n}\n\n@media screen and (min-width: 800px) {\n  :root {\n    /* scale for 1.33 */\n    --font-size-1: 1rem;\n    --font-size-2: 1.333rem;\n    --font-size-3: 1.777rem;\n    --font-size-4: 2.369rem;\n    --font-size-5: 3.157rem;\n    --font-size-6: 4.209rem;\n  }\n}\n```\n\nNotice that I have only one set of variables now and not one for each scale. I change the value of the variable depending on the screen size. This indirectly results in two things:\n\n1. I'm forced to name the variables differently (not small or large anymore)\n\n1. There is no need for media queries elsewhere in my CSS\n\nI can now use variables directly in my property declarations knowing they will change as required. All the responsive logic is in the variable. The rest of my CSS looks like this:\n\n```css\nh1 {\n  font-size: var(--font-size-6);\n}\nh2 {\n  font-size: var(--font-size-5);\n}\nh3 {\n  font-size: var(--font-size-4);\n}\nh4 {\n  font-size: var(--font-size-3);\n}\nh5 {\n  font-size: var(--font-size-2);\n}\nh6 {\n  font-size: var(--font-size-1);\n}\n```\n\nThe example above demonstrates a better way of writing CSS with variables. Now let's see if we can define some of these techniques in more detail.\n\n## Techniques for organising code with CSS variables\n\nVariables have the potential to change how we organise and structure CSS, especially in relation to responsive design.\n\n### Separate logic from design\n\nThe main advantage is we now have the ability to fully separate logic from design. Effectively this means separating variable declarations from property declarations.\n\n```css\n/* This is a variable declaration */\n.thing {\n  --my-var: red;\n}\n/* This is a property declaration */\n.thing {\n  background: var(--my-var);\n}\n```\n\nMy view is you should probably keep variable declarations and property declaration separate. Separating variables from the rest of the declarations is considered good practice when working with preprocessors. This shouldn't change when working with CSS variables.\n\n### Change the value not the variable\n\nIn most cases, **I'd now consider it code smell if a media query or CSS selector swaps one variable for another**. Rather than swapping variables it's better to define one variable, set its initial value and change it with a selector or media query.\n\n### If it changes it's a variable\n\n**I'm convinced that in almost all cases, responsive design logic should now be contained in variables**. There is a strong argument too, that when changing any value, whether in a media query or an element scope, it belongs in a variable. If it changes, it is by definition a variable and this logic should be separated from design.\n\n### Fewer media queries\n\nIt makes sense for all the logic related to variables to be at the top of the document. It's easier to maintain because you can change it in one place and it's easier to read because you can see what is changing without reading the entire stylesheet.\n\nWe couldn't do this with media queries because it fragmented the rules for styling an element across different parts the stylesheet. This was not practical or maintainable, so it made sense group media queries with declarations relating to the sames selectors they changed.\n\nVariables now provide a link between the logic and the implementation of design. **This means in most cases media queries should not be required except for changing CSS variables** and they belong at the top of the document with variable declarations. Above the 'logic fold'.\n\n### Simplify selectors\n\nEffectively separating logic from design also keeps the complexity out of the main property declarations to the point that you can combine selectors.\n\nIn this example I have an aside and a main element with different font-sizes. The aside has a dark background and the main element has a light background.\n\n```css\n/* Default values */\n:root {\n  --font-size: 1.2rem;\n  --background-color: #fff;\n  --text-color: #222;\n}\n/* Values in aside */\naside {\n  --font-size: 1rem;\n  --background-color: #222;\n  --text-color: #fafafa;\n}\n\n/* Same property declarations */\nmain,\naside {\n  font-size: var(--font-size);\n  color: var(--text-color);\n  background-color: var(--background-color);\n}\n```\n\nTry it out: \n\n<p data-height=\"360\" data-theme-id=\"light\" data-slug-hash=\"YQNVox\" data-default-tab=\"css,result\" data-user=\"MadeByMike\" data-embed-version=\"2\" data-pen-title=\"Organising code with CSS Variables\" data-editable=\"true\" class=\"codepen\" data-preview=\"true\">See the Pen <a href=\"https://codepen.io/MadeByMike/pen/YQNVox/\">Organising code with CSS Variables</a> by Mike (<a href=\"https://codepen.io/MadeByMike\">@MadeByMike</a>) on <a href=\"https://codepen.io\">CodePen</a>.</p>\n<script async src=\"https://production-assets.codepen.io/assets/embed/ei.js\"></script>\n\nDespite having a completely different appearance these two elements have exactly the same property declarations.\n\n### Less generic variables\n\nA quick warning about combining selectors with overly generic variables. You might think it's a fun idea to have a universal selector and let variables handle all the logic:\n\n```css\n/* Don't do this. */\n* {\n  display: var(--display);\n  width: var(--width);\n  height: var(--height);\n  border: var(--border);\n  background: var(--background);\n  ...\n}\n```\n\nAlthough fun, we should be careful about reusing variables and combining selectors. CSS variables are subject to the cascade. With the above example, when setting a border on a class `.container` like this:\n\n```css\n.container {\n  --border: solid 2px tomato;\n}\n```\n\nEverything inside that container will inherit the same border. Pretty soon you will be overriding variables on everything, and you don't need a universal `*` selector to fall into this trap.\n\n### Use preprocessors for static variables\n\nDo CSS variables replace preprocessors? No. Using preprocessors still makes sense. It's a good idea to keep all your static variables in Sass (or whatever preprocessor you use).\n\n```scss\n// Static variables:\n$breakpoint-small: 600px;\n$theme-color: rebeccapurple;\n\n// Dynamic variables\n@media screen and (min-width: $breakpoint-small) {\n  body {\n    --background: $theme-color;\n  }\n}\n```\n\nNot only does this denote static variables from dynamic variables in your code, but CSS variables can only be used for property declarations. In other words they can't be used in media queries.\n\nPreprocessor also have color functions, mixins and allows us to keep styles related to different components in different files. All of this stuff still makes sense.\n\n## New approach to responsive design\n\nI think CSS variables offer a completely new approach to responsive design and will challenge some techniques and thinking we've developed over many years. These tips are just a few of the obvious things we need to consider.\n\nI made a <a target=\"_blank\" href=\"https://codepen.io/MadeByMike/pen/dRNqNw/\">detailed example</a> of a simple responsive site that demonstrates some of the techniques and suggestions outlined in this article.\n\n<p data-height=\"510\" data-theme-id=\"light\" data-slug-hash=\"dRNqNw\" data-default-tab=\"css,result\" data-user=\"MadeByMike\" data-embed-version=\"2\" data-pen-title=\"Responsive design with CSS variables\" data-editable=\"true\" class=\"codepen\" data-preview=\"true\">See the Pen <a href=\"https://codepen.io/MadeByMike/pen/dRNqNw/\">Responsive design with CSS variables</a> by Mike (<a href=\"https://codepen.io/MadeByMike\">@MadeByMike</a>) on <a href=\"https://codepen.io\">CodePen</a>.</p>\n<script async src=\"https://production-assets.codepen.io/assets/embed/ei.js\"></script>\n\n<a target=\"_blank\" href=\"https://codepen.io/MadeByMike/pen/dRNqNw/\">Open this demo in CodePen</a> to see how it responds to different viewport sizes.\n\nIf you have any thoughts about how CSS variables might change how we think about, manage and structure CSS please [let me know on Twitter](https://twitter.com/MikeRiethmuller).\n",
      "internal": {
        "type": "contentfulWritingBodyTextNode",
        "mediaType": "text/markdown",
        "content": "CSS Variables (also known as Custom Properties) are now supported in all modern browsers and people are starting to use them in production. This is great but they're different from variables in preprocessors and I've already seen some examples of people using them without considering the advantage they offer.\n\nThey have the potential to change how we write and think about CSS. I thought I'd do a few quick demos that show some good and bad ways to use CSS variables, and how their differences from preprocessors might change how we structure CSS.\n\n## How do they differ?\n\nFirstly how do they differ? The main difference is CSS variables can change. This might not sound surprising, variables typically do change. You might not have thought about it, but variables in preprocessors like Sass are static. Sure, you can update the value of a variable at different points in the compilation process, but when it's rendered to CSS the values are always static.\n\nThis makes variables in preprocessors a great tool for writing DRY (Don't Repeat Yourself) code and manageable CSS. CSS variables on the other hand, can respond to context within the page.\n\nWe can refer to variables as statically or dynamically scoped and CSS variables as dynamically scoped.\n\nIn this instance, dynamically scoped means they are subject to inheritance and the cascade. This is great because you can change the value of a CSS variable inside a media query or when an element matches a CSS selector. Using the same variable we can have different values in different places on the page. You can even read and manipulate CSS variables with JavaScript.\n\nIf you haven't thought of a ton of uses for CSS Variables already you will have by the end of this article. But first let me demonstrate how not to use CSS variables.\n\n## Modular Scale with CSS variables\n\nI'm going to use modular scales as an example. A modular scale is a mathematical scale that can be used as a basis for choosing heading sizes. I like to do this, and I like to choose different scales for small and large screens.\n\nI'm going to use a scale 1.2 for smalls screens and 1.33 for large screens. I don't like maths so I got these values from [modularscale.com](http://www.modularscale.com/) and these are my heading sizes:\n\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">1.2</th>\n<th style=\"text-align:center\">1.33</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">2.488rem</td>\n<td style=\"text-align:center\">4.209rem</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">2.074rem</td>\n<td style=\"text-align:center\">3.157rem</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">1.728rem</td>\n<td style=\"text-align:center\">2.369rem</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">1.44rem</td>\n<td style=\"text-align:center\">1.777rem</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">1.2rem</td>\n<td style=\"text-align:center\">1.333rem</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">1rem</td>\n<td style=\"text-align:center\">1rem</td>\n</tr>\n</tbody>\n</table>\n\n## Not like this...\n\nThis is a perfect situation to use CSS variables. The way I would have approached this with Sass, and how I've seen most people use CSS variables so far, is something like this:\n\n```css\n:root {\n  /* scale for 1.2 */\n  --ms-small-1: 1rem;\n  --ms-small-2: 1.2rem;\n  --ms-small-3: 1.44rem;\n  --ms-small-4: 1.728rem;\n  --ms-small-5: 2.074rem;\n  --ms-small-6: 2.488rem;\n\n  /* scale for 1.33 */\n  --ms-large-1: 1rem;\n  --ms-large-2: 1.333rem;\n  --ms-large-3: 1.777rem;\n  --ms-large-4: 2.369rem;\n  --ms-large-5: 3.157rem;\n  --ms-large-6: 4.209rem;\n}\n```\n\nThis seems fairly logical, We've defined variables for each of the values in each of the different scales. Next I'd expect to see this:\n\n```css\n/* Small scale for small screens: */\nh1 {\n  font-size: var(--ms-small-6);\n}\nh2 {\n  font-size: var(--ms-small-5);\n}\nh3 {\n  font-size: var(--ms-small-4);\n}\nh4 {\n  font-size: var(--ms-small-3);\n}\nh5 {\n  font-size: var(--ms-small-2);\n}\nh6 {\n  font-size: var(--ms-small-1);\n}\n\n/* And large scale for larger screens */\n@media screen and (min-width: 800px) {\n  h1 {\n    font-size: var(--ms-large-6);\n  }\n  h2 {\n    font-size: var(--ms-large-5);\n  }\n  h3 {\n    font-size: var(--ms-large-4);\n  }\n  h4 {\n    font-size: var(--ms-large-3);\n  }\n  h5 {\n    font-size: var(--ms-large-2);\n  }\n  h6 {\n    font-size: var(--ms-large-1);\n  }\n}\n```\n\n<a target=\"_blank\" href=\"https://codepen.io/MadeByMike/pen/dRoLpJ\">This works!</a> More than that, if I want to change any of these values I can do it in one place. That's an even bigger advantage if I'm using variables elsewhere in my CSS.\n\nThis is DRY like Sass and I guess that's better than regular CSS. But we can do better.\n\n## More like this...\n\nThe example above might seem like the most logical way to do things but it's not taking advantage of how CSS variables work. Let's try again, remembering that CSS variables are scoped to the DOM therefore subject to inheritance and the cascade.\n\n```css\n:root {\n  /* scale for 1.2 */\n  --font-size-1: 1rem;\n  --font-size-2: 1.2rem;\n  --font-size-3: 1.44rem;\n  --font-size-4: 1.728rem;\n  --font-size-5: 2.074rem;\n  --font-size-6: 2.488rem;\n}\n\n@media screen and (min-width: 800px) {\n  :root {\n    /* scale for 1.33 */\n    --font-size-1: 1rem;\n    --font-size-2: 1.333rem;\n    --font-size-3: 1.777rem;\n    --font-size-4: 2.369rem;\n    --font-size-5: 3.157rem;\n    --font-size-6: 4.209rem;\n  }\n}\n```\n\nNotice that I have only one set of variables now and not one for each scale. I change the value of the variable depending on the screen size. This indirectly results in two things:\n\n1. I'm forced to name the variables differently (not small or large anymore)\n\n1. There is no need for media queries elsewhere in my CSS\n\nI can now use variables directly in my property declarations knowing they will change as required. All the responsive logic is in the variable. The rest of my CSS looks like this:\n\n```css\nh1 {\n  font-size: var(--font-size-6);\n}\nh2 {\n  font-size: var(--font-size-5);\n}\nh3 {\n  font-size: var(--font-size-4);\n}\nh4 {\n  font-size: var(--font-size-3);\n}\nh5 {\n  font-size: var(--font-size-2);\n}\nh6 {\n  font-size: var(--font-size-1);\n}\n```\n\nThe example above demonstrates a better way of writing CSS with variables. Now let's see if we can define some of these techniques in more detail.\n\n## Techniques for organising code with CSS variables\n\nVariables have the potential to change how we organise and structure CSS, especially in relation to responsive design.\n\n### Separate logic from design\n\nThe main advantage is we now have the ability to fully separate logic from design. Effectively this means separating variable declarations from property declarations.\n\n```css\n/* This is a variable declaration */\n.thing {\n  --my-var: red;\n}\n/* This is a property declaration */\n.thing {\n  background: var(--my-var);\n}\n```\n\nMy view is you should probably keep variable declarations and property declaration separate. Separating variables from the rest of the declarations is considered good practice when working with preprocessors. This shouldn't change when working with CSS variables.\n\n### Change the value not the variable\n\nIn most cases, **I'd now consider it code smell if a media query or CSS selector swaps one variable for another**. Rather than swapping variables it's better to define one variable, set its initial value and change it with a selector or media query.\n\n### If it changes it's a variable\n\n**I'm convinced that in almost all cases, responsive design logic should now be contained in variables**. There is a strong argument too, that when changing any value, whether in a media query or an element scope, it belongs in a variable. If it changes, it is by definition a variable and this logic should be separated from design.\n\n### Fewer media queries\n\nIt makes sense for all the logic related to variables to be at the top of the document. It's easier to maintain because you can change it in one place and it's easier to read because you can see what is changing without reading the entire stylesheet.\n\nWe couldn't do this with media queries because it fragmented the rules for styling an element across different parts the stylesheet. This was not practical or maintainable, so it made sense group media queries with declarations relating to the sames selectors they changed.\n\nVariables now provide a link between the logic and the implementation of design. **This means in most cases media queries should not be required except for changing CSS variables** and they belong at the top of the document with variable declarations. Above the 'logic fold'.\n\n### Simplify selectors\n\nEffectively separating logic from design also keeps the complexity out of the main property declarations to the point that you can combine selectors.\n\nIn this example I have an aside and a main element with different font-sizes. The aside has a dark background and the main element has a light background.\n\n```css\n/* Default values */\n:root {\n  --font-size: 1.2rem;\n  --background-color: #fff;\n  --text-color: #222;\n}\n/* Values in aside */\naside {\n  --font-size: 1rem;\n  --background-color: #222;\n  --text-color: #fafafa;\n}\n\n/* Same property declarations */\nmain,\naside {\n  font-size: var(--font-size);\n  color: var(--text-color);\n  background-color: var(--background-color);\n}\n```\n\nTry it out: \n\n<p data-height=\"360\" data-theme-id=\"light\" data-slug-hash=\"YQNVox\" data-default-tab=\"css,result\" data-user=\"MadeByMike\" data-embed-version=\"2\" data-pen-title=\"Organising code with CSS Variables\" data-editable=\"true\" class=\"codepen\" data-preview=\"true\">See the Pen <a href=\"https://codepen.io/MadeByMike/pen/YQNVox/\">Organising code with CSS Variables</a> by Mike (<a href=\"https://codepen.io/MadeByMike\">@MadeByMike</a>) on <a href=\"https://codepen.io\">CodePen</a>.</p>\n<script async src=\"https://production-assets.codepen.io/assets/embed/ei.js\"></script>\n\nDespite having a completely different appearance these two elements have exactly the same property declarations.\n\n### Less generic variables\n\nA quick warning about combining selectors with overly generic variables. You might think it's a fun idea to have a universal selector and let variables handle all the logic:\n\n```css\n/* Don't do this. */\n* {\n  display: var(--display);\n  width: var(--width);\n  height: var(--height);\n  border: var(--border);\n  background: var(--background);\n  ...\n}\n```\n\nAlthough fun, we should be careful about reusing variables and combining selectors. CSS variables are subject to the cascade. With the above example, when setting a border on a class `.container` like this:\n\n```css\n.container {\n  --border: solid 2px tomato;\n}\n```\n\nEverything inside that container will inherit the same border. Pretty soon you will be overriding variables on everything, and you don't need a universal `*` selector to fall into this trap.\n\n### Use preprocessors for static variables\n\nDo CSS variables replace preprocessors? No. Using preprocessors still makes sense. It's a good idea to keep all your static variables in Sass (or whatever preprocessor you use).\n\n```scss\n// Static variables:\n$breakpoint-small: 600px;\n$theme-color: rebeccapurple;\n\n// Dynamic variables\n@media screen and (min-width: $breakpoint-small) {\n  body {\n    --background: $theme-color;\n  }\n}\n```\n\nNot only does this denote static variables from dynamic variables in your code, but CSS variables can only be used for property declarations. In other words they can't be used in media queries.\n\nPreprocessor also have color functions, mixins and allows us to keep styles related to different components in different files. All of this stuff still makes sense.\n\n## New approach to responsive design\n\nI think CSS variables offer a completely new approach to responsive design and will challenge some techniques and thinking we've developed over many years. These tips are just a few of the obvious things we need to consider.\n\nI made a <a target=\"_blank\" href=\"https://codepen.io/MadeByMike/pen/dRNqNw/\">detailed example</a> of a simple responsive site that demonstrates some of the techniques and suggestions outlined in this article.\n\n<p data-height=\"510\" data-theme-id=\"light\" data-slug-hash=\"dRNqNw\" data-default-tab=\"css,result\" data-user=\"MadeByMike\" data-embed-version=\"2\" data-pen-title=\"Responsive design with CSS variables\" data-editable=\"true\" class=\"codepen\" data-preview=\"true\">See the Pen <a href=\"https://codepen.io/MadeByMike/pen/dRNqNw/\">Responsive design with CSS variables</a> by Mike (<a href=\"https://codepen.io/MadeByMike\">@MadeByMike</a>) on <a href=\"https://codepen.io\">CodePen</a>.</p>\n<script async src=\"https://production-assets.codepen.io/assets/embed/ei.js\"></script>\n\n<a target=\"_blank\" href=\"https://codepen.io/MadeByMike/pen/dRNqNw/\">Open this demo in CodePen</a> to see how it responds to different viewport sizes.\n\nIf you have any thoughts about how CSS variables might change how we think about, manage and structure CSS please [let me know on Twitter](https://twitter.com/MikeRiethmuller).\n",
        "contentDigest": "a37949cf35ac37ba42229c8dfda1d615",
        "owner": "gatsby-source-contentful"
      }
    },
    "282a38a2-4762-570d-93f5-c47b1e332254": {
      "id": "282a38a2-4762-570d-93f5-c47b1e332254",
      "parent": "05b0c536-9190-556e-934a-78762e13d05c",
      "children": [
        "057e26cd-5d7c-5cdf-b999-b57cb83a3905"
      ],
      "description": "Contrast is a critical factor in web design, it’s important to get right because it has a strong influence on the visual aesthetic, but it’s especially important for readability and accessibility of text on the page. It’s not a revolutionary idea to suggest that we use Less or Sass to help choose an appropriate text color for a particular background. There are plenty of examples of this, but what is the best way? ",
      "internal": {
        "type": "contentfulWritingDescriptionTextNode",
        "mediaType": "text/markdown",
        "content": "Contrast is a critical factor in web design, it’s important to get right because it has a strong influence on the visual aesthetic, but it’s especially important for readability and accessibility of text on the page. It’s not a revolutionary idea to suggest that we use Less or Sass to help choose an appropriate text color for a particular background. There are plenty of examples of this, but what is the best way? ",
        "contentDigest": "55ce86e3f8a967c3cdf3f656260584d3",
        "owner": "gatsby-source-contentful"
      }
    },
    "d7f66d94-46ad-5006-b1c3-8d470a427940": {
      "id": "d7f66d94-46ad-5006-b1c3-8d470a427940",
      "parent": "05b0c536-9190-556e-934a-78762e13d05c",
      "children": [
        "091d4edf-e7c9-5d1b-9ba6-0c6d800249d3"
      ],
      "body": "Contrast is a critical factor in web design, it's important to get right because it has a strong influence on the visual aesthetic, but it's especially important for readability and accessibility of text on the page.\n\nIt's not a revolutionary idea to suggest that we use Less or Sass to help choose an appropriate text color for a particular background. There are plenty of examples of this, but what is the best way?\n\nMost examples I've seen work on the general principle that, if a background color is \"brighter\" than 50% give me black text, otherwise give me white text.\n\nBut what does \"brighter\" mean? It depends on the implementation. There are different ways to measure the brightness of a color. Common methods include:\n\n- Lightness - the lightness channel of the HSL color space.\n- Value - the value channel of the HSV color space.\n- Luminance - the perceptual brightness of a color.\n\nRecently I've been experimenting with different implementations of text contrast mixins using Less and Sass. I've created examples for each method and evaluated them on their ability to meet required WCAG2 contrast ratios.\n\nI found none of the simple methods give a guaranteed accessible result, but it is possible using only Less or Sass to create a mixin that will give desired contrast ratios including WCAG2 AA or AAA level.\n\n## HSL based measurement\nUnfortunately it seems **the most common implementation** which is based on lightness, **is the worst visual performer**. In the demo below `#7CFC00` is a particularly good example of where the HSL method fails.\n\n<p data-height=\"266\" data-theme-id=\"6646\" data-slug-hash=\"qjlpF\" data-default-tab=\"result\" class='codepen'>See the Pen <a href='http://codepen.io/MadeByMike/pen/qjlpF/'>Contrast black\\white - lightness (Sass)</a> by Mike (<a href='http://codepen.io/MadeByMike'>@MadeByMike</a>) on <a href='http://codepen.io'>CodePen</a>.</p>\n\n<script async src=\"//codepen.io/assets/embed/ei.js\"></script>\n\nThis example uses Sass, do you prefer Less? [Got you covered](http://codepen.io/MadeByMike/pen/qjlpF)!\n\n## HSV based measurement\nMy feeling is that HSV provides slightly better results than HSL, but it is still far from perfect. In this demo #0000CD and #8B0000 are two good examples of where HSV measurement fails.\n\n<p data-height=\"266\" data-theme-id=\"6646\" data-slug-hash=\"hqvod\" data-default-tab=\"result\" class='codepen'>See the Pen <a href='http://codepen.io/MadeByMike/pen/hqvod/'>Contrast black\\white - value (Less)</a> by Mike (<a href='http://codepen.io/MadeByMike'>@MadeByMike</a>) on <a href='http://codepen.io'>CodePen</a>.</p>\n<script async src=\"//codepen.io/assets/embed/ei.js\"></script>\nSorry Sass people, Sass has no HSV functions :(\n\n## Luminance based measurement\nLuminance is the perceived brightness of a color and as expected it was the best performer of the three methods tested.\n\nIn general I'd say  these results are reasonably good. The correct color is usually picked and the text is generally readable. But closer scrutiny shows that they often don't meet [WCAG 2.0 requirements](http://www.w3.org/TR/WCAG20/#visual-audio-contrast-contrast) for text contrast.\n\n<p data-height=\"266\" data-theme-id=\"6646\" data-slug-hash=\"jJFqI\" data-default-tab=\"result\" class=\"codepen\" data-preview=\"true\">See the Pen <a href='http://codepen.io/MadeByMike/pen/jJFqI/'>Contrast black\\white - luma (Less)</a> by Mike (<a href='http://codepen.io/MadeByMike'>@MadeByMike</a>) on <a href='http://codepen.io'>CodePen</a>.</p>\n\n<script async src=\"//codepen.io/assets/embed/ei.js\"></script>\n\nThis examples uses Less, is Sass more your thing? [Got you covered](http://codepen.io/MadeByMike/pen/FoBjq)!\n\nLess has built-in luminance functions but Sass requires a little extra help.\n\n<p>Calculating luminance in Sass using the <a href=\"http://www.w3.org/TR/2008/REC-WCAG20-20081211/#relativeluminancedef\">w3c formula for relative luminance</a> requires the <code>pow</code> function, which is available only with <a href=\"http://compass-style.org/\">compass</a>.</p>\n\nI'm not sure exactly how Less calculates luminance but in my tests there was only one difference I could find (#9ACD32).\n\n## Measured contrast ratios\n\nSo none of the simple methods work and using only black and white text is somewhat limiting anyway. What if we could measure the contrast ratios and progressively increase the lightness and darkness until a desired contrast ratio is met?\n\nWait, we can do that! In this demo the acceptable contrast ratio is set to 4.5 (WCAG AA compliance). If the desired contrast ratio can not be met, either black or white is returned using the luminance method.\n\nI believe this method is by far the most useful. It can take a little time to compile, although in most situations you probably won't notice and if you're after guaranteed contrast ratios, this is the only option. No more <code>text-color</code> variables!\n\n<p data-height=\"266\" data-theme-id=\"6646\" data-slug-hash=\"sDpxg\" data-default-tab=\"result\" class='codepen'>See the Pen <a href='http://codepen.io/MadeByMike/pen/sDpxg/'> Contrast - WCAG compliant (Sass)</a> by Mike (<a href='http://codepen.io/MadeByMike'>@MadeByMike</a>) on <a href='http://codepen.io'>CodePen</a>.</p>\n<script async src=\"//codepen.io/assets/embed/ei.js\"></script>\n\n<p>Prefer Less? <s>Sorry :( I think I may have finally found something I can do with Sass that I can't do with Less, although I haven't given up yet!</s></p>\n\nIt turns out this is possible to do with Less although I can't say I like the method. Consider this [proof of concept](http://codepen.io/MadeByMike/pen/rguCF) only.\n\n## Contrast ratios with any color scheme\n\nBy default when you pass only one color to the mixin the results are in the same tonal range as the background color. This produces a monochromatic color scheme, however the function accepts a 2nd parameter, allowing a different starting point for the text color.\n\nYou can produce a range of [mathamatically determined color schemes](http://codepen.io/MadeByMike/pen/dqxCB) or you could just pick any color and let anarchy rule.\n\n## Usage\n\n<div class=\"special-attention\">\n<p>Again we're calculating luminance in Sass which requires the <code>pow</code> function, so you will need <a href=\"http://compass-style.org/\">compass</a>.</p>\n</div>\n\nDrop the following functions into your Sass stylesheets.\n\n```scss\n  @function luma($color){  \n    // Thanks voxpelli for a very concise implementation of luminance measure in sass\n    // Adapted from: https://gist.github.com/voxpelli/6304812\n    $rgba: red($color), green($color), blue($color);\n    $rgba2: ();\n    @for $i from 1 through 3 {\n      $rgb: nth($rgba, $i);\n      $rgb: $rgb / 255;\n      $rgb: if($rgb < .03928, $rgb / 12.92, pow(($rgb + .055) / 1.055, 2.4));\n      $rgba2: append($rgba2, $rgb);\n    }\n    @return (.2126 * nth($rgba2, 1) + .7152 * nth($rgba2, 2) + 0.0722 * nth($rgba2, 3))*100;\n  }\n\n  @function contrast_ratio($color1, $color2) {\n    $luma1: luma($color1) + 5;\n    $luma2: luma($color2) + 5;\n    $ratio: $luma1 / $luma2;\n    @if $luma1 < $luma2 {\n      $ratio: 1 / $ratio;\n    }\n    @return $ratio;\n  }\n\n  @function text-contrast($color, $bgcolor: $color) {\n    $threshold: 4.5; // 4.5 = WCAG AA,7= WCAG AAA\n    $list: 20 30 40 50 60 70 80 90 100;\n    @each $percent in $list {\n      $lighter: lighten($bgcolor, $percent);\n      $darker: darken($bgcolor, $percent);\n      $darker-ratio: contrast_ratio($color, $darker);\n      $lighter-ratio: contrast_ratio($color, $lighter);\n      @if($lighter-ratio > $darker-ratio){\n        @if ($lighter-ratio > $threshold){\n          @return $lighter;\n        }\n      }\n      @if($darker-ratio > $lighter-ratio){\n        @if ($darker-ratio > $threshold){\n          @return $darker;\n        }\n      }\n    }\n    @return if(lightness($color) < 51, #FFF, #000)\n  }\n```\n\nCall the `text-contrast()` function and pass it the background color:\n\n```scss\n  .my-element {\n\tbackground: $backgroud-color;\n    color: text-contrast($backgroud-color);\n  }\n```\nOptionally, pass a second parameter to control the text color:\n\n```scss\n  .my-element {\n\tbackground: $backgroud-color;\n    color: text-contrast($backgroud-color, DarkSalmon);\n  }\n```\n\n### Alternatives to compass\n\nNeed an alternative to compass? Voxpelli has a [pure sass alternative]( https://gist.github.com/voxpelli/6304812#file-_math-scss) for the `pow` function.\n\nThe w3c also has an alternative [formula for measuring brightness](http://www.w3.org/WAI/ER/WD-AERT/#color-contrast). My [experiments with this method](http://codepen.io/MadeByMike/pen/fwrhD) found it is not adequate for measured contrast ratios, but the results were often reasonable.\n",
      "internal": {
        "type": "contentfulWritingBodyTextNode",
        "mediaType": "text/markdown",
        "content": "Contrast is a critical factor in web design, it's important to get right because it has a strong influence on the visual aesthetic, but it's especially important for readability and accessibility of text on the page.\n\nIt's not a revolutionary idea to suggest that we use Less or Sass to help choose an appropriate text color for a particular background. There are plenty of examples of this, but what is the best way?\n\nMost examples I've seen work on the general principle that, if a background color is \"brighter\" than 50% give me black text, otherwise give me white text.\n\nBut what does \"brighter\" mean? It depends on the implementation. There are different ways to measure the brightness of a color. Common methods include:\n\n- Lightness - the lightness channel of the HSL color space.\n- Value - the value channel of the HSV color space.\n- Luminance - the perceptual brightness of a color.\n\nRecently I've been experimenting with different implementations of text contrast mixins using Less and Sass. I've created examples for each method and evaluated them on their ability to meet required WCAG2 contrast ratios.\n\nI found none of the simple methods give a guaranteed accessible result, but it is possible using only Less or Sass to create a mixin that will give desired contrast ratios including WCAG2 AA or AAA level.\n\n## HSL based measurement\nUnfortunately it seems **the most common implementation** which is based on lightness, **is the worst visual performer**. In the demo below `#7CFC00` is a particularly good example of where the HSL method fails.\n\n<p data-height=\"266\" data-theme-id=\"6646\" data-slug-hash=\"qjlpF\" data-default-tab=\"result\" class='codepen'>See the Pen <a href='http://codepen.io/MadeByMike/pen/qjlpF/'>Contrast black\\white - lightness (Sass)</a> by Mike (<a href='http://codepen.io/MadeByMike'>@MadeByMike</a>) on <a href='http://codepen.io'>CodePen</a>.</p>\n\n<script async src=\"//codepen.io/assets/embed/ei.js\"></script>\n\nThis example uses Sass, do you prefer Less? [Got you covered](http://codepen.io/MadeByMike/pen/qjlpF)!\n\n## HSV based measurement\nMy feeling is that HSV provides slightly better results than HSL, but it is still far from perfect. In this demo #0000CD and #8B0000 are two good examples of where HSV measurement fails.\n\n<p data-height=\"266\" data-theme-id=\"6646\" data-slug-hash=\"hqvod\" data-default-tab=\"result\" class='codepen'>See the Pen <a href='http://codepen.io/MadeByMike/pen/hqvod/'>Contrast black\\white - value (Less)</a> by Mike (<a href='http://codepen.io/MadeByMike'>@MadeByMike</a>) on <a href='http://codepen.io'>CodePen</a>.</p>\n<script async src=\"//codepen.io/assets/embed/ei.js\"></script>\nSorry Sass people, Sass has no HSV functions :(\n\n## Luminance based measurement\nLuminance is the perceived brightness of a color and as expected it was the best performer of the three methods tested.\n\nIn general I'd say  these results are reasonably good. The correct color is usually picked and the text is generally readable. But closer scrutiny shows that they often don't meet [WCAG 2.0 requirements](http://www.w3.org/TR/WCAG20/#visual-audio-contrast-contrast) for text contrast.\n\n<p data-height=\"266\" data-theme-id=\"6646\" data-slug-hash=\"jJFqI\" data-default-tab=\"result\" class=\"codepen\" data-preview=\"true\">See the Pen <a href='http://codepen.io/MadeByMike/pen/jJFqI/'>Contrast black\\white - luma (Less)</a> by Mike (<a href='http://codepen.io/MadeByMike'>@MadeByMike</a>) on <a href='http://codepen.io'>CodePen</a>.</p>\n\n<script async src=\"//codepen.io/assets/embed/ei.js\"></script>\n\nThis examples uses Less, is Sass more your thing? [Got you covered](http://codepen.io/MadeByMike/pen/FoBjq)!\n\nLess has built-in luminance functions but Sass requires a little extra help.\n\n<p>Calculating luminance in Sass using the <a href=\"http://www.w3.org/TR/2008/REC-WCAG20-20081211/#relativeluminancedef\">w3c formula for relative luminance</a> requires the <code>pow</code> function, which is available only with <a href=\"http://compass-style.org/\">compass</a>.</p>\n\nI'm not sure exactly how Less calculates luminance but in my tests there was only one difference I could find (#9ACD32).\n\n## Measured contrast ratios\n\nSo none of the simple methods work and using only black and white text is somewhat limiting anyway. What if we could measure the contrast ratios and progressively increase the lightness and darkness until a desired contrast ratio is met?\n\nWait, we can do that! In this demo the acceptable contrast ratio is set to 4.5 (WCAG AA compliance). If the desired contrast ratio can not be met, either black or white is returned using the luminance method.\n\nI believe this method is by far the most useful. It can take a little time to compile, although in most situations you probably won't notice and if you're after guaranteed contrast ratios, this is the only option. No more <code>text-color</code> variables!\n\n<p data-height=\"266\" data-theme-id=\"6646\" data-slug-hash=\"sDpxg\" data-default-tab=\"result\" class='codepen'>See the Pen <a href='http://codepen.io/MadeByMike/pen/sDpxg/'> Contrast - WCAG compliant (Sass)</a> by Mike (<a href='http://codepen.io/MadeByMike'>@MadeByMike</a>) on <a href='http://codepen.io'>CodePen</a>.</p>\n<script async src=\"//codepen.io/assets/embed/ei.js\"></script>\n\n<p>Prefer Less? <s>Sorry :( I think I may have finally found something I can do with Sass that I can't do with Less, although I haven't given up yet!</s></p>\n\nIt turns out this is possible to do with Less although I can't say I like the method. Consider this [proof of concept](http://codepen.io/MadeByMike/pen/rguCF) only.\n\n## Contrast ratios with any color scheme\n\nBy default when you pass only one color to the mixin the results are in the same tonal range as the background color. This produces a monochromatic color scheme, however the function accepts a 2nd parameter, allowing a different starting point for the text color.\n\nYou can produce a range of [mathamatically determined color schemes](http://codepen.io/MadeByMike/pen/dqxCB) or you could just pick any color and let anarchy rule.\n\n## Usage\n\n<div class=\"special-attention\">\n<p>Again we're calculating luminance in Sass which requires the <code>pow</code> function, so you will need <a href=\"http://compass-style.org/\">compass</a>.</p>\n</div>\n\nDrop the following functions into your Sass stylesheets.\n\n```scss\n  @function luma($color){  \n    // Thanks voxpelli for a very concise implementation of luminance measure in sass\n    // Adapted from: https://gist.github.com/voxpelli/6304812\n    $rgba: red($color), green($color), blue($color);\n    $rgba2: ();\n    @for $i from 1 through 3 {\n      $rgb: nth($rgba, $i);\n      $rgb: $rgb / 255;\n      $rgb: if($rgb < .03928, $rgb / 12.92, pow(($rgb + .055) / 1.055, 2.4));\n      $rgba2: append($rgba2, $rgb);\n    }\n    @return (.2126 * nth($rgba2, 1) + .7152 * nth($rgba2, 2) + 0.0722 * nth($rgba2, 3))*100;\n  }\n\n  @function contrast_ratio($color1, $color2) {\n    $luma1: luma($color1) + 5;\n    $luma2: luma($color2) + 5;\n    $ratio: $luma1 / $luma2;\n    @if $luma1 < $luma2 {\n      $ratio: 1 / $ratio;\n    }\n    @return $ratio;\n  }\n\n  @function text-contrast($color, $bgcolor: $color) {\n    $threshold: 4.5; // 4.5 = WCAG AA,7= WCAG AAA\n    $list: 20 30 40 50 60 70 80 90 100;\n    @each $percent in $list {\n      $lighter: lighten($bgcolor, $percent);\n      $darker: darken($bgcolor, $percent);\n      $darker-ratio: contrast_ratio($color, $darker);\n      $lighter-ratio: contrast_ratio($color, $lighter);\n      @if($lighter-ratio > $darker-ratio){\n        @if ($lighter-ratio > $threshold){\n          @return $lighter;\n        }\n      }\n      @if($darker-ratio > $lighter-ratio){\n        @if ($darker-ratio > $threshold){\n          @return $darker;\n        }\n      }\n    }\n    @return if(lightness($color) < 51, #FFF, #000)\n  }\n```\n\nCall the `text-contrast()` function and pass it the background color:\n\n```scss\n  .my-element {\n\tbackground: $backgroud-color;\n    color: text-contrast($backgroud-color);\n  }\n```\nOptionally, pass a second parameter to control the text color:\n\n```scss\n  .my-element {\n\tbackground: $backgroud-color;\n    color: text-contrast($backgroud-color, DarkSalmon);\n  }\n```\n\n### Alternatives to compass\n\nNeed an alternative to compass? Voxpelli has a [pure sass alternative]( https://gist.github.com/voxpelli/6304812#file-_math-scss) for the `pow` function.\n\nThe w3c also has an alternative [formula for measuring brightness](http://www.w3.org/WAI/ER/WD-AERT/#color-contrast). My [experiments with this method](http://codepen.io/MadeByMike/pen/fwrhD) found it is not adequate for measured contrast ratios, but the results were often reasonable.\n",
        "contentDigest": "f9d660cb264c66c4b92d12cfd669fc3f",
        "owner": "gatsby-source-contentful"
      }
    },
    "9a47d419-9186-55bf-b1f9-e58855d46859": {
      "id": "9a47d419-9186-55bf-b1f9-e58855d46859",
      "parent": "284d5caf-4d3f-5a7d-9365-493ed874b17d",
      "children": [
        "a8c8ae21-7ead-5519-988b-b4d3bd671b18"
      ],
      "description": "A short tutorial on different techniques for manipulating pixel data with the canvas element.",
      "internal": {
        "type": "contentfulWritingDescriptionTextNode",
        "mediaType": "text/markdown",
        "content": "A short tutorial on different techniques for manipulating pixel data with the canvas element.",
        "contentDigest": "f11e20c1c6a7a487866c5a3eeaac6f18",
        "owner": "gatsby-source-contentful"
      }
    },
    "134e8913-076c-599f-aa35-5754ac4805ce": {
      "id": "134e8913-076c-599f-aa35-5754ac4805ce",
      "parent": "284d5caf-4d3f-5a7d-9365-493ed874b17d",
      "children": [
        "898a56f5-55ef-5513-9e63-cea1c09c8e48"
      ],
      "body": "Canvas is a really interesting piece of our web development toolkit, but it is often overlooked or misunderstood. It is, as the name suggests, very much a blank canvas; not providing much in the way of prebaked solutions. It is up to us as developers to ensure what we make with canvas, is accessible and performant.\n\nCanvas has no DOM, so when compared to working with HTML and CSS it may be less intuitive, and more work. For example if we want to interact with elements on a canvas we need to define our own object model and events. Why would we want to do this if we can find a solution where things like events, layout and rendering are already taken care of by the browser?\n\nThe problem is also the answer. We can take direct control over things like layout and rendering. This means we can effectively bypass many layers of abstraction (albeit often useful abstractions) put in place by the browser, and create very streamlined, purpose-built solutions.\n\nIn this article I’m going to use the example of applying image an effect with canvas. I chose this example because it is simple enough, and there are directly comparable methods using CSS and SVG. The aim is not to argue that canvas is in any way better than CSS or SVG for this task. In fact the results and usage cases are slightly different. I want to demonstrate these differences and approaches to solving the problem with canvas.\n\n## Why use canvas?\n\nRecently my friend Una Kravets wrote an excellent article for Smashing Magazine, [Web Image Effects Performance Showdown](https://www.smashingmagazine.com/2016/05/web-image-effects-performance-showdown/). In the article Una compared the ease of implementation and performance of HTML Canvas, SVG filters, CSS filters and CSS blend modes. One of Una’s conclusions was that we should not use Canvas for image effects and I’m inclined to agree with her conclusion, especially on the basis of simplicity.\n\nUna knows a lot when it comes to applying image effects in the browser. You should checkout some of her other work including her A List Apart article, [Finessing feColorMatrix](http://alistapart.com/article/finessing-fecolormatrix) and [CSSgram](https://una.im/CSSgram/) which implements Instagram style filters using only CSS!\n\nThat’s amazing right? But it leaves the question; why would we ever want to use Canvas?\n\n**The answer is when we want to do more than just apply image effects.**\n\nFilters and blend modes don’t change images directly. Instead they are applied like mask layers in Photoshop where the source image is not modified. This means that if a user tries to save the image, they will get the original image without any effects. This might be exactly what you want, but for the average web user it’s probably a little confusing. That’s why I think CSS filters and blend modes work best for subtle effects and on background images, but not so much for applications where you want to make use of the end result.\n\nFor purely aesthetic purposes and in probably the vast majority of cases, CSS filters are exactly what you need but if you want to do something more involved, you probably need to start thinking about canvas. If you want to save an image or programmatically access the pixel data after an image effect is applied with CSS, you can’t. In the future [Houdini](https://www.smashingmagazine.com/2016/03/houdini-maybe-the-most-exciting-development-in-css-youve-never-heard-of/) may allow access the rendered output of CSS filters, but for now and in the immediate future, this stuff is locked away by the browser.\n\n## Using canvas for image effects\n\nOk, you need to apply an image effect and do something with the result? You will need to use canvas. Hopefully you’ve now read Una’s article and seen the performance of canvas compared with CSS filters and blend modes. You’re probably wondering, what is the best way to apply image effects with canvas, and can I get better performance? You can get great performance from canvas. I’m going to step through a few different techniques for applying image effects with canvas. Each technique has different levels of complexity and performance factors. As always, the best solution will depend on your specific needs and appetite for complexity.\n\n## Basic pixel manipulation with canvas\n\nIt makes sense that at its most basic Canvas is slower than other image manipulation techniques. We’re accessing the image data and manipulating it pixel by pixel then rendering the result back onto the Canvas. This means that we are doing a lot of extra work, rather than leveraging the built-in rendering capabilities of the browser. As well as this, because canvas can do a lot more than just apply image effects, we need to give explicit instructions, that would otherwise be assumed when using CSS filters and blend modes.\n\nDespite these drawbacks the most basic technique is still useful to learn and we will build upon it in the following examples. Let’s start with an image and apply a desaturation effect using Canvas and JavaScript.\n\nThe HTML might look like this:\n\n```html\n<img id=\"image\" src=\"image.jpg\">\n```\n\nWe need to make sure the image has fully loaded before we access the image data and because, web browsers, there are some inconsistencies in how the load event is triggered; especially when the image is loading from the cache. I’ve found the following method works well in browsers I tested.\n\n```javascript\nvar image = document.getElementById('image');\n\nif(image.complete){ // From cache\n  desaturateImage(image);\n} else { // On load\n  image.addEventListener('load', function() {\n      desaturateImage(image);\n  });\n}\n```\n\nNow let’s write the desaturateImage function. First we replace the image element with a canvas element:\n\n```javascript\nfunction desaturateImage(image){\n  var canvas = document.createElement('canvas');\n  image.parentNode.insertBefore(canvas, image);\n  canvas.width  = image.width;\n  canvas.height = image.height;\n  image.parentNode.removeChild(image);\n  ...\n}\n```\nNext we get a 2D rendering context, draw the image onto the canvas and get the pixel data using the <code>getImageData</code> method.\n\n```javascript\nvar ctx = canvas.getContext(\"2d\");\nctx.drawImage(image, 0, 0);\nvar imgData = ctx.getImageData(0, 0, canvas.width, canvas.height);\nvar data = imgData.data;\n```\n\nNow that we have the image data we want to apply an effect and write it back onto the canvas. Each pixel has 4 pieces of color information, one for each rgb value and an alpha value. Because of this you might expect <code>getImageData</code> to return some kind of structured data, instead—for reasons that become clear in the next example—it returns a simple unstructured array. The first four values in the array represent the first pixel and so on. This means we have to loop over it in chunks of four. We can do this like so:\n\n```javascript\nfor (var i = 0; i < data.length; i += 4) {\n  ...\n}\n```\n\nTo desaturate the image I’m using the following technique <code>grey = (red * 0.2126 + green * 0.7152 + blue * 0.0722)</code>. There are numerous [greyscale conversion algorithms](http://www.tannerhelland.com/3643/grayscale-image-algorithm-vb6/) with subtly different results, which I found an interesting and distracting side topic. One thing I like about Canvas is you have fine-grained control over any technique you apply.\n\nNext, inside the loop, assign the grey to the next four values in the <code>imgData</code> array, leaving the alpha value unchanged.\n\n```javascript\nfor (var i = 0; i < data.length; i += 4) {\n  var grey = (0.2126 * data[i]) + (0.7152 * data[i + 1]) + (0.0722 * data[i + 2]);\n  data[i] = grey;\n  data[i + 1] = grey;\n  data[i + 2] = grey;\n}\n```\n\nFinally, outside the loop, let’s write the modified pixel data back onto the canvas.\n\n```javascript\nctx.putImageData(imgData, image.width, image.height);\n```\n\nWe did it! We applied a simple image effect with canvas. If you’d like to see this technique in action here is the code and a working example of [basic pixel manipulation with canvas](/demos/image-effects/basic.html). It’s not as simple as a CSS filter, but it’s not overly complicated either. You can use this technique in moderation for small images, where performance is not critical.\n\n## 32bit pixel manipulation\n\nCanvas is very flexible and there are many ways we can optomise our code to ensure that performance is comparable, or in some cases even better than CSS and SVG filters. With canvas unfortunately the trade-off for better performance is often an increase in code complexity.\n\nOne of the biggest overheads in the first example was writing to the <code>imgData</code> array. Write operations are always expensive and although individually insignificant, we needed to write three values to the image data array for every pixel in the image. That’s a lot! Using 32bit pixel manipulation we will be able to write to the array once for each rgba value and reduce the number write operations in our example by a factor of three. This obviously comes with significant performance gains.\n\nIn addition to using getImageData, we’re going to create some array buffers that will give a different “view” for accessing the pixel data.\n\n```javascript\nvar imgData = ctx.getImageData(0, 0, canvas.width, canvas.height);\nvar buf = new ArrayBuffer(imgData.data.length);\nvar buf8 = new Uint8ClampedArray(buf);\nvar data = new Uint32Array(buf);\n```\n\nWe can then replace our loop with the following:\n\n```javascript\nvar j=0;\nfor (var i = 0; i < data.length; i += 4) {\n  var grey = (0.2126 * imgData.data[i]) + (0.7152 * imgData.data[i + 1]) + (0.0722 * imgData.data[i + 2]);\n  data[j] =\n      (255  << 24) |    // alpha\n      (grey << 16) |    // blue\n      (grey <<  8) |    // green\n       grey;            // red\n  j++; // Advance current the increment\n}\n```\n\nThere are a few things going on in the example above that you might not be familiar with, including [array buffers](Typed Arrays: Binary Data in the Browser) and [Bitwise shift operations](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators#Left_shift). For the purpose of this tutorial all you need to know is the array buffers allow us to access the image data array in a 32bit format and the bitwise operations convert separate rgba values into a single 32bit value.\n\nFinally, this is how we write the pixel data back to the canvas:\n\n```javascript\nimgData.data.set(buf8);  // Extra step\nctx.putImageData(imgData, 0, 0);\n```\n\nThis technique is significantly faster than the basic example and should be applied whenever using basic pixel manipulation techniques. Here is the code and a working example of [applying image effects using canvas and 32bit pixel manipulation](/demos/image-effects/32bit.html).\n\n## Image effects &amp; WebGL\n\nFinally, if we want blazingly fast results that compare with CSS we are going to have to leverage WebGL. WebGL gives you access to hardware acceleration that is usually orders of magnitude faster than basic pixel manipulation. But it’s also the most complicated of the examples demonstrated. It includes some fairly low-level stuff that might not be intuitive if, like me, you don’t have prior experience with 3D graphics programming.\n\n[WebGL has good support](http://caniuse.com/#feat=webgl) including on many mobile devices, however support for WebGL may depend on more than just the browser. For example on mobile devices and laptops the GPU may not be available in low power modes. In these cases you can fallback on 2D methods depending on your application.  \n\n**Note:** Do not expect a full WebGL tutorial, that’s more than I could provide in this article, but I’ll aim to give a general overview of the steps involved in setting up a scene for rendering 2D image effects.\n\n### Creating a WebGL program\n\nWe need to setup what is known as the rendering pipeline, a controllable sequence of steps for rendering 3D graphics. In WebGL this pipeline is fully configurable, which means we have the laborious task of setting up all the vertices, textures, variables and other information required by the shaders.\n\nTo many people this setup will not be particularly interesting; it’s the same boilerplate whatever the image effect applied. For this reason, and because a full introduction to WebGL deserves its own article, I’m going to skip over of most the initialisation code fairly quickly.\n\nI’m going to create a helper function to compile a WebGL program.\n\n```javascript\nfunction createWebGLProgram(ctx, vertexShaderSource, fragmentShaderSource) {\n\n  this.ctx = ctx;\n\n  this.compileShader = function(shaderSource, shaderType) {\n    var shader = this.ctx.createShader(shaderType);\n    this.ctx.shaderSource(shader, shaderSource);\n    this.ctx.compileShader(shader);\n    return shader;\n  };\n\n  var program = this.ctx.createProgram();\n  this.ctx.attachShader(program, this.compileShader(vertexShaderSource, this.ctx.VERTEX_SHADER));\n  this.ctx.attachShader(program, this.compileShader(fragmentShaderSource, this.ctx.FRAGMENT_SHADER));\n  this.ctx.linkProgram(program);\n  this.ctx.useProgram(program);\n\n  return program;\n}\n```\nThis function takes the source code for our fragment and vertex shaders, creates a program, compiles our shaders, and finally links it all together.\n\nThe next part of our code should look more familiar. We wait for the image to load then call the `desaturateImage` function, prepare our canvas, and replace the image element; the only difference is this time we request a `webgl` context rather than a 2D rendering context.\n\n```javascript\nvar image = document.getElementById('image');\n\nif(image.complete){\n  desaturateImage(image);\n} else {\n  image.onload = function(){\n    desaturateImage(image);\n  };\n}\n\nfunction desaturateImage(image) {\n  var canvas = document.createElement('canvas');\n  image.parentNode.insertBefore(canvas, image);\n  canvas.width  = image.width;\n  canvas.height = image.height;\n  image.parentNode.removeChild(image);\n\n  var ctx = canvas.getContext(\"webgl\") || canvas.getContext(\"experimental-webgl\")\n  ...\n}\n```\n\nWe are now ready to call our helper function `createWebGLProgram` and we do that like this:\n\n```javascript\nvar fragmentShaderSource = document.getElementById(\"fragment-shader\").text;\nvar vertexShaderSource = document.getElementById(\"vertex-shader\").text;\nvar program = createWebGLProgram(ctx, vertexShaderSource, fragmentShaderSource);\n```\n\nBefore this can work, we need the source code for our shaders.\n\n### Shaders\n\nIt’s convenient to write the shaders in unique script tags, not only does this keep them separate, but it avoids the mess and stress of writing strings with line-breaks in JavaScript.\n\nWhere image effects are concerned, shaders are the most important part of the process, as this is where the pixel manipulation takes place.\n\nThere are two types of shaders:\n\n  - Vertex shaders\n  - Fragment shaders\n\nGenerally speaking vertex shaders are responsible for determining the final position of each point (vertex) that forms part of a 3D shape. It does this by setting a variable named `gl_Position`. In our example, the 3D shape we are representing is a simple 2D rectangle or plane, upon which we will draw a texture.\n\nOur Vertex shader takes the vertices that represent the rectangle, these points will match our image dimensions, and it converts them to \"clip space\", a representation of the same points in a space with dimensions between -1 and 1. It also sets the `v_texCoord` variable to be used by the fragment shader.\n\n```html\n<script id=\"vertex-shader\" type=\"x-shader/x-vertex\">\nattribute vec2 a_position;\nattribute vec2 a_texCoord;\nuniform vec2 u_resolution;\nvarying vec2 v_texCoord;\n\nvoid main() {\n   vec2 clipSpace = (a_position / u_resolution) * 2.0 - 1.0;\n   gl_Position = vec4(clipSpace * vec2(1, -1), 0, 1);\n   v_texCoord = a_texCoord;\n}\n</script>\n```\n\n**Note**: We give the script tags a `type` of `x-shader/x-vertex` and `x-shader/x-fragment` because we don’t want the browser to try and run them like normal JavaScript.\n\nNext we need a fragment shader. While the vertext shader sets final position of each vertex on the canvas, the fragment shader sets the final color for each pixel, once the shape has been rasterised. Like the vertex shader, it does this by setting a special variable `gl_FragColor`.\n\n```html\n<script id=\"fragment-shader\" type=\"x-shader/x-fragment\">\nprecision mediump float;\nuniform sampler2D u_image;\nvarying vec2 v_texCoord;\n\nvoid main() {\n  vec4 color = texture2D(u_image, v_texCoord);\n  float grey = (0.2126 * color.r) + (0.7152 * color.g) + (0.0722 * color.b);\n  color.rgb = (grey - color.rgb);\n  gl_FragColor = color;\n}\n</script>\n```\n\nYou will notice the method for converting the color values to greyscale is the same as in the previous examples. The line `color.rgb += (grey - color.rgb)` is a short-hand way of setting all the rgb values of color to grey.\n\n### Data &amp; Variables\n\nWe’ve setup our shaders and WebGL program, but we need to provide the data and variables for the shaders to work with.\n\nFirst we provide canvas dimensions to the vertex shader.\n\n```javascript\nvar resolutionLocation = ctx.getUniformLocation(program, \"u_resolution\");\nctx.uniform2f(resolutionLocation, canvas.width, canvas.height);\n```\n\nNext we provide the data for the rectangle (2 triangles) on which we will draw the image.\n\n```javascript\nvar positionLocation = ctx.getAttribLocation(program, \"a_position\");\nvar buffer = ctx.createBuffer();\nctx.bindBuffer(ctx.ARRAY_BUFFER, buffer);\nctx.bufferData(ctx.ARRAY_BUFFER, new Float32Array([\n  0, 0,\n  image.width, 0,\n  0, image.height,\n  0, image.height,\n  image.width, 0,\n  image.width, image.height]), ctx.STATIC_DRAW);\nctx.enableVertexAttribArray(positionLocation);\nctx.vertexAttribPointer(positionLocation, 2, ctx.FLOAT, false, 0, 0);\n```\n\nWe also need to provide data for shape of our texture. This tells the shaders how to map the texture onto the shape.\n\n```javascript\nvar texCoordLocation = ctx.getAttribLocation(program, \"a_texCoord\");\nvar texCoordBuffer = ctx.createBuffer();\nctx.bindBuffer(ctx.ARRAY_BUFFER, texCoordBuffer);\nctx.bufferData(ctx.ARRAY_BUFFER, new Float32Array([\n  0.0, 0.0,\n  1.0, 0.0,\n  0.0, 1.0,\n  0.0, 1.0,\n  1.0, 0.0,\n  1.0, 1.0]), ctx.STATIC_DRAW);\nctx.enableVertexAttribArray(texCoordLocation);\nctx.vertexAttribPointer(texCoordLocation, 2, ctx.FLOAT, false, 0, 0);\n```\nYou can experiment with changing some of the numbers in either of the `bufferData` arrays to understand their purpose.\n\nFinally we need to provide the image data itself, and we do this by creating a texture.\n\n```javascript\nvar texture = ctx.createTexture();\nctx.bindTexture(ctx.TEXTURE_2D, texture);\nctx.texParameteri(ctx.TEXTURE_2D, ctx.TEXTURE_WRAP_S, ctx.CLAMP_TO_EDGE);\nctx.texParameteri(ctx.TEXTURE_2D, ctx.TEXTURE_WRAP_T, ctx.CLAMP_TO_EDGE);\nctx.texParameteri(ctx.TEXTURE_2D, ctx.TEXTURE_MIN_FILTER, ctx.NEAREST);\nctx.texParameteri(ctx.TEXTURE_2D, ctx.TEXTURE_MAG_FILTER, ctx.NEAREST);\n\nctx.texImage2D(ctx.TEXTURE_2D, 0, ctx.RGBA, ctx.RGBA, ctx.UNSIGNED_BYTE, image); // Load the image into the texture.\n```\n\nNow that we have setup a program, shaders and provided the data the final step is to draw the scene on the canvas. We do that like this:\n\n```javascript\nctx.drawArrays(ctx.TRIANGLES, 0, 6);\n```\n\nAnd that’s it! Checkout the [WebGL image effects demo page](/demos/image-effects/webgl.html).  \n\nThis example is fast! And I mean really fast! The results are directly comparable with CSS and SVG filters. That’s because with WebGL, the image effects are processed directly on your graphics card’s GPU, which is highly optimised for this type of work.\n\nThe code is definitely more complicated than using CSS or SVG filters but unlike these methods you can access the result, and apply many more types of effects. This technique is a good choice for an application where performance is critical and you need to save the image.\n\nOnce you understand a little about how shaders works it’s not that difficult to modify example above. You can create your own abstractions and make applying different image effects as familiar and easy as using CSS or SVG filters. To demonstrate this I wrote an examples that takes an SVG `feColorMatrix` value and applies a [color matrix transformation using WebGL](/demos/image-effects/webgl-matrix.html). This can produce an almost infinite number of image effects by simply changing the input variables.\n\nAs is often the case with modern web development, there are many features you can use to achieve the same results. For image effects CSS, SVG and canvas each have different strengths. Even after choosing the right technology, differences in implementation can make a huge difference in performance.\n\nWhilst it is tempting to pick the simplest implementation from a development perspective, what is simple is sometimes more nuanced than this. The rendering process for CSS and SVG filters, whilst largely hidden from developers, is complicated due to its many features and abstractions. If we need to, we can take more direct control over the rendering process and have purpose-built applications that are amazingly fast. Although the path is less clear, and it may be more work initially, canvas can open a range [unique possibilities](/demos/image-effects/webgl-interactive.html) not available using more defined \"paint by number\" solutions.\n\n## You might also be interested in reading\n\n- [Canvas image pixel manipulation](http://codepen.io/jakealbaugh/post/canvas-image-pixel-manipulation)\n- [Pixel manipulation with canvas](https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API/Tutorial/Pixel_manipulation_with_canvas)\n- [An Introduction to WebGL - Part 1](https://dev.opera.com/articles/introduction-to-webgl-part-1/)\n- [An introduction to shaders - Part 1](https://aerotwist.com/tutorials/an-introduction-to-shaders-part-1/)\n\n## Examples in this article\n\n- [Basic pixel manipulation](/demos/image-effects/basic.html)\n- [32bit pixel manipulation](/demos/image-effects/32bit.html)\n- [WebGL image effects](/demos/image-effects/webgl.html)\n- [WebGL simulate SVG feColorMatrix](/demos/image-effects/webgl-matrix.html)\n- [WebGL interactive image effects](/demos/image-effects/webgl-interactive.html)\n\n<br>\n<section class=\" pal mtl background-dark\">\nIf your interested in implementing any of these techniques in a real project, why not <a href=\"/hire\">get in touch with me</a>? Let's make something interesting!\n</section>\n",
      "internal": {
        "type": "contentfulWritingBodyTextNode",
        "mediaType": "text/markdown",
        "content": "Canvas is a really interesting piece of our web development toolkit, but it is often overlooked or misunderstood. It is, as the name suggests, very much a blank canvas; not providing much in the way of prebaked solutions. It is up to us as developers to ensure what we make with canvas, is accessible and performant.\n\nCanvas has no DOM, so when compared to working with HTML and CSS it may be less intuitive, and more work. For example if we want to interact with elements on a canvas we need to define our own object model and events. Why would we want to do this if we can find a solution where things like events, layout and rendering are already taken care of by the browser?\n\nThe problem is also the answer. We can take direct control over things like layout and rendering. This means we can effectively bypass many layers of abstraction (albeit often useful abstractions) put in place by the browser, and create very streamlined, purpose-built solutions.\n\nIn this article I’m going to use the example of applying image an effect with canvas. I chose this example because it is simple enough, and there are directly comparable methods using CSS and SVG. The aim is not to argue that canvas is in any way better than CSS or SVG for this task. In fact the results and usage cases are slightly different. I want to demonstrate these differences and approaches to solving the problem with canvas.\n\n## Why use canvas?\n\nRecently my friend Una Kravets wrote an excellent article for Smashing Magazine, [Web Image Effects Performance Showdown](https://www.smashingmagazine.com/2016/05/web-image-effects-performance-showdown/). In the article Una compared the ease of implementation and performance of HTML Canvas, SVG filters, CSS filters and CSS blend modes. One of Una’s conclusions was that we should not use Canvas for image effects and I’m inclined to agree with her conclusion, especially on the basis of simplicity.\n\nUna knows a lot when it comes to applying image effects in the browser. You should checkout some of her other work including her A List Apart article, [Finessing feColorMatrix](http://alistapart.com/article/finessing-fecolormatrix) and [CSSgram](https://una.im/CSSgram/) which implements Instagram style filters using only CSS!\n\nThat’s amazing right? But it leaves the question; why would we ever want to use Canvas?\n\n**The answer is when we want to do more than just apply image effects.**\n\nFilters and blend modes don’t change images directly. Instead they are applied like mask layers in Photoshop where the source image is not modified. This means that if a user tries to save the image, they will get the original image without any effects. This might be exactly what you want, but for the average web user it’s probably a little confusing. That’s why I think CSS filters and blend modes work best for subtle effects and on background images, but not so much for applications where you want to make use of the end result.\n\nFor purely aesthetic purposes and in probably the vast majority of cases, CSS filters are exactly what you need but if you want to do something more involved, you probably need to start thinking about canvas. If you want to save an image or programmatically access the pixel data after an image effect is applied with CSS, you can’t. In the future [Houdini](https://www.smashingmagazine.com/2016/03/houdini-maybe-the-most-exciting-development-in-css-youve-never-heard-of/) may allow access the rendered output of CSS filters, but for now and in the immediate future, this stuff is locked away by the browser.\n\n## Using canvas for image effects\n\nOk, you need to apply an image effect and do something with the result? You will need to use canvas. Hopefully you’ve now read Una’s article and seen the performance of canvas compared with CSS filters and blend modes. You’re probably wondering, what is the best way to apply image effects with canvas, and can I get better performance? You can get great performance from canvas. I’m going to step through a few different techniques for applying image effects with canvas. Each technique has different levels of complexity and performance factors. As always, the best solution will depend on your specific needs and appetite for complexity.\n\n## Basic pixel manipulation with canvas\n\nIt makes sense that at its most basic Canvas is slower than other image manipulation techniques. We’re accessing the image data and manipulating it pixel by pixel then rendering the result back onto the Canvas. This means that we are doing a lot of extra work, rather than leveraging the built-in rendering capabilities of the browser. As well as this, because canvas can do a lot more than just apply image effects, we need to give explicit instructions, that would otherwise be assumed when using CSS filters and blend modes.\n\nDespite these drawbacks the most basic technique is still useful to learn and we will build upon it in the following examples. Let’s start with an image and apply a desaturation effect using Canvas and JavaScript.\n\nThe HTML might look like this:\n\n```html\n<img id=\"image\" src=\"image.jpg\">\n```\n\nWe need to make sure the image has fully loaded before we access the image data and because, web browsers, there are some inconsistencies in how the load event is triggered; especially when the image is loading from the cache. I’ve found the following method works well in browsers I tested.\n\n```javascript\nvar image = document.getElementById('image');\n\nif(image.complete){ // From cache\n  desaturateImage(image);\n} else { // On load\n  image.addEventListener('load', function() {\n      desaturateImage(image);\n  });\n}\n```\n\nNow let’s write the desaturateImage function. First we replace the image element with a canvas element:\n\n```javascript\nfunction desaturateImage(image){\n  var canvas = document.createElement('canvas');\n  image.parentNode.insertBefore(canvas, image);\n  canvas.width  = image.width;\n  canvas.height = image.height;\n  image.parentNode.removeChild(image);\n  ...\n}\n```\nNext we get a 2D rendering context, draw the image onto the canvas and get the pixel data using the <code>getImageData</code> method.\n\n```javascript\nvar ctx = canvas.getContext(\"2d\");\nctx.drawImage(image, 0, 0);\nvar imgData = ctx.getImageData(0, 0, canvas.width, canvas.height);\nvar data = imgData.data;\n```\n\nNow that we have the image data we want to apply an effect and write it back onto the canvas. Each pixel has 4 pieces of color information, one for each rgb value and an alpha value. Because of this you might expect <code>getImageData</code> to return some kind of structured data, instead—for reasons that become clear in the next example—it returns a simple unstructured array. The first four values in the array represent the first pixel and so on. This means we have to loop over it in chunks of four. We can do this like so:\n\n```javascript\nfor (var i = 0; i < data.length; i += 4) {\n  ...\n}\n```\n\nTo desaturate the image I’m using the following technique <code>grey = (red * 0.2126 + green * 0.7152 + blue * 0.0722)</code>. There are numerous [greyscale conversion algorithms](http://www.tannerhelland.com/3643/grayscale-image-algorithm-vb6/) with subtly different results, which I found an interesting and distracting side topic. One thing I like about Canvas is you have fine-grained control over any technique you apply.\n\nNext, inside the loop, assign the grey to the next four values in the <code>imgData</code> array, leaving the alpha value unchanged.\n\n```javascript\nfor (var i = 0; i < data.length; i += 4) {\n  var grey = (0.2126 * data[i]) + (0.7152 * data[i + 1]) + (0.0722 * data[i + 2]);\n  data[i] = grey;\n  data[i + 1] = grey;\n  data[i + 2] = grey;\n}\n```\n\nFinally, outside the loop, let’s write the modified pixel data back onto the canvas.\n\n```javascript\nctx.putImageData(imgData, image.width, image.height);\n```\n\nWe did it! We applied a simple image effect with canvas. If you’d like to see this technique in action here is the code and a working example of [basic pixel manipulation with canvas](/demos/image-effects/basic.html). It’s not as simple as a CSS filter, but it’s not overly complicated either. You can use this technique in moderation for small images, where performance is not critical.\n\n## 32bit pixel manipulation\n\nCanvas is very flexible and there are many ways we can optomise our code to ensure that performance is comparable, or in some cases even better than CSS and SVG filters. With canvas unfortunately the trade-off for better performance is often an increase in code complexity.\n\nOne of the biggest overheads in the first example was writing to the <code>imgData</code> array. Write operations are always expensive and although individually insignificant, we needed to write three values to the image data array for every pixel in the image. That’s a lot! Using 32bit pixel manipulation we will be able to write to the array once for each rgba value and reduce the number write operations in our example by a factor of three. This obviously comes with significant performance gains.\n\nIn addition to using getImageData, we’re going to create some array buffers that will give a different “view” for accessing the pixel data.\n\n```javascript\nvar imgData = ctx.getImageData(0, 0, canvas.width, canvas.height);\nvar buf = new ArrayBuffer(imgData.data.length);\nvar buf8 = new Uint8ClampedArray(buf);\nvar data = new Uint32Array(buf);\n```\n\nWe can then replace our loop with the following:\n\n```javascript\nvar j=0;\nfor (var i = 0; i < data.length; i += 4) {\n  var grey = (0.2126 * imgData.data[i]) + (0.7152 * imgData.data[i + 1]) + (0.0722 * imgData.data[i + 2]);\n  data[j] =\n      (255  << 24) |    // alpha\n      (grey << 16) |    // blue\n      (grey <<  8) |    // green\n       grey;            // red\n  j++; // Advance current the increment\n}\n```\n\nThere are a few things going on in the example above that you might not be familiar with, including [array buffers](Typed Arrays: Binary Data in the Browser) and [Bitwise shift operations](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators#Left_shift). For the purpose of this tutorial all you need to know is the array buffers allow us to access the image data array in a 32bit format and the bitwise operations convert separate rgba values into a single 32bit value.\n\nFinally, this is how we write the pixel data back to the canvas:\n\n```javascript\nimgData.data.set(buf8);  // Extra step\nctx.putImageData(imgData, 0, 0);\n```\n\nThis technique is significantly faster than the basic example and should be applied whenever using basic pixel manipulation techniques. Here is the code and a working example of [applying image effects using canvas and 32bit pixel manipulation](/demos/image-effects/32bit.html).\n\n## Image effects &amp; WebGL\n\nFinally, if we want blazingly fast results that compare with CSS we are going to have to leverage WebGL. WebGL gives you access to hardware acceleration that is usually orders of magnitude faster than basic pixel manipulation. But it’s also the most complicated of the examples demonstrated. It includes some fairly low-level stuff that might not be intuitive if, like me, you don’t have prior experience with 3D graphics programming.\n\n[WebGL has good support](http://caniuse.com/#feat=webgl) including on many mobile devices, however support for WebGL may depend on more than just the browser. For example on mobile devices and laptops the GPU may not be available in low power modes. In these cases you can fallback on 2D methods depending on your application.  \n\n**Note:** Do not expect a full WebGL tutorial, that’s more than I could provide in this article, but I’ll aim to give a general overview of the steps involved in setting up a scene for rendering 2D image effects.\n\n### Creating a WebGL program\n\nWe need to setup what is known as the rendering pipeline, a controllable sequence of steps for rendering 3D graphics. In WebGL this pipeline is fully configurable, which means we have the laborious task of setting up all the vertices, textures, variables and other information required by the shaders.\n\nTo many people this setup will not be particularly interesting; it’s the same boilerplate whatever the image effect applied. For this reason, and because a full introduction to WebGL deserves its own article, I’m going to skip over of most the initialisation code fairly quickly.\n\nI’m going to create a helper function to compile a WebGL program.\n\n```javascript\nfunction createWebGLProgram(ctx, vertexShaderSource, fragmentShaderSource) {\n\n  this.ctx = ctx;\n\n  this.compileShader = function(shaderSource, shaderType) {\n    var shader = this.ctx.createShader(shaderType);\n    this.ctx.shaderSource(shader, shaderSource);\n    this.ctx.compileShader(shader);\n    return shader;\n  };\n\n  var program = this.ctx.createProgram();\n  this.ctx.attachShader(program, this.compileShader(vertexShaderSource, this.ctx.VERTEX_SHADER));\n  this.ctx.attachShader(program, this.compileShader(fragmentShaderSource, this.ctx.FRAGMENT_SHADER));\n  this.ctx.linkProgram(program);\n  this.ctx.useProgram(program);\n\n  return program;\n}\n```\nThis function takes the source code for our fragment and vertex shaders, creates a program, compiles our shaders, and finally links it all together.\n\nThe next part of our code should look more familiar. We wait for the image to load then call the `desaturateImage` function, prepare our canvas, and replace the image element; the only difference is this time we request a `webgl` context rather than a 2D rendering context.\n\n```javascript\nvar image = document.getElementById('image');\n\nif(image.complete){\n  desaturateImage(image);\n} else {\n  image.onload = function(){\n    desaturateImage(image);\n  };\n}\n\nfunction desaturateImage(image) {\n  var canvas = document.createElement('canvas');\n  image.parentNode.insertBefore(canvas, image);\n  canvas.width  = image.width;\n  canvas.height = image.height;\n  image.parentNode.removeChild(image);\n\n  var ctx = canvas.getContext(\"webgl\") || canvas.getContext(\"experimental-webgl\")\n  ...\n}\n```\n\nWe are now ready to call our helper function `createWebGLProgram` and we do that like this:\n\n```javascript\nvar fragmentShaderSource = document.getElementById(\"fragment-shader\").text;\nvar vertexShaderSource = document.getElementById(\"vertex-shader\").text;\nvar program = createWebGLProgram(ctx, vertexShaderSource, fragmentShaderSource);\n```\n\nBefore this can work, we need the source code for our shaders.\n\n### Shaders\n\nIt’s convenient to write the shaders in unique script tags, not only does this keep them separate, but it avoids the mess and stress of writing strings with line-breaks in JavaScript.\n\nWhere image effects are concerned, shaders are the most important part of the process, as this is where the pixel manipulation takes place.\n\nThere are two types of shaders:\n\n  - Vertex shaders\n  - Fragment shaders\n\nGenerally speaking vertex shaders are responsible for determining the final position of each point (vertex) that forms part of a 3D shape. It does this by setting a variable named `gl_Position`. In our example, the 3D shape we are representing is a simple 2D rectangle or plane, upon which we will draw a texture.\n\nOur Vertex shader takes the vertices that represent the rectangle, these points will match our image dimensions, and it converts them to \"clip space\", a representation of the same points in a space with dimensions between -1 and 1. It also sets the `v_texCoord` variable to be used by the fragment shader.\n\n```html\n<script id=\"vertex-shader\" type=\"x-shader/x-vertex\">\nattribute vec2 a_position;\nattribute vec2 a_texCoord;\nuniform vec2 u_resolution;\nvarying vec2 v_texCoord;\n\nvoid main() {\n   vec2 clipSpace = (a_position / u_resolution) * 2.0 - 1.0;\n   gl_Position = vec4(clipSpace * vec2(1, -1), 0, 1);\n   v_texCoord = a_texCoord;\n}\n</script>\n```\n\n**Note**: We give the script tags a `type` of `x-shader/x-vertex` and `x-shader/x-fragment` because we don’t want the browser to try and run them like normal JavaScript.\n\nNext we need a fragment shader. While the vertext shader sets final position of each vertex on the canvas, the fragment shader sets the final color for each pixel, once the shape has been rasterised. Like the vertex shader, it does this by setting a special variable `gl_FragColor`.\n\n```html\n<script id=\"fragment-shader\" type=\"x-shader/x-fragment\">\nprecision mediump float;\nuniform sampler2D u_image;\nvarying vec2 v_texCoord;\n\nvoid main() {\n  vec4 color = texture2D(u_image, v_texCoord);\n  float grey = (0.2126 * color.r) + (0.7152 * color.g) + (0.0722 * color.b);\n  color.rgb = (grey - color.rgb);\n  gl_FragColor = color;\n}\n</script>\n```\n\nYou will notice the method for converting the color values to greyscale is the same as in the previous examples. The line `color.rgb += (grey - color.rgb)` is a short-hand way of setting all the rgb values of color to grey.\n\n### Data &amp; Variables\n\nWe’ve setup our shaders and WebGL program, but we need to provide the data and variables for the shaders to work with.\n\nFirst we provide canvas dimensions to the vertex shader.\n\n```javascript\nvar resolutionLocation = ctx.getUniformLocation(program, \"u_resolution\");\nctx.uniform2f(resolutionLocation, canvas.width, canvas.height);\n```\n\nNext we provide the data for the rectangle (2 triangles) on which we will draw the image.\n\n```javascript\nvar positionLocation = ctx.getAttribLocation(program, \"a_position\");\nvar buffer = ctx.createBuffer();\nctx.bindBuffer(ctx.ARRAY_BUFFER, buffer);\nctx.bufferData(ctx.ARRAY_BUFFER, new Float32Array([\n  0, 0,\n  image.width, 0,\n  0, image.height,\n  0, image.height,\n  image.width, 0,\n  image.width, image.height]), ctx.STATIC_DRAW);\nctx.enableVertexAttribArray(positionLocation);\nctx.vertexAttribPointer(positionLocation, 2, ctx.FLOAT, false, 0, 0);\n```\n\nWe also need to provide data for shape of our texture. This tells the shaders how to map the texture onto the shape.\n\n```javascript\nvar texCoordLocation = ctx.getAttribLocation(program, \"a_texCoord\");\nvar texCoordBuffer = ctx.createBuffer();\nctx.bindBuffer(ctx.ARRAY_BUFFER, texCoordBuffer);\nctx.bufferData(ctx.ARRAY_BUFFER, new Float32Array([\n  0.0, 0.0,\n  1.0, 0.0,\n  0.0, 1.0,\n  0.0, 1.0,\n  1.0, 0.0,\n  1.0, 1.0]), ctx.STATIC_DRAW);\nctx.enableVertexAttribArray(texCoordLocation);\nctx.vertexAttribPointer(texCoordLocation, 2, ctx.FLOAT, false, 0, 0);\n```\nYou can experiment with changing some of the numbers in either of the `bufferData` arrays to understand their purpose.\n\nFinally we need to provide the image data itself, and we do this by creating a texture.\n\n```javascript\nvar texture = ctx.createTexture();\nctx.bindTexture(ctx.TEXTURE_2D, texture);\nctx.texParameteri(ctx.TEXTURE_2D, ctx.TEXTURE_WRAP_S, ctx.CLAMP_TO_EDGE);\nctx.texParameteri(ctx.TEXTURE_2D, ctx.TEXTURE_WRAP_T, ctx.CLAMP_TO_EDGE);\nctx.texParameteri(ctx.TEXTURE_2D, ctx.TEXTURE_MIN_FILTER, ctx.NEAREST);\nctx.texParameteri(ctx.TEXTURE_2D, ctx.TEXTURE_MAG_FILTER, ctx.NEAREST);\n\nctx.texImage2D(ctx.TEXTURE_2D, 0, ctx.RGBA, ctx.RGBA, ctx.UNSIGNED_BYTE, image); // Load the image into the texture.\n```\n\nNow that we have setup a program, shaders and provided the data the final step is to draw the scene on the canvas. We do that like this:\n\n```javascript\nctx.drawArrays(ctx.TRIANGLES, 0, 6);\n```\n\nAnd that’s it! Checkout the [WebGL image effects demo page](/demos/image-effects/webgl.html).  \n\nThis example is fast! And I mean really fast! The results are directly comparable with CSS and SVG filters. That’s because with WebGL, the image effects are processed directly on your graphics card’s GPU, which is highly optimised for this type of work.\n\nThe code is definitely more complicated than using CSS or SVG filters but unlike these methods you can access the result, and apply many more types of effects. This technique is a good choice for an application where performance is critical and you need to save the image.\n\nOnce you understand a little about how shaders works it’s not that difficult to modify example above. You can create your own abstractions and make applying different image effects as familiar and easy as using CSS or SVG filters. To demonstrate this I wrote an examples that takes an SVG `feColorMatrix` value and applies a [color matrix transformation using WebGL](/demos/image-effects/webgl-matrix.html). This can produce an almost infinite number of image effects by simply changing the input variables.\n\nAs is often the case with modern web development, there are many features you can use to achieve the same results. For image effects CSS, SVG and canvas each have different strengths. Even after choosing the right technology, differences in implementation can make a huge difference in performance.\n\nWhilst it is tempting to pick the simplest implementation from a development perspective, what is simple is sometimes more nuanced than this. The rendering process for CSS and SVG filters, whilst largely hidden from developers, is complicated due to its many features and abstractions. If we need to, we can take more direct control over the rendering process and have purpose-built applications that are amazingly fast. Although the path is less clear, and it may be more work initially, canvas can open a range [unique possibilities](/demos/image-effects/webgl-interactive.html) not available using more defined \"paint by number\" solutions.\n\n## You might also be interested in reading\n\n- [Canvas image pixel manipulation](http://codepen.io/jakealbaugh/post/canvas-image-pixel-manipulation)\n- [Pixel manipulation with canvas](https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API/Tutorial/Pixel_manipulation_with_canvas)\n- [An Introduction to WebGL - Part 1](https://dev.opera.com/articles/introduction-to-webgl-part-1/)\n- [An introduction to shaders - Part 1](https://aerotwist.com/tutorials/an-introduction-to-shaders-part-1/)\n\n## Examples in this article\n\n- [Basic pixel manipulation](/demos/image-effects/basic.html)\n- [32bit pixel manipulation](/demos/image-effects/32bit.html)\n- [WebGL image effects](/demos/image-effects/webgl.html)\n- [WebGL simulate SVG feColorMatrix](/demos/image-effects/webgl-matrix.html)\n- [WebGL interactive image effects](/demos/image-effects/webgl-interactive.html)\n\n<br>\n<section class=\" pal mtl background-dark\">\nIf your interested in implementing any of these techniques in a real project, why not <a href=\"/hire\">get in touch with me</a>? Let's make something interesting!\n</section>\n",
        "contentDigest": "f0d86df6cf153e968c0ec8b3c9e493ea",
        "owner": "gatsby-source-contentful"
      }
    },
    "b662b1cf-1d20-5ab8-8229-327a802660f4": {
      "id": "b662b1cf-1d20-5ab8-8229-327a802660f4",
      "parent": "4c31379f-ca7f-50b7-a62a-caa5c684f392",
      "children": [
        "8995ec68-52e1-5ca7-8b9c-07299324bfb0"
      ],
      "body": "If you've worked with the css transition events in JavaScript you will know that it's a little involved due to the need for multiple browser prefixes. Luckily it's easy, if slightly verbose, to detect which transition event to use:\n\n```javascript\n  // Dave Walsh says this is from Modernizr, but I can't find it\n  // http://davidwalsh.name/css-animation-callback\n  var whichTransitionEvent = function(){\n    var t;\n    var el = document.createElement('fakeelement');\n    var transitions = {\n      'transition':'transitionend',\n      'OTransition':'oTransitionEnd',\n      'MozTransition':'transitionend',\n      'WebkitTransition':'webkitTransitionEnd'\n    };\n    for(t in transitions){\n      if( el.style[t] !== undefined ){\n        return transitions[t];\n      }\n    }\n  };\n  var transitionEvent = whichTransitionEvent();\n\n  // With that sorted...\n  if(transitionEvent){\n    document.body.addEventListener(transitionEvent, function() {\n\t  // do stuff here\n\t});\n  }\n```\n\nWe need to check if `transitionEvent` exists before adding an event listener and whilst this isn't too hard, we could take this a step further and wrap it with a custom event `'transition-end'`. See: [example gist](https://gist.github.com/MadeByMike/0563ca51e08a790e553b).\n\nMy reason for this extra step, apart from easy of use, relates to detecting transition start.\n\n## What about transition start?\n\nUnfortunately there is no transition start event and it might at first seem like this is not much of a problem. A css transition is usually triggered by an event such as resize or hover and these events can be captured with JavaScript. But that is not always the case, at times it is difficult if not impossible to tell when a particular transition is triggered.\n\nThe following example demonstrates a likely use case with the popular Foundation library and the [Equalizer](http://foundation.zurb.com/docs/components/equalizer.html) component.\n\n<p data-height=\"650\" data-theme-id=\"6646\" data-slug-hash=\"ImxHA\" data-default-tab=\"result\" class='codepen'>See the Pen <a href='http://codepen.io/MadeByMike/pen/ImxHA/'>Foundation Equalizer and the problem with CSS Transitions</a> by Mike (<a href='http://codepen.io/MadeByMike'>@MadeByMike</a>) on <a href='http://codepen.io'>CodePen</a>.</p>\n<script async src=\"//codepen.io/assets/embed/ei.js\"></script>\n\nIn the demo Equalizer changes the boxes so they are even height. The height is re-calculated when the browser is resized, but when the container is resized as part of a css transition the height will not be re-calculated and content will overflow the boxes.\n\nI've exaggerated the transitions in the example to demonstrate.\n\nDetecting transtionend and calling `$(document).foundation('equalizer','reflow');` will set the height correctly at the end of the transition but it is not a smooth experience.\n\nAlthough not the ideal method I'd like, I've come up with a solution for detecting transition start. By wrapping the transitionend event with a custom event we can use transitionend in a sneaky way to detect a transition start.\n\n<p data-height=\"500\" data-theme-id=\"6646\" data-slug-hash=\"sBjzn\" data-default-tab=\"result\" class='codepen'>See the Pen <a href='http://codepen.io/MadeByMike/pen/sBjzn/'>Detect transition start </a> by Mike (<a href='http://codepen.io/MadeByMike'>@MadeByMike</a>) on <a href='http://codepen.io'>CodePen</a>.</p>\n<script async src=\"//codepen.io/assets/embed/ei.js\"></script>\n\nAs I said, it is not ideal. It requires some specific css with a 0.00001s transition to detect the transition start.\n\nI'm looking forward to finding a better method. If you do let me know.",
      "internal": {
        "type": "contentfulWritingBodyTextNode",
        "mediaType": "text/markdown",
        "content": "If you've worked with the css transition events in JavaScript you will know that it's a little involved due to the need for multiple browser prefixes. Luckily it's easy, if slightly verbose, to detect which transition event to use:\n\n```javascript\n  // Dave Walsh says this is from Modernizr, but I can't find it\n  // http://davidwalsh.name/css-animation-callback\n  var whichTransitionEvent = function(){\n    var t;\n    var el = document.createElement('fakeelement');\n    var transitions = {\n      'transition':'transitionend',\n      'OTransition':'oTransitionEnd',\n      'MozTransition':'transitionend',\n      'WebkitTransition':'webkitTransitionEnd'\n    };\n    for(t in transitions){\n      if( el.style[t] !== undefined ){\n        return transitions[t];\n      }\n    }\n  };\n  var transitionEvent = whichTransitionEvent();\n\n  // With that sorted...\n  if(transitionEvent){\n    document.body.addEventListener(transitionEvent, function() {\n\t  // do stuff here\n\t});\n  }\n```\n\nWe need to check if `transitionEvent` exists before adding an event listener and whilst this isn't too hard, we could take this a step further and wrap it with a custom event `'transition-end'`. See: [example gist](https://gist.github.com/MadeByMike/0563ca51e08a790e553b).\n\nMy reason for this extra step, apart from easy of use, relates to detecting transition start.\n\n## What about transition start?\n\nUnfortunately there is no transition start event and it might at first seem like this is not much of a problem. A css transition is usually triggered by an event such as resize or hover and these events can be captured with JavaScript. But that is not always the case, at times it is difficult if not impossible to tell when a particular transition is triggered.\n\nThe following example demonstrates a likely use case with the popular Foundation library and the [Equalizer](http://foundation.zurb.com/docs/components/equalizer.html) component.\n\n<p data-height=\"650\" data-theme-id=\"6646\" data-slug-hash=\"ImxHA\" data-default-tab=\"result\" class='codepen'>See the Pen <a href='http://codepen.io/MadeByMike/pen/ImxHA/'>Foundation Equalizer and the problem with CSS Transitions</a> by Mike (<a href='http://codepen.io/MadeByMike'>@MadeByMike</a>) on <a href='http://codepen.io'>CodePen</a>.</p>\n<script async src=\"//codepen.io/assets/embed/ei.js\"></script>\n\nIn the demo Equalizer changes the boxes so they are even height. The height is re-calculated when the browser is resized, but when the container is resized as part of a css transition the height will not be re-calculated and content will overflow the boxes.\n\nI've exaggerated the transitions in the example to demonstrate.\n\nDetecting transtionend and calling `$(document).foundation('equalizer','reflow');` will set the height correctly at the end of the transition but it is not a smooth experience.\n\nAlthough not the ideal method I'd like, I've come up with a solution for detecting transition start. By wrapping the transitionend event with a custom event we can use transitionend in a sneaky way to detect a transition start.\n\n<p data-height=\"500\" data-theme-id=\"6646\" data-slug-hash=\"sBjzn\" data-default-tab=\"result\" class='codepen'>See the Pen <a href='http://codepen.io/MadeByMike/pen/sBjzn/'>Detect transition start </a> by Mike (<a href='http://codepen.io/MadeByMike'>@MadeByMike</a>) on <a href='http://codepen.io'>CodePen</a>.</p>\n<script async src=\"//codepen.io/assets/embed/ei.js\"></script>\n\nAs I said, it is not ideal. It requires some specific css with a 0.00001s transition to detect the transition start.\n\nI'm looking forward to finding a better method. If you do let me know.",
        "contentDigest": "b4ed44353eddded0dcd4b5c769821946",
        "owner": "gatsby-source-contentful"
      }
    },
    "3a5203f8-e756-57a1-8c78-80d5b9da33c4": {
      "id": "3a5203f8-e756-57a1-8c78-80d5b9da33c4",
      "parent": "8e079e1e-0d9c-5e9c-8838-2b0020cbe068",
      "children": [
        "49ea92ac-c62d-58a4-8436-4325aed670f4"
      ],
      "description": "Explains the box model, cascade, formatting contexts, positioning, stacking and a lot more about how CSS works. A right of passage, I had to write my version.",
      "internal": {
        "type": "contentfulWritingDescriptionTextNode",
        "mediaType": "text/markdown",
        "content": "Explains the box model, cascade, formatting contexts, positioning, stacking and a lot more about how CSS works. A right of passage, I had to write my version.",
        "contentDigest": "b4e7f3aedf36919e25e4bd0119411a74",
        "owner": "gatsby-source-contentful"
      }
    },
    "a62cea07-f354-5149-a8ba-d464f2a336a5": {
      "id": "a62cea07-f354-5149-a8ba-d464f2a336a5",
      "parent": "8e079e1e-0d9c-5e9c-8838-2b0020cbe068",
      "children": [
        "bd1692e3-5694-527b-b958-9982156ec065"
      ],
      "body": "\nIf you use CSS in your daily work, your primary goal is probably focused on making things 'look right'. How this is achieved is often far less important than the end result. This means we care less about how CSS works than the correct syntax and visual results.\n\nYou may not have realised it, but the visual results of CSS are often an indirect consequence of manipulating hidden properties. Some CSS properties such as `background-color` have a direct and obvious relationship with what you see. While others such as `display` remain ambiguous to many of us because the results seem highly dependant on context.\n\nI doubt many developers could describe in simple terms what setting `display: block` actually does. At best you probably have an intuitive understanding of how properties like this work. That's ok, you can have a pretty good wrangle of CSS without understanding the underlying principles. Although, this might be knowing the solution without necessarily understanding the problem.\n\nIf this describes you, that's ok. I learnt how to work with CSS, long before I understood *how* it worked. I guess that doesn’t make it ok, ...but at least you’re not alone!\n\nThe underlying features of CSS are complicated and intentionally abstracted, yet we can't be completely unaware of them. Concepts such as the Box Model, Cascade and Specificity will be familiar to many of us. Although they are often misunderstood, knowing a little of how these work can help us write better CSS.\n\nThe same can be said for many other hidden parts of CSS. The problem with understanding these better is that the barrier to entry is even higher. It often feels like nothing can be explained in isolation. You need to know everything before you can understand the smallest part of the process.\n\nBecause of this I want to attempt to shed some light on the invisible parts of CSS, touching only on what you need to know and hopefully explaining the process in a logical order, so that you can gain a better understand of how CSS actually works.\n\nThis is a long article so if you want to skip ahead to one of these sections, I'm totally fine with that:\n\n- [Overview of the rendering process](#overview-of-the-rendering-process)\n- [Cascade](#cascade)\n- [The Box Model](#the-box-model)\n\t- [Fill Area](#fill-area)\n\t- [Width Auto](#width-auto)\n\t- [Box-sizing](#box-sizing)\n\t- [Collapsing margins](#collapsing-margins)\n- [The Visual Formatting Model](#the-visual-formatting-model)\n- [Display types](#display-types)\n- [Formatting contexts](#formatting-contexts)\n- [Positioning schemes](#positioning-schemes)\n\t- [Normal flow](#normal-flow)\n\t- [Floats](#floats)\n\t- [Absolute positioning](#absolute-positioning)\n\t- [Stacking context](#stacking-contexts)\n\n## Overview of the rendering process\n\nWhen you load an HTML document there is a lot that happens in order for that page to render.\n\nThe first step is to parse the HTML document. From this the browser builds a 'document tree'. A tree structure is a way of representing information with an obvious hierarchy like HTML. Elements in a tree can be described in terms similar to a family tree, such as descendants, parents, children and siblings.\n\nYou might have heard the term DOM. This stands for Document Object Model. It is an extension of the document tree structure, and is used to store and manipulate information about the content of a web document.\n\nAs HTML is being parsed, stylesheets and other resources are fetched. Style declarations are interpreted and resolved through a process known as the [Cascade](#cascade).\n\nDuring this process the final values of CSS properties are resolved. After calculation these values may be different to what is written in our stylesheets. For example keywords like `auto` and relative units are assigned real values, and inherited values are applied. These computed values are stored in a tree, similar to elements in the DOM, in what is unsurprisingly called the CSS Object Model or CSSOM.\n\nIt is now possible to begin the process of rendering the page. The first step in this process is the calculation of [the Box Model](#the-box-model). This is an important step for working out the size and spacing of elements, although not their final position.\n\nLess well known than the [Box Model](#the-box-model) is a process called the [Visual Formatting Model](#the-visual-formatting-model). This process determines the layout and positioning of elements on the page. It encompases some concepts you might already be familiar with such as [positioning schemes](#positioning-schemes), [formatting contexts](#formatting-contexts), [display modes](#display-types), and [stacking contexts](#stacking-contexts).\n\nFinally the page is rendered.\n\nThere might be a few terms in the paragraphs above that you are not yet familiar with. If so, what's most important is to understand that the [Cascade](#cascade), the [Box Model](#the-box-model), and the [Visual Formatting Model](#the-visual-formatting-model) are the key steps involved in interpreting, processing and rendering HTML and CSS. I’ve skipped over a lot of detail when describing each of these so we’re now going to look at these 3 steps more closely.\n\n## Cascade\n\nThe cascade is probably one of the most misunderstood features of CSS. It refers to the process of combining different stylesheets and resolving conflicts between CSS selectors.\n\nThe cascade looks at the importance, origin, specificity, and order of declarations to determine which style rules to use.\n\n**What you need to know:**\n\nMost websites have multiple stylesheets. Typically styles are added with a `link` tag that references a css file, or with a `style` tag in the HTML body. Even the most basic page will have default styles provided by the browser. This default stylesheet is sometimes called the user-agent stylesheet.\n\nDuring the cascade stylesheets are interpreted in the following order:\n\n1. !important declarations\n2. Author stylesheets\n3. Browser default stylesheets\n\n**Note:** I've skipped over user stylesheets here because they are not a common thing anymore and probably wouldn’t factor in consideration for anyone reading this.\n\nAfter combining these sources, if multiple rules apply to the same element, specificity is used to determine which rules to apply.\n\n### Specificity\n\nSpecificity is a weighting given to selectors. It's a common mistake to think of this as a single number. It’s actually 4 separate numbers or 4 categories of weighting.\n\nTo calculate specificity, count the number of:\n\n1. IDs,\n2. classes, attributes and pseudo-classes,\n3. elements and pseudo-elements\n\nFor example: `#nav .selected:hover > a::before` will be 1, 2, 2.\n\nNo number of classes will ever have a higher specificity than an ID. When comparing selectors you compare the specificity of IDs first. Only if these match do you compare the value of classes, attributes and pseudo-classes and finally, if still equal, elements and pseudo-elements.\n\nIf specificity is equal in every category, the last declaration in the source takes precedence.\n\n\nYes! I know I said 4 categories. Inlines styles have a higher specificity than IDs. Although they are technically the first category in specificity calculations you don't typically end up with competing inline styles, so it’s easier just remember that inline styles will always win specificity.\n\n**Important note:** !important declarations are not factored in specificity calculations but they do have a greater precedence than normal declarations in the cascade.\n\n### Inheritance\n\nInheritance is not part of the cascade but I've included it here because it is often discussed in conjunction with the cascade.\n\nInheritance is the process where values that apply to an element can be passed on (or inherited) by its children.\n\nYou are likely familiar with the fact that font properties, when applied to the body or another container element, are also inherited by every element inside that container. This is inheritance.\n\nNot all properties are inherited by default. Understanding inheritance is key to writing more deliberate and less verbose CSS. Forcing inheritance with the `inherit` keyword can be incredibly useful.\n\n**Note:** Some properties are such as `border-color` have a default value of `currentcolor`. This means they will use the value set on the `color` property. This default value is not the same thing as inheritance. Although the color property itself is often inherited so I tend to think of this as defacto kind of inheritance.\n\n## The Box Model\n\nUnderstanding the Box Model is essential and necessary for limiting frustration when working with layout and positioning. It is one of the most fundamental concepts in CSS.\n\nThe box model is used to calculate the width and height of elements. It is a calculation step and not solely relied upon for determining the final layout and positioning of elements.\n\n**What you need to know:**\n\nEvery element in HTML is a rectangular box. Each box has four regions defining the margin, borders, padding, and content areas of an element.\n\nBy default, when you set the width of an element, this sets the width of the content area only. When you add padding, border or margin to an element, this is added in addition to the width. In practical terms this means that two elements with a width of 50%, will not fit side-by-side if padding, margin or borders are added.\n\n<img alt=\"shows the content-width within the box model\" src=\"/img/content-width.png\" style=\"width:100%; max-width:550px;\">\n\nThat's it! It’s pretty simple right? So why is this often a source of confusion? Well, you might have encountered a few situations where things seem to behave a little differently…\n\n### Fill Area\n\nWhen you set the background of an element this fills not only the content area but also the padding and border areas as well.\n\n<img style=\"width:100%; max-width:550px;\" alt=\"shows the fill area within the box model\" src=\"/img/fill-area.png\" >\n\nConceptually we think of an HTML element as a single thing, so it's easy to think that the visual boundaries of an element are equal to its width however this is not the case. Although the visual boundaries of an element include the padding and border areas the width property is applied explicitly to the content box.\n\n**Note:** Altering the `box-sizing` property can change this behaviour.\n\n### Width Auto\n\nAnother source of potential confusion is how `width: auto` works. A width of auto is the default setting for most HTML elements and for block elements such as divs and paragraphs, `auto` will calculate the width so that the margin, border, padding and content areas combined all fit within the available space.\n\nIn this situation it can feel like adding padding and margins push inwards on the content, but in reality, the width is being recalculated to ensure everything fits. By comparison when setting a width of `100%`, the content area will fill the space available regardless of margin, padding and borders.\n\n<img style=\"width:100%; max-width:550px;\" alt=\"shows how width auto works compared to width:100%\" src=\"/img/width-auto.png\" >\n\n### Box-sizing\n\nThe box-sizing property changes the way the box model works. When box-sizing is set to `border-box` padding and border will reduce the inner width of the content area, rather than adding to the overall width of an element. This means that a width of an element is now the same as its visual width.\n\n<img style=\"width:100%; max-width:550px;\" alt=\"shows how box-sizing:border-box works\" src=\"/img/box-sizing.png\" >\n\nA lot of people prefer this, and if you're building a grid system, or any other kind of layout that requires aligning items horizontally, this can be much more intuitive way to work.\n\n### Collapsing margins\n\nIt can be really confusing when margins collapse unexpectedly and you don't know what is going on. Margins will sometimes collapse when two or more adjacent vertical margins touch and they are not separated with padding or border. A collapsing margin can also occur if the margin of a child element extends into that of its parent and is not separated by padding.\n\nMargins will not collapse if elements are absolutely positioned, floated, or have a different [formatting context](#formatting-contexts), as well as in a few other less likely situations.\n\nIf you're confused that’s ok. The rules for when margins will and will not collapse are complicated. The main thing you need to know is when elements don’t have padding or borders, vertical margins can collapse.\n\nIf you need more detail CSS Tricks has a wonderful [explanation of collapsing margins](https://css-tricks.com/what-you-should-know-about-collapsing-margins/).\n\n## The Visual Formatting Model\n\nWhile the box model calculates an element's dimensions, it’s the Visual Formatting Model that is responsible for determining the layout of these boxes. The Visual Formatting Model takes into account the box type, [positioning scheme](#positioning-schemes), relationships between elements and constraints imposed by content to determine the final position and presentation of each element on the page.\n\n**What you need to know:**\n\nThe visual formatting model traverses the document tree and generates one or more boxes required to render elements according to the CSS box model. The CSS `display` property plays a key role in determining how an element participates in the current formatting context and positioning scheme. Together these pieces determine the final layout and positioning of elements.\n\nThis is a complex step and was by far the most difficult to try and summarise. If you don't follow everything that’s ok. Understanding how we manipulate [positioning schemes](#positioning-schemes) and [formatting contexts](#formatting-contexts) through the CSS properties is a good start. If you can follow the interplay between different pieces of this model you are doing better than most. At very least you should know that they exist.\n\n## Display types\n\nWe know that setting the `display` property in CSS determines the how an element is rendered but it's not immediately clear how this works. In fact sometimes, it can even seem unpredictable.\n\nThis is because the display property determines the element's 'box type’. This hidden property consists of an inner display type, and an outer display type which together help determine how the element is rendered.\n\nThe outer display type usually resolves to either 'block' or ‘inline’ and is pretty much consistent what you expect of theses `display` properties in CSS. Technically speaking the outer display type dictates how an element participates in its parent [formatting context](#formatting-contexts).\n\nThe inner display type determines what [formatting context](#formatting-contexts) that element will generate. This will impact how its child elements are laid out.\n\nThink of how a Flexbox container works. Its outer type is `block` and its inner type is `flex`. Its children can also have an outer type of block, but their layout is influenced by the formatting context of the Flexbox container.\n\nOne way of thinking about this is that the responsibility for display is shared between an element and it's parent element.\n\n## Formatting contexts\n\nFormatting context are all about layout. They are the rules that govern the layout of elements inside a container and how they interact with each other.\n\nSome formatting contexts can be established directly on containers such as through the use of `display` values `flex`, `grid` or `table`. Other types such as block and inline formatting contexts are created as required by the browser.\n\n**Note:** At one time, because of the way it interacts with floats, it was important to understand how to make the browser establish a new block formatting context. Elements with a block formatting context will contain floats. This is not as important today as it once was. In fact it's not even how modern [clearfix techniques](https://css-tricks.com/snippets/css/clear-fix/) work.\n\n## Positioning schemes\n\nA box can be laid out according to one of three positioning schemes. These are [Normal flow](#normal-flow), [Floats ](#floats)and [Absolute positioning](#absolute-positioning). You are probably familiar with floats and absolute positioning because we interact with these more directly when writing CSS. Normal flow is just a name for the default positioning scheme when an element is not floated or positioned.\n\n### Normal flow\n\nNormal Flow describes the default positioning scheme and 'in-flow' describes elements that conform to this. You could consider in flow to be the natural position of elements laid out according to their source order and [formatting context](#formatting-contexts).\n\n### Floats\n\nFloat is a CSS property that causes an element to be taken out of the normal flow and shifted to the left or right as far as possible, until it touches the edge of its containing box or another floated element. When this happens, text and inline elements will wrap around the floated elements.\n\nNormally if not set, the height of an element will adjust to fit all of its descendant elements. When elements are floated they are taken out of flow and this means containers will not adjust their height to clear them.\n\nIt is this behaviour that allows multiple lines of text, heading and other elements to fluid wrap around floated content. But sometimes this is problematic. Clearfixes and establishing a new block formatting context will causes a container to clear its floated children. This technique has allowed floats to be used for layout which has been a corner-stone of web development techniques for a long time. It's still important to know but this is gradually being replaced with newer layout techniques such as Flexbox and Grid.\n\n### Absolute positioning\n\nElements with absolute positioning are removed from the flow entirely and unlike floated elements they have no impact on surrounding content.\n\nA container with relative positioning allows you to control the offset of descendant elements using absolute positioning.\n\nRelatively positioned elements can also be given an offset but this offset is relative to the element's normal position not another relative container.\n\nCSS properties `top`, `bottom`, `left` and `right` are used to calculate 'box offsets'. These properties are not two dimensional offsets but allow positioning of each edge, relative to its container’s content box.\n\nPositioned elements with overlapping offsets can result in elements occupying the same space. A stacking context is used to resolve this.\n\n### Stacking contexts\n\nStacking context determines the order that things are rendered to the page. You can think of a stacking context like a layer. Layers on the bottom of the stack are painted first and elements higher up the stack appear on top.\n\nPlacing a `z-index` on an element that is absolutely or relatively positioned is the most common way to establish a new stacking context. But there are a number of other ways a stacking context can be formed including, setting opacity, transforms, filters or using the `will-change` property.\n\nSome of these reasons are not intuitive and have more to do with rendering performance than developers expectations. It helps to understand that these layers can be rendered separately by the browsers. As a result it can sometimes be useful to intentionally to create a new stacking context for performance reasons.\n\nSetting a z-index has no effect unless a stacking context is established. The higher the z-index the higher up the stack the layer is placed.\n\nOne of the most confusing parts about stacking is that a new stacking context can be established inside an existing one. This means you can have layers of layers.\n\nIn this situation, it's not always a case of the highest z-index wins.\n\n## That's it!\n\nAlmost 3000 words and I've only briefly touched some of the important hidden parts of CSS. If you’ve read this in full congratulations and please be sure to let me know, because you deserve some kind of reward!\n\nIf you've just read some parts that’s ok too. I hope I’ve managed to clarify something or give a general insight into the processes involved. It’s been a real challenge to explain this stuff in simple terms without sacrificing accuracy. I hope got it right.\n\n",
      "internal": {
        "type": "contentfulWritingBodyTextNode",
        "mediaType": "text/markdown",
        "content": "\nIf you use CSS in your daily work, your primary goal is probably focused on making things 'look right'. How this is achieved is often far less important than the end result. This means we care less about how CSS works than the correct syntax and visual results.\n\nYou may not have realised it, but the visual results of CSS are often an indirect consequence of manipulating hidden properties. Some CSS properties such as `background-color` have a direct and obvious relationship with what you see. While others such as `display` remain ambiguous to many of us because the results seem highly dependant on context.\n\nI doubt many developers could describe in simple terms what setting `display: block` actually does. At best you probably have an intuitive understanding of how properties like this work. That's ok, you can have a pretty good wrangle of CSS without understanding the underlying principles. Although, this might be knowing the solution without necessarily understanding the problem.\n\nIf this describes you, that's ok. I learnt how to work with CSS, long before I understood *how* it worked. I guess that doesn’t make it ok, ...but at least you’re not alone!\n\nThe underlying features of CSS are complicated and intentionally abstracted, yet we can't be completely unaware of them. Concepts such as the Box Model, Cascade and Specificity will be familiar to many of us. Although they are often misunderstood, knowing a little of how these work can help us write better CSS.\n\nThe same can be said for many other hidden parts of CSS. The problem with understanding these better is that the barrier to entry is even higher. It often feels like nothing can be explained in isolation. You need to know everything before you can understand the smallest part of the process.\n\nBecause of this I want to attempt to shed some light on the invisible parts of CSS, touching only on what you need to know and hopefully explaining the process in a logical order, so that you can gain a better understand of how CSS actually works.\n\nThis is a long article so if you want to skip ahead to one of these sections, I'm totally fine with that:\n\n- [Overview of the rendering process](#overview-of-the-rendering-process)\n- [Cascade](#cascade)\n- [The Box Model](#the-box-model)\n\t- [Fill Area](#fill-area)\n\t- [Width Auto](#width-auto)\n\t- [Box-sizing](#box-sizing)\n\t- [Collapsing margins](#collapsing-margins)\n- [The Visual Formatting Model](#the-visual-formatting-model)\n- [Display types](#display-types)\n- [Formatting contexts](#formatting-contexts)\n- [Positioning schemes](#positioning-schemes)\n\t- [Normal flow](#normal-flow)\n\t- [Floats](#floats)\n\t- [Absolute positioning](#absolute-positioning)\n\t- [Stacking context](#stacking-contexts)\n\n## Overview of the rendering process\n\nWhen you load an HTML document there is a lot that happens in order for that page to render.\n\nThe first step is to parse the HTML document. From this the browser builds a 'document tree'. A tree structure is a way of representing information with an obvious hierarchy like HTML. Elements in a tree can be described in terms similar to a family tree, such as descendants, parents, children and siblings.\n\nYou might have heard the term DOM. This stands for Document Object Model. It is an extension of the document tree structure, and is used to store and manipulate information about the content of a web document.\n\nAs HTML is being parsed, stylesheets and other resources are fetched. Style declarations are interpreted and resolved through a process known as the [Cascade](#cascade).\n\nDuring this process the final values of CSS properties are resolved. After calculation these values may be different to what is written in our stylesheets. For example keywords like `auto` and relative units are assigned real values, and inherited values are applied. These computed values are stored in a tree, similar to elements in the DOM, in what is unsurprisingly called the CSS Object Model or CSSOM.\n\nIt is now possible to begin the process of rendering the page. The first step in this process is the calculation of [the Box Model](#the-box-model). This is an important step for working out the size and spacing of elements, although not their final position.\n\nLess well known than the [Box Model](#the-box-model) is a process called the [Visual Formatting Model](#the-visual-formatting-model). This process determines the layout and positioning of elements on the page. It encompases some concepts you might already be familiar with such as [positioning schemes](#positioning-schemes), [formatting contexts](#formatting-contexts), [display modes](#display-types), and [stacking contexts](#stacking-contexts).\n\nFinally the page is rendered.\n\nThere might be a few terms in the paragraphs above that you are not yet familiar with. If so, what's most important is to understand that the [Cascade](#cascade), the [Box Model](#the-box-model), and the [Visual Formatting Model](#the-visual-formatting-model) are the key steps involved in interpreting, processing and rendering HTML and CSS. I’ve skipped over a lot of detail when describing each of these so we’re now going to look at these 3 steps more closely.\n\n## Cascade\n\nThe cascade is probably one of the most misunderstood features of CSS. It refers to the process of combining different stylesheets and resolving conflicts between CSS selectors.\n\nThe cascade looks at the importance, origin, specificity, and order of declarations to determine which style rules to use.\n\n**What you need to know:**\n\nMost websites have multiple stylesheets. Typically styles are added with a `link` tag that references a css file, or with a `style` tag in the HTML body. Even the most basic page will have default styles provided by the browser. This default stylesheet is sometimes called the user-agent stylesheet.\n\nDuring the cascade stylesheets are interpreted in the following order:\n\n1. !important declarations\n2. Author stylesheets\n3. Browser default stylesheets\n\n**Note:** I've skipped over user stylesheets here because they are not a common thing anymore and probably wouldn’t factor in consideration for anyone reading this.\n\nAfter combining these sources, if multiple rules apply to the same element, specificity is used to determine which rules to apply.\n\n### Specificity\n\nSpecificity is a weighting given to selectors. It's a common mistake to think of this as a single number. It’s actually 4 separate numbers or 4 categories of weighting.\n\nTo calculate specificity, count the number of:\n\n1. IDs,\n2. classes, attributes and pseudo-classes,\n3. elements and pseudo-elements\n\nFor example: `#nav .selected:hover > a::before` will be 1, 2, 2.\n\nNo number of classes will ever have a higher specificity than an ID. When comparing selectors you compare the specificity of IDs first. Only if these match do you compare the value of classes, attributes and pseudo-classes and finally, if still equal, elements and pseudo-elements.\n\nIf specificity is equal in every category, the last declaration in the source takes precedence.\n\n\nYes! I know I said 4 categories. Inlines styles have a higher specificity than IDs. Although they are technically the first category in specificity calculations you don't typically end up with competing inline styles, so it’s easier just remember that inline styles will always win specificity.\n\n**Important note:** !important declarations are not factored in specificity calculations but they do have a greater precedence than normal declarations in the cascade.\n\n### Inheritance\n\nInheritance is not part of the cascade but I've included it here because it is often discussed in conjunction with the cascade.\n\nInheritance is the process where values that apply to an element can be passed on (or inherited) by its children.\n\nYou are likely familiar with the fact that font properties, when applied to the body or another container element, are also inherited by every element inside that container. This is inheritance.\n\nNot all properties are inherited by default. Understanding inheritance is key to writing more deliberate and less verbose CSS. Forcing inheritance with the `inherit` keyword can be incredibly useful.\n\n**Note:** Some properties are such as `border-color` have a default value of `currentcolor`. This means they will use the value set on the `color` property. This default value is not the same thing as inheritance. Although the color property itself is often inherited so I tend to think of this as defacto kind of inheritance.\n\n## The Box Model\n\nUnderstanding the Box Model is essential and necessary for limiting frustration when working with layout and positioning. It is one of the most fundamental concepts in CSS.\n\nThe box model is used to calculate the width and height of elements. It is a calculation step and not solely relied upon for determining the final layout and positioning of elements.\n\n**What you need to know:**\n\nEvery element in HTML is a rectangular box. Each box has four regions defining the margin, borders, padding, and content areas of an element.\n\nBy default, when you set the width of an element, this sets the width of the content area only. When you add padding, border or margin to an element, this is added in addition to the width. In practical terms this means that two elements with a width of 50%, will not fit side-by-side if padding, margin or borders are added.\n\n<img alt=\"shows the content-width within the box model\" src=\"/img/content-width.png\" style=\"width:100%; max-width:550px;\">\n\nThat's it! It’s pretty simple right? So why is this often a source of confusion? Well, you might have encountered a few situations where things seem to behave a little differently…\n\n### Fill Area\n\nWhen you set the background of an element this fills not only the content area but also the padding and border areas as well.\n\n<img style=\"width:100%; max-width:550px;\" alt=\"shows the fill area within the box model\" src=\"/img/fill-area.png\" >\n\nConceptually we think of an HTML element as a single thing, so it's easy to think that the visual boundaries of an element are equal to its width however this is not the case. Although the visual boundaries of an element include the padding and border areas the width property is applied explicitly to the content box.\n\n**Note:** Altering the `box-sizing` property can change this behaviour.\n\n### Width Auto\n\nAnother source of potential confusion is how `width: auto` works. A width of auto is the default setting for most HTML elements and for block elements such as divs and paragraphs, `auto` will calculate the width so that the margin, border, padding and content areas combined all fit within the available space.\n\nIn this situation it can feel like adding padding and margins push inwards on the content, but in reality, the width is being recalculated to ensure everything fits. By comparison when setting a width of `100%`, the content area will fill the space available regardless of margin, padding and borders.\n\n<img style=\"width:100%; max-width:550px;\" alt=\"shows how width auto works compared to width:100%\" src=\"/img/width-auto.png\" >\n\n### Box-sizing\n\nThe box-sizing property changes the way the box model works. When box-sizing is set to `border-box` padding and border will reduce the inner width of the content area, rather than adding to the overall width of an element. This means that a width of an element is now the same as its visual width.\n\n<img style=\"width:100%; max-width:550px;\" alt=\"shows how box-sizing:border-box works\" src=\"/img/box-sizing.png\" >\n\nA lot of people prefer this, and if you're building a grid system, or any other kind of layout that requires aligning items horizontally, this can be much more intuitive way to work.\n\n### Collapsing margins\n\nIt can be really confusing when margins collapse unexpectedly and you don't know what is going on. Margins will sometimes collapse when two or more adjacent vertical margins touch and they are not separated with padding or border. A collapsing margin can also occur if the margin of a child element extends into that of its parent and is not separated by padding.\n\nMargins will not collapse if elements are absolutely positioned, floated, or have a different [formatting context](#formatting-contexts), as well as in a few other less likely situations.\n\nIf you're confused that’s ok. The rules for when margins will and will not collapse are complicated. The main thing you need to know is when elements don’t have padding or borders, vertical margins can collapse.\n\nIf you need more detail CSS Tricks has a wonderful [explanation of collapsing margins](https://css-tricks.com/what-you-should-know-about-collapsing-margins/).\n\n## The Visual Formatting Model\n\nWhile the box model calculates an element's dimensions, it’s the Visual Formatting Model that is responsible for determining the layout of these boxes. The Visual Formatting Model takes into account the box type, [positioning scheme](#positioning-schemes), relationships between elements and constraints imposed by content to determine the final position and presentation of each element on the page.\n\n**What you need to know:**\n\nThe visual formatting model traverses the document tree and generates one or more boxes required to render elements according to the CSS box model. The CSS `display` property plays a key role in determining how an element participates in the current formatting context and positioning scheme. Together these pieces determine the final layout and positioning of elements.\n\nThis is a complex step and was by far the most difficult to try and summarise. If you don't follow everything that’s ok. Understanding how we manipulate [positioning schemes](#positioning-schemes) and [formatting contexts](#formatting-contexts) through the CSS properties is a good start. If you can follow the interplay between different pieces of this model you are doing better than most. At very least you should know that they exist.\n\n## Display types\n\nWe know that setting the `display` property in CSS determines the how an element is rendered but it's not immediately clear how this works. In fact sometimes, it can even seem unpredictable.\n\nThis is because the display property determines the element's 'box type’. This hidden property consists of an inner display type, and an outer display type which together help determine how the element is rendered.\n\nThe outer display type usually resolves to either 'block' or ‘inline’ and is pretty much consistent what you expect of theses `display` properties in CSS. Technically speaking the outer display type dictates how an element participates in its parent [formatting context](#formatting-contexts).\n\nThe inner display type determines what [formatting context](#formatting-contexts) that element will generate. This will impact how its child elements are laid out.\n\nThink of how a Flexbox container works. Its outer type is `block` and its inner type is `flex`. Its children can also have an outer type of block, but their layout is influenced by the formatting context of the Flexbox container.\n\nOne way of thinking about this is that the responsibility for display is shared between an element and it's parent element.\n\n## Formatting contexts\n\nFormatting context are all about layout. They are the rules that govern the layout of elements inside a container and how they interact with each other.\n\nSome formatting contexts can be established directly on containers such as through the use of `display` values `flex`, `grid` or `table`. Other types such as block and inline formatting contexts are created as required by the browser.\n\n**Note:** At one time, because of the way it interacts with floats, it was important to understand how to make the browser establish a new block formatting context. Elements with a block formatting context will contain floats. This is not as important today as it once was. In fact it's not even how modern [clearfix techniques](https://css-tricks.com/snippets/css/clear-fix/) work.\n\n## Positioning schemes\n\nA box can be laid out according to one of three positioning schemes. These are [Normal flow](#normal-flow), [Floats ](#floats)and [Absolute positioning](#absolute-positioning). You are probably familiar with floats and absolute positioning because we interact with these more directly when writing CSS. Normal flow is just a name for the default positioning scheme when an element is not floated or positioned.\n\n### Normal flow\n\nNormal Flow describes the default positioning scheme and 'in-flow' describes elements that conform to this. You could consider in flow to be the natural position of elements laid out according to their source order and [formatting context](#formatting-contexts).\n\n### Floats\n\nFloat is a CSS property that causes an element to be taken out of the normal flow and shifted to the left or right as far as possible, until it touches the edge of its containing box or another floated element. When this happens, text and inline elements will wrap around the floated elements.\n\nNormally if not set, the height of an element will adjust to fit all of its descendant elements. When elements are floated they are taken out of flow and this means containers will not adjust their height to clear them.\n\nIt is this behaviour that allows multiple lines of text, heading and other elements to fluid wrap around floated content. But sometimes this is problematic. Clearfixes and establishing a new block formatting context will causes a container to clear its floated children. This technique has allowed floats to be used for layout which has been a corner-stone of web development techniques for a long time. It's still important to know but this is gradually being replaced with newer layout techniques such as Flexbox and Grid.\n\n### Absolute positioning\n\nElements with absolute positioning are removed from the flow entirely and unlike floated elements they have no impact on surrounding content.\n\nA container with relative positioning allows you to control the offset of descendant elements using absolute positioning.\n\nRelatively positioned elements can also be given an offset but this offset is relative to the element's normal position not another relative container.\n\nCSS properties `top`, `bottom`, `left` and `right` are used to calculate 'box offsets'. These properties are not two dimensional offsets but allow positioning of each edge, relative to its container’s content box.\n\nPositioned elements with overlapping offsets can result in elements occupying the same space. A stacking context is used to resolve this.\n\n### Stacking contexts\n\nStacking context determines the order that things are rendered to the page. You can think of a stacking context like a layer. Layers on the bottom of the stack are painted first and elements higher up the stack appear on top.\n\nPlacing a `z-index` on an element that is absolutely or relatively positioned is the most common way to establish a new stacking context. But there are a number of other ways a stacking context can be formed including, setting opacity, transforms, filters or using the `will-change` property.\n\nSome of these reasons are not intuitive and have more to do with rendering performance than developers expectations. It helps to understand that these layers can be rendered separately by the browsers. As a result it can sometimes be useful to intentionally to create a new stacking context for performance reasons.\n\nSetting a z-index has no effect unless a stacking context is established. The higher the z-index the higher up the stack the layer is placed.\n\nOne of the most confusing parts about stacking is that a new stacking context can be established inside an existing one. This means you can have layers of layers.\n\nIn this situation, it's not always a case of the highest z-index wins.\n\n## That's it!\n\nAlmost 3000 words and I've only briefly touched some of the important hidden parts of CSS. If you’ve read this in full congratulations and please be sure to let me know, because you deserve some kind of reward!\n\nIf you've just read some parts that’s ok too. I hope I’ve managed to clarify something or give a general insight into the processes involved. It’s been a real challenge to explain this stuff in simple terms without sacrificing accuracy. I hope got it right.\n\n",
        "contentDigest": "304ce49c15e3823f7a99a0b99dadc2f5",
        "owner": "gatsby-source-contentful"
      }
    },
    "f3ba2b4b-6e7f-5870-b7cf-5cc21e58ce8c": {
      "id": "f3ba2b4b-6e7f-5870-b7cf-5cc21e58ce8c",
      "parent": "9607cf50-94d1-56ae-90fc-55c96e6add74",
      "children": [
        "31579d99-c3aa-5e9f-922a-b764fad2b56f"
      ],
      "description": "Details of my CSS workflow and frontend development processes in 2015.",
      "internal": {
        "type": "contentfulWritingDescriptionTextNode",
        "mediaType": "text/markdown",
        "content": "Details of my CSS workflow and frontend development processes in 2015.",
        "contentDigest": "9f18cac0e3b67a676e2ec04ae1baa65c",
        "owner": "gatsby-source-contentful"
      }
    },
    "fb571099-b2bd-50d9-86fa-bac3fea518cb": {
      "id": "fb571099-b2bd-50d9-86fa-bac3fea518cb",
      "parent": "9607cf50-94d1-56ae-90fc-55c96e6add74",
      "children": [
        "9f0239cb-b07a-5817-b4ea-7cca5194ad31"
      ],
      "body": "When starting a new project with new developers one of the first things I want to do is get on the same page in terms of how we structure and manage CSS.\n\nThere are so many methodologies and guidelines today that I wonder why you would bother writing your own detailed documentation.\n\nIt's pretty simple choose a methodology, choose a set of guidelines and choose a build process.\n\n### Methodologies\n\n  - [BEM](https://en.bem.info/)\n  - [SMACSS](https://smacss.com/)\n  - [OOCSS](http://www.smashingmagazine.com/2011/12/12/an-introduction-to-object-oriented-css-oocss/)\n\n### Guidelines\n\n  - [codeguide.co](http://codeguide.co/#css)\n  - [cssguidelin.es](http://cssguidelin.es/)\n  - [idiomatic-css](https://github.com/necolas/idiomatic-css)\n\nIt doesn't matter which set of methodologies or guidelines you prefer at the end of the day consistency is what you are after. You could just place these all on a big wheel and spin it.\n\nThe problem we might have with this approach is they overlap, methodologies wander into the territory of guidelines, and guidelines get opinionated our build tools and processes. In my view we'd be better off if there were clearer guidelines for our guidelines. No, I'm not *actually* suggesting we write guidelines about guidelines. But if methodologies were primarily about organisation, structure and other big picture stuff, and guidelines were mostly about the style, formatting and other fine detail, we'd be more able to mix and match.\n\nSo what do you do about that short of specifying every detail? I recently came across [Chris Coyier's tour of CodePen's CSS](http://codepen.io/chriscoyier/blog/codepens-css) which was a response to [Ian Feather's tour of Lonely Planet's CSS](http://ianfeather.co.uk/css-at-lonely-planet/), which was in response to [Mark Otto's tour of GitHub's CSS](http://markdotto.com/2014/07/23/githubs-css/). I promise I am not going to add another 'in response' article to add to that chain! But it did get me thinking. This is the perfect way to state your preferred methodologies and guidelines and how you apply them.\n\nRather than doing this as a review of how you work what if you did this *before* starting a project as an agreed way of how you would like to work? You could state how strictly you follow certain guidelines, the things that matter most and where you are more agnostic. You can list your key points of difference and detail your preferred build process and importantly the reasons for these choices. It seems like a much faster way to arrive at a consensus in a new team.\n\nSo I've written down how I CSS for a typical website project and I thought I'd share it. Remember this is how I like to CSS and I'm not saying this is how you should CSS, or even that this always works for me. I'll be flattered if you find this useful or apply this method for arriving at a consensus within your team. But there is no expectation that what I have written is right for you.\n\n## How I CSS\n\n  - [I follow SMACSS conventions](#css-architecture)\n  - [I use SCSS](#preprocessors)\n  - [I use Autoprefixer](#autoprefixer)\n  - [I use CSSLint](#linting)\n  - [I comment extensively](#comments-docs)\n  - [I use Grunt for my build process](#build-it)\n  - [I don't always follow my own advice](#human-am-i)\n\n<h3 id=\"css-architecture\">CSS Architecture</h3>\n\nI lean towards the naming conventions in SMACSS and generally aim to structure my CSS according to these guidelines. However I also prefer common-sense over strict adherence to naming conventions and guidelines.\n\nI try to follow [these guidelines](http://mdo.github.io/code-guide/#css) by Mark Otto for the smaller things like formatting and declaration order. I also have immense respect for Harry Robert's [CSS Guidelines](http://cssguidelin.es/) but my personal preferences differ (slightly) from Harry's and his guidelines are so extensive it's easier for me to list my points of difference from Mark's code guide.\n\nSome of my key personal preferences include:\n\n  - using 'classy' selectors and not IDs\n  - don't nest media queries, it makes me sad :(\n  - I like tabs, but I don't hate spaces so don't hate me\n  - unlike this bullet point, I try to keep class names and selectors chains as short as possible without sacrificing clarity\n  - I care about accessibility and valid mark-up\n  - I like REM units, but I'm happy to use the odd pixel\n\n<h3 id=\"preprocessors\">Preprocessors</h3>\n\nI use SASS and the SCSS syntax because it's widely used and understood. But more importantly because it works for me.\n\nSource SCSS files are compiled into two separate stylesheets:\n\n  - a bare minimum set of styles for older devices and <IE9\n  - a fully featured and enhanced version for everything else\n\nI minifiy my CSS files straight out of SASS. I also generate source map files and publish my .SCSS files to production.  \n\nI did use LESS for a long time because it felt more declarative like CSS is 'meant' to be, however also I enjoyed creating wild experimental things with SASS. Eventually I made the switch using SASS almost exclusively, in part because of its growing popularity. I know, I'm a sell-out and a sheep!\n\n**Note:** I don't get too excited about my SASS (in production). I keep it basic with variables, keep mixins simple, use color and math functions, don't nest too deeply and don't try to be clever or fancy.\n\nI also frequently inline my critical CSS and load additional styles asynchronously for better performance using the method described by Scott Jhel in [How we make RWD sites load fast as heck](https://www.filamentgroup.com/lab/performance-rwd.html) the results of this can be amazingly noticeable.\n\n<h3 id=\"autoprefixer\">Autoprefixer</h3>\n\nI don't use any vendor prefixes in my SCSS or use mixins to generate them. Rather I write regular CSS according to the specification and run Autoprefixer as a post process (after SASS produces the CSS files). Not only is this easier, but it produces a better quality result because developers are human and sometimes forget to use prefixes and mixins. It also allows me to easily remove large chunks of legacy code by simply updating the target browsers in the Autoprefixer config.\n\n<h3 id=\"linting\">Linting</h3>\n\nRather than maintaining my own set of rules for code formatting I mostly follow suggestions from [Mark Otto's code-guide](http://mdo.github.io/code-guide/#css)\n\nI differ in some respects such as I prefer using tabs rather than 2 spaces. But importantly, I don't get upset about this or any other code formatting convention. I understand that each developer has their own habits and preferences. When working together it is nice when if our code looks the same and is reasonably tidy, so that's why my build process usually includes linting.\n\n<h3 id=\"comments-docs\">Commenting &amp; Documentation</h3>\n\nI am liberal with my use of comments. No one has ever complained a stylesheet is over documented. Comments range from highly structured block declarations describing modules to silly jokes and apologies for hacks, both are good.\n\nIdeally each UI component, utility class, layout module and mixin should have a block comment briefly describing it.\n\nIn the past I've tried a whole range of automated documentation tools for SASS and CSS. My \"professional\" opinion is they all suck a little bit, so I don't get too hung up about it. When you are working with a team of developers a little bit of sucky documentation is often better than none.\n\nAt the end of the day documentation is made for humans and machines are only good at providing us a with the templates and structure. You need to put in real work to get good CSS documentation and this is only good if someone is going to read it. Find the right balance of documentation for your project, it might be none or it might be a lot.\n\nI think of the [lonely planet style guide](http://rizzo.lonelyplanet.com/styleguide/) and the process described by [Ian Feather](http://ianfeather.co.uk/a-maintainable-style-guide/) as the standard we should be aiming for.\n\n<h3 id=\"build-it\">Build process</h3>\n\nI chose Grunt to string together the various tasks that help me build and maintain my stylesheets:\n\nLinting -> Preprocessor -> Autoprefixer -> CSS\n\nI probably should have chosen Gulp cause word is it's much cooler now, but at the end of the day I just want to keep my build process as simple as possible and Grunt has allowed me to do this. I try not to over engineer the build process.\n\n<h3 id=\"human-am-i\">I am a Human</h3>\n\nFinally I should say that at best I do this only about 60-70% of the time. Sometimes for small projects I very loosely apply these guidelines or don't follow them at all. Sometimes I'm lazy or tired or I'm tricked into thinking some marketing element will only be on the homepage for \"2 weeks absolute maximum\" and it's Friday so I just do it quickly. Two years later it's still there. I'm ok with that, these are only guidelines and we are humans not machines.\n\n**Final disclaimer**: Things are constantly changing. This might not be how I CSS in the future. And ok, I guess this is kind of an 'in response' article.\n\n## You might like\n\n  - [Chris Coyier's tour of CodePen's CSS](http://codepen.io/chriscoyier/blog/codepens-css)\n  - [Ian Feather's tour of Lonely Planet's CSS](http://ianfeather.co.uk/css-at-lonely-planet/)\n  - [Mark Otto's tour of GitHub's CSS](http://markdotto.com/2014/07/23/githubs-css/).\n",
      "internal": {
        "type": "contentfulWritingBodyTextNode",
        "mediaType": "text/markdown",
        "content": "When starting a new project with new developers one of the first things I want to do is get on the same page in terms of how we structure and manage CSS.\n\nThere are so many methodologies and guidelines today that I wonder why you would bother writing your own detailed documentation.\n\nIt's pretty simple choose a methodology, choose a set of guidelines and choose a build process.\n\n### Methodologies\n\n  - [BEM](https://en.bem.info/)\n  - [SMACSS](https://smacss.com/)\n  - [OOCSS](http://www.smashingmagazine.com/2011/12/12/an-introduction-to-object-oriented-css-oocss/)\n\n### Guidelines\n\n  - [codeguide.co](http://codeguide.co/#css)\n  - [cssguidelin.es](http://cssguidelin.es/)\n  - [idiomatic-css](https://github.com/necolas/idiomatic-css)\n\nIt doesn't matter which set of methodologies or guidelines you prefer at the end of the day consistency is what you are after. You could just place these all on a big wheel and spin it.\n\nThe problem we might have with this approach is they overlap, methodologies wander into the territory of guidelines, and guidelines get opinionated our build tools and processes. In my view we'd be better off if there were clearer guidelines for our guidelines. No, I'm not *actually* suggesting we write guidelines about guidelines. But if methodologies were primarily about organisation, structure and other big picture stuff, and guidelines were mostly about the style, formatting and other fine detail, we'd be more able to mix and match.\n\nSo what do you do about that short of specifying every detail? I recently came across [Chris Coyier's tour of CodePen's CSS](http://codepen.io/chriscoyier/blog/codepens-css) which was a response to [Ian Feather's tour of Lonely Planet's CSS](http://ianfeather.co.uk/css-at-lonely-planet/), which was in response to [Mark Otto's tour of GitHub's CSS](http://markdotto.com/2014/07/23/githubs-css/). I promise I am not going to add another 'in response' article to add to that chain! But it did get me thinking. This is the perfect way to state your preferred methodologies and guidelines and how you apply them.\n\nRather than doing this as a review of how you work what if you did this *before* starting a project as an agreed way of how you would like to work? You could state how strictly you follow certain guidelines, the things that matter most and where you are more agnostic. You can list your key points of difference and detail your preferred build process and importantly the reasons for these choices. It seems like a much faster way to arrive at a consensus in a new team.\n\nSo I've written down how I CSS for a typical website project and I thought I'd share it. Remember this is how I like to CSS and I'm not saying this is how you should CSS, or even that this always works for me. I'll be flattered if you find this useful or apply this method for arriving at a consensus within your team. But there is no expectation that what I have written is right for you.\n\n## How I CSS\n\n  - [I follow SMACSS conventions](#css-architecture)\n  - [I use SCSS](#preprocessors)\n  - [I use Autoprefixer](#autoprefixer)\n  - [I use CSSLint](#linting)\n  - [I comment extensively](#comments-docs)\n  - [I use Grunt for my build process](#build-it)\n  - [I don't always follow my own advice](#human-am-i)\n\n<h3 id=\"css-architecture\">CSS Architecture</h3>\n\nI lean towards the naming conventions in SMACSS and generally aim to structure my CSS according to these guidelines. However I also prefer common-sense over strict adherence to naming conventions and guidelines.\n\nI try to follow [these guidelines](http://mdo.github.io/code-guide/#css) by Mark Otto for the smaller things like formatting and declaration order. I also have immense respect for Harry Robert's [CSS Guidelines](http://cssguidelin.es/) but my personal preferences differ (slightly) from Harry's and his guidelines are so extensive it's easier for me to list my points of difference from Mark's code guide.\n\nSome of my key personal preferences include:\n\n  - using 'classy' selectors and not IDs\n  - don't nest media queries, it makes me sad :(\n  - I like tabs, but I don't hate spaces so don't hate me\n  - unlike this bullet point, I try to keep class names and selectors chains as short as possible without sacrificing clarity\n  - I care about accessibility and valid mark-up\n  - I like REM units, but I'm happy to use the odd pixel\n\n<h3 id=\"preprocessors\">Preprocessors</h3>\n\nI use SASS and the SCSS syntax because it's widely used and understood. But more importantly because it works for me.\n\nSource SCSS files are compiled into two separate stylesheets:\n\n  - a bare minimum set of styles for older devices and <IE9\n  - a fully featured and enhanced version for everything else\n\nI minifiy my CSS files straight out of SASS. I also generate source map files and publish my .SCSS files to production.  \n\nI did use LESS for a long time because it felt more declarative like CSS is 'meant' to be, however also I enjoyed creating wild experimental things with SASS. Eventually I made the switch using SASS almost exclusively, in part because of its growing popularity. I know, I'm a sell-out and a sheep!\n\n**Note:** I don't get too excited about my SASS (in production). I keep it basic with variables, keep mixins simple, use color and math functions, don't nest too deeply and don't try to be clever or fancy.\n\nI also frequently inline my critical CSS and load additional styles asynchronously for better performance using the method described by Scott Jhel in [How we make RWD sites load fast as heck](https://www.filamentgroup.com/lab/performance-rwd.html) the results of this can be amazingly noticeable.\n\n<h3 id=\"autoprefixer\">Autoprefixer</h3>\n\nI don't use any vendor prefixes in my SCSS or use mixins to generate them. Rather I write regular CSS according to the specification and run Autoprefixer as a post process (after SASS produces the CSS files). Not only is this easier, but it produces a better quality result because developers are human and sometimes forget to use prefixes and mixins. It also allows me to easily remove large chunks of legacy code by simply updating the target browsers in the Autoprefixer config.\n\n<h3 id=\"linting\">Linting</h3>\n\nRather than maintaining my own set of rules for code formatting I mostly follow suggestions from [Mark Otto's code-guide](http://mdo.github.io/code-guide/#css)\n\nI differ in some respects such as I prefer using tabs rather than 2 spaces. But importantly, I don't get upset about this or any other code formatting convention. I understand that each developer has their own habits and preferences. When working together it is nice when if our code looks the same and is reasonably tidy, so that's why my build process usually includes linting.\n\n<h3 id=\"comments-docs\">Commenting &amp; Documentation</h3>\n\nI am liberal with my use of comments. No one has ever complained a stylesheet is over documented. Comments range from highly structured block declarations describing modules to silly jokes and apologies for hacks, both are good.\n\nIdeally each UI component, utility class, layout module and mixin should have a block comment briefly describing it.\n\nIn the past I've tried a whole range of automated documentation tools for SASS and CSS. My \"professional\" opinion is they all suck a little bit, so I don't get too hung up about it. When you are working with a team of developers a little bit of sucky documentation is often better than none.\n\nAt the end of the day documentation is made for humans and machines are only good at providing us a with the templates and structure. You need to put in real work to get good CSS documentation and this is only good if someone is going to read it. Find the right balance of documentation for your project, it might be none or it might be a lot.\n\nI think of the [lonely planet style guide](http://rizzo.lonelyplanet.com/styleguide/) and the process described by [Ian Feather](http://ianfeather.co.uk/a-maintainable-style-guide/) as the standard we should be aiming for.\n\n<h3 id=\"build-it\">Build process</h3>\n\nI chose Grunt to string together the various tasks that help me build and maintain my stylesheets:\n\nLinting -> Preprocessor -> Autoprefixer -> CSS\n\nI probably should have chosen Gulp cause word is it's much cooler now, but at the end of the day I just want to keep my build process as simple as possible and Grunt has allowed me to do this. I try not to over engineer the build process.\n\n<h3 id=\"human-am-i\">I am a Human</h3>\n\nFinally I should say that at best I do this only about 60-70% of the time. Sometimes for small projects I very loosely apply these guidelines or don't follow them at all. Sometimes I'm lazy or tired or I'm tricked into thinking some marketing element will only be on the homepage for \"2 weeks absolute maximum\" and it's Friday so I just do it quickly. Two years later it's still there. I'm ok with that, these are only guidelines and we are humans not machines.\n\n**Final disclaimer**: Things are constantly changing. This might not be how I CSS in the future. And ok, I guess this is kind of an 'in response' article.\n\n## You might like\n\n  - [Chris Coyier's tour of CodePen's CSS](http://codepen.io/chriscoyier/blog/codepens-css)\n  - [Ian Feather's tour of Lonely Planet's CSS](http://ianfeather.co.uk/css-at-lonely-planet/)\n  - [Mark Otto's tour of GitHub's CSS](http://markdotto.com/2014/07/23/githubs-css/).\n",
        "contentDigest": "b35215ce036e5634fdb817b392f9b562",
        "owner": "gatsby-source-contentful"
      }
    },
    "aab62576-341d-5551-8ca3-b2de36174327": {
      "id": "aab62576-341d-5551-8ca3-b2de36174327",
      "parent": "9607cf50-94d1-56ae-90fc-55c96e6add74",
      "children": [
        "4783e06f-705c-5e04-b647-0b475e5a8116"
      ],
      "update": "This article is a little dated now. Whilst some of my processes may have changed, I think the overall message of not attempting to write and maintain a unique set of guidelines and methodologies, but articulating how you apply existing guidelines is still a good idea for front-end teams.",
      "internal": {
        "type": "contentfulWritingUpdateTextNode",
        "mediaType": "text/markdown",
        "content": "This article is a little dated now. Whilst some of my processes may have changed, I think the overall message of not attempting to write and maintain a unique set of guidelines and methodologies, but articulating how you apply existing guidelines is still a good idea for front-end teams.",
        "contentDigest": "7a74f57ca35ccfea98ab727d395ffe17",
        "owner": "gatsby-source-contentful"
      }
    },
    "cafbb96f-8489-5af7-9b6f-45908bc1638b": {
      "id": "cafbb96f-8489-5af7-9b6f-45908bc1638b",
      "parent": "d0d7dd46-3209-5714-b885-f77157e9465c",
      "children": [
        "14a33037-42a2-5e73-9e14-b46115e99403"
      ],
      "description": "Some practical examples of using calc and viewport units for fluid typography and more.",
      "internal": {
        "type": "contentfulWritingDescriptionTextNode",
        "mediaType": "text/markdown",
        "content": "Some practical examples of using calc and viewport units for fluid typography and more.",
        "contentDigest": "be176b38cc98399ba8f2d2b1e25bfe57",
        "owner": "gatsby-source-contentful"
      }
    },
    "e0cb0a30-a6cd-522f-a826-58579b181bb8": {
      "id": "e0cb0a30-a6cd-522f-a826-58579b181bb8",
      "parent": "d0d7dd46-3209-5714-b885-f77157e9465c",
      "children": [
        "9cbd10f5-d084-57d6-9bc5-e5e6a935278b"
      ],
      "body": "A few months ago I published a [fluid type technique](/writing/precise-control-responsive-typography/) that doesn't require any JavaScript. Even though I consider it experimental the technique works well enough as a progressive enhancement and it generated a lot of interest, comments and suggestions. So I thought I'd put together a bunch of examples and address some comments.\n\n## Fluid type with pixels\n\nThis is a simplified version of my original example. The minimum font size is 14px and the maximum is 22px. I've removed a redundant media query and reduced the complexity of the calc() equation.\n\n```css\n.fluid-type {\n  font-size: 14px;\n}\n\n@media screen and (min-width: 320px) {\n  .fluid-type {\n    font-size: calc(14px + 8 * ((100vw - 320px) / 960));\n  }\n}\n\n@media screen and (min-width: 1280px) {\n  .fluid-type {\n    font-size: 22px;\n  }\n}\n```\n\n### Example\n\n<p class=\"example-1\">Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean commodo ligula eget dolor. Aenean massa. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Donec quam felis, ultricies nec, pellentesque eu, pretium quis, sem. Nulla consequat massa quis enim. Donec pede justo, fringilla vel, aliquet nec, vulputate eget, arcu. In enim justo, rhoncus ut, imperdiet a, venenatis vitae, justo.</p>\n\n\n## Fluid type with Rem units\n\nThis example should have the same result as the one above when the base font size is 16px (default).\n\nIt shows that the technique works with any length unit, as long as you can use it in a media query. It also addresses comments regarding how my initial example will override user preferences for the default font size.\n\nThe only catch is that all unit types must be the same for the calc() equation to work. That's a shame because we often use different unit types for breakpoints in media queries than we do for `font-size`.\n\n\n```css\n.fluid-type {\n  font-size: 0.875rem;\n}\n\n@media screen and (min-width: 20rem) {\n  .fluid-type {\n    font-size: calc(0.875rem + 0.5 * ((100vw - 20rem) / 60));\n  }\n}\n\n@media screen and (min-width: 80rem) {\n  .fluid-type {\n    font-size: 1.375rem;\n  }\n}\n```\n\n### Example\n\n<p class=\"example-2\">Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean commodo ligula eget dolor. Aenean massa. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Donec quam felis, ultricies nec, pellentesque eu, pretium quis, sem. Nulla consequat massa quis enim. Donec pede justo, fringilla vel, aliquet nec, vulputate eget, arcu. In enim justo, rhoncus ut, imperdiet a, venenatis vitae, justo.</p>\n\n## Reverse fluid type\n\nIn this example the text gets smaller as the viewport gets larger. This might have novel uses or it might not.\n\n```css\n.fluid-type {\n  font-size: 22px;\n}\n\n@media screen and (min-width: 320px) {\n  .fluid-type {\n    font-size: calc(22px + -8 * ((100vw - 320px) / 960));\n  }\n}\n\n@media screen and (min-width: 1280px) {\n  .fluid-type {\n    font-size: 14px;\n  }\n}\n```\n\n### Example\n\n<p class=\"example-3\">Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean commodo ligula eget dolor. Aenean massa. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Donec quam felis, ultricies nec, pellentesque eu, pretium quis, sem. Nulla consequat massa quis enim. Donec pede justo, fringilla vel, aliquet nec, vulputate eget, arcu. In enim justo, rhoncus ut, imperdiet a, venenatis vitae, justo.</p>\n\n\n## Fluid line-height (Molten leading)\n\nIn this example the line-height is fluid. This is a pure CSS implementation of Wilto's [Molten leading technique](https://github.com/Wilto/Molten-Leading).\n\n```css\n.molten-leading {\n  line-height: 1.2em;\n}\n\n@media screen and (min-width: 20em) {\n  .molten-leading {\n    line-height: calc(1.2em + 0.6 * ((100vw - 20em) / 60));\n  }\n}\n\n@media screen and (min-width: 80em) {\n  .molten-leading {\n    line-height: 1.8em;\n  }\n}\n```\n\n### Example\n\n<p class=\"example-4\">Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean commodo ligula eget dolor. Aenean massa. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Donec quam felis, ultricies nec, pellentesque eu, pretium quis, sem. Nulla consequat massa quis enim. Donec pede justo, fringilla vel, aliquet nec, vulputate eget, arcu. In enim justo, rhoncus ut, imperdiet a, venenatis vitae, justo.</p>\n\n\n## Fluid box\n\nThis example shows how the technique can be applied to more than just font sizes, in this case `width`.\n\n```css\n.fluid-box {\n  width: 200px;\n}\n\n@media screen and (min-width: 320px) {\n  .fluid-box {\n    width: calc(200px + 300 * ((100vw - 320px) / 960));\n  }\n}\n\n@media screen and (min-width: 1280px) {\n  .fluid-box {\n    width: 500px;\n  }\n}\n```\n\n### Example\n\n<p class=\"example-5\">The width of this box will scale and at a different rate to the viewport.</p>\n\n## Fluid type in Sass\n\n[Indrek Paas](https://twitter.com/indrekpaas) developed a Sass mixin to help make fluid type using this technique easier. [You can find the latest fluid type Sass mixin here](http://sassmeister.com/gist/7f22e44ace49b5124eec).\n\n**Update**: I now recommend using [this mixin](https://codepen.io/MadeByMike/pen/vNrvdZ)\n\nI use a slightly modified version to generate the examples on this page.\n\n### Example:\n\n```scss\n.fluid-type {\n  @include fluid-type(320px, 1280px, 14px, 18px);\n}\n```\n\n## Fluid type in Less\n\nIf Less is how you roll I've got you covered with a [Less mixin](http://codepen.io/MadeByMike/pen/RWJyML).\n\n## Fluid type in PostCSS\n\n[Rucksack is a postCSS module](https://www.npmjs.com/package/rucksack-css) that makes use of this technique for fluid typography.\n\n\nI have a collection of [other examples on CodePen](http://codepen.io/MadeByMike/pens/tags/2/?selected_tag=responsive+typography). [Let me know](https://twitter.com/MikeRiethmuller) if you have one you'd like me to share.\n",
      "internal": {
        "type": "contentfulWritingBodyTextNode",
        "mediaType": "text/markdown",
        "content": "A few months ago I published a [fluid type technique](/writing/precise-control-responsive-typography/) that doesn't require any JavaScript. Even though I consider it experimental the technique works well enough as a progressive enhancement and it generated a lot of interest, comments and suggestions. So I thought I'd put together a bunch of examples and address some comments.\n\n## Fluid type with pixels\n\nThis is a simplified version of my original example. The minimum font size is 14px and the maximum is 22px. I've removed a redundant media query and reduced the complexity of the calc() equation.\n\n```css\n.fluid-type {\n  font-size: 14px;\n}\n\n@media screen and (min-width: 320px) {\n  .fluid-type {\n    font-size: calc(14px + 8 * ((100vw - 320px) / 960));\n  }\n}\n\n@media screen and (min-width: 1280px) {\n  .fluid-type {\n    font-size: 22px;\n  }\n}\n```\n\n### Example\n\n<p class=\"example-1\">Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean commodo ligula eget dolor. Aenean massa. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Donec quam felis, ultricies nec, pellentesque eu, pretium quis, sem. Nulla consequat massa quis enim. Donec pede justo, fringilla vel, aliquet nec, vulputate eget, arcu. In enim justo, rhoncus ut, imperdiet a, venenatis vitae, justo.</p>\n\n\n## Fluid type with Rem units\n\nThis example should have the same result as the one above when the base font size is 16px (default).\n\nIt shows that the technique works with any length unit, as long as you can use it in a media query. It also addresses comments regarding how my initial example will override user preferences for the default font size.\n\nThe only catch is that all unit types must be the same for the calc() equation to work. That's a shame because we often use different unit types for breakpoints in media queries than we do for `font-size`.\n\n\n```css\n.fluid-type {\n  font-size: 0.875rem;\n}\n\n@media screen and (min-width: 20rem) {\n  .fluid-type {\n    font-size: calc(0.875rem + 0.5 * ((100vw - 20rem) / 60));\n  }\n}\n\n@media screen and (min-width: 80rem) {\n  .fluid-type {\n    font-size: 1.375rem;\n  }\n}\n```\n\n### Example\n\n<p class=\"example-2\">Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean commodo ligula eget dolor. Aenean massa. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Donec quam felis, ultricies nec, pellentesque eu, pretium quis, sem. Nulla consequat massa quis enim. Donec pede justo, fringilla vel, aliquet nec, vulputate eget, arcu. In enim justo, rhoncus ut, imperdiet a, venenatis vitae, justo.</p>\n\n## Reverse fluid type\n\nIn this example the text gets smaller as the viewport gets larger. This might have novel uses or it might not.\n\n```css\n.fluid-type {\n  font-size: 22px;\n}\n\n@media screen and (min-width: 320px) {\n  .fluid-type {\n    font-size: calc(22px + -8 * ((100vw - 320px) / 960));\n  }\n}\n\n@media screen and (min-width: 1280px) {\n  .fluid-type {\n    font-size: 14px;\n  }\n}\n```\n\n### Example\n\n<p class=\"example-3\">Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean commodo ligula eget dolor. Aenean massa. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Donec quam felis, ultricies nec, pellentesque eu, pretium quis, sem. Nulla consequat massa quis enim. Donec pede justo, fringilla vel, aliquet nec, vulputate eget, arcu. In enim justo, rhoncus ut, imperdiet a, venenatis vitae, justo.</p>\n\n\n## Fluid line-height (Molten leading)\n\nIn this example the line-height is fluid. This is a pure CSS implementation of Wilto's [Molten leading technique](https://github.com/Wilto/Molten-Leading).\n\n```css\n.molten-leading {\n  line-height: 1.2em;\n}\n\n@media screen and (min-width: 20em) {\n  .molten-leading {\n    line-height: calc(1.2em + 0.6 * ((100vw - 20em) / 60));\n  }\n}\n\n@media screen and (min-width: 80em) {\n  .molten-leading {\n    line-height: 1.8em;\n  }\n}\n```\n\n### Example\n\n<p class=\"example-4\">Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean commodo ligula eget dolor. Aenean massa. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Donec quam felis, ultricies nec, pellentesque eu, pretium quis, sem. Nulla consequat massa quis enim. Donec pede justo, fringilla vel, aliquet nec, vulputate eget, arcu. In enim justo, rhoncus ut, imperdiet a, venenatis vitae, justo.</p>\n\n\n## Fluid box\n\nThis example shows how the technique can be applied to more than just font sizes, in this case `width`.\n\n```css\n.fluid-box {\n  width: 200px;\n}\n\n@media screen and (min-width: 320px) {\n  .fluid-box {\n    width: calc(200px + 300 * ((100vw - 320px) / 960));\n  }\n}\n\n@media screen and (min-width: 1280px) {\n  .fluid-box {\n    width: 500px;\n  }\n}\n```\n\n### Example\n\n<p class=\"example-5\">The width of this box will scale and at a different rate to the viewport.</p>\n\n## Fluid type in Sass\n\n[Indrek Paas](https://twitter.com/indrekpaas) developed a Sass mixin to help make fluid type using this technique easier. [You can find the latest fluid type Sass mixin here](http://sassmeister.com/gist/7f22e44ace49b5124eec).\n\n**Update**: I now recommend using [this mixin](https://codepen.io/MadeByMike/pen/vNrvdZ)\n\nI use a slightly modified version to generate the examples on this page.\n\n### Example:\n\n```scss\n.fluid-type {\n  @include fluid-type(320px, 1280px, 14px, 18px);\n}\n```\n\n## Fluid type in Less\n\nIf Less is how you roll I've got you covered with a [Less mixin](http://codepen.io/MadeByMike/pen/RWJyML).\n\n## Fluid type in PostCSS\n\n[Rucksack is a postCSS module](https://www.npmjs.com/package/rucksack-css) that makes use of this technique for fluid typography.\n\n\nI have a collection of [other examples on CodePen](http://codepen.io/MadeByMike/pens/tags/2/?selected_tag=responsive+typography). [Let me know](https://twitter.com/MikeRiethmuller) if you have one you'd like me to share.\n",
        "contentDigest": "be77aaf16592959cf48d97915753fc7f",
        "owner": "gatsby-source-contentful"
      }
    },
    "7211b149-f415-5cb0-a4ff-aac39a578d73": {
      "id": "7211b149-f415-5cb0-a4ff-aac39a578d73",
      "parent": "a8818912-1058-588d-9376-6c6621140fdb",
      "children": [
        "befdb6a6-db3f-539d-9702-fe719b3d6a1c"
      ],
      "description": "A solution for transitioning lengths values in CSS through more than one 'bending point'.",
      "internal": {
        "type": "contentfulWritingDescriptionTextNode",
        "mediaType": "text/markdown",
        "content": "A solution for transitioning lengths values in CSS through more than one 'bending point'.",
        "contentDigest": "4efb571f632c8a8d68b4e34fab13c60a",
        "owner": "gatsby-source-contentful"
      }
    },
    "d4412520-8f39-58a6-ac7f-23612cf49f92": {
      "id": "d4412520-8f39-58a6-ac7f-23612cf49f92",
      "parent": "a8818912-1058-588d-9376-6c6621140fdb",
      "children": [
        "af56f6cc-9f71-5f91-8123-ff59e47befd1"
      ],
      "body": "A few years ago I wrote about fluid typography techniques that show how you can use calc() and viewport units to create transitions between different font-sizes as the viewport size changes. If you'd like to know more about how this technique works you should read my article [Precise control over responsive typography](https://madebymike.com.au/writing/precise-control-responsive-typography/).\n\nRecently these ideas have circulated and gained more traction. I've seen more large sites using fluid typography and other people writing about it and expanding on my initial ideas and techniques. One recent example of this was an article by Jake Wilson [CSS Poly Fluid Sizing using calc(), vw, breakpoints and linear equations](https://medium.com/@jakobud/css-polyfluidsizing-using-calc-vw-breakpoints-and-linear-equations-8e15505d21ab).\n\nOne of the most interesting things in Jake's article is the idea of having multiple points of transition. He refers to these as \"*Breakpoints + Multiple Linear Equations*\" but I like to think of these as \"bending points\". I like the term bending points rather than breakpoints for these because to me, a breakpoint implies there should be a jump and that's not what this is. These are intermediary points where the rate of scale changes.\n\nThis idea of non-linear transitions is something I’ve been thinking about for a while. Unfortunately at the moment we can't do this with CSS alone. So when I’m asked about this, I usually reply with the same suggestion Jake has, that is to use multiple linear transitions. But I remain a little hesitant about how people might use this technique.\n\nI'd love to be able to use non-linear equations for transitions of font-size or other properties, but until there is a native function in CSS, I think adding a large number of intermediary steps only adds complexity.\n\nUndoubtedly some people will be willing to set many bending points at the cost readability and maintainability. In a lot of cases, readability and maintainability are more important than finessing a few pixels difference at uncommon screen sizes. That's why the original examples I created only allowed for only a single minimum and maximum font-size.\n\nI also felt that that equations and ideas were complex enough and based on the feedback I've had, I think this is often still the case. I get that, sometimes you just want the font to bend and you don’t want to worry about how the maths works.\n\nYet this is only one type of user. Clearly many people want to do this, and despite the complexity, some designs could benefit from using a small number of bending points. Besides, CSS has other complex concepts.\n\nIf you want to use bending points to transition CSS values between multiple intermediary points, it should be done deliberately and with restraint; not just because you can. Aside from adding complexity to the CSS, for standard body text with limited variation in size the difference is not particularly noticeable. This is a technique better reserved for headings and other key features where small details matter. Assuming you do have a good case for more than one bending point, how do you determine what those intermediary points should be? And how do we make this accessible to all types of users?\n\nJake talks about statistics as a tool for determining the minimum and maximum font-sizes at points along a trendline. I found this to be an interesting idea. I like the mathematical approach, but if maths is not your thing and calculating a polynomial regression trendline is probably not going to be up your alley either.\n\nFor me the statistical approach is an interesting aside to what we are trying to do; choose a set of appropriate bending points. If you like this type of mathematics you can of course use statistics as a tool for determining these points, however, it would be equally valid to choose points that have no mathematical basis, or to use a modular scale, or a cubic bezier function, or any other method you can imagine for drawing a line between two points.\nIf we were to have a native interpolation function in CSS, it would likely be similar to existing features. One of the great things about CSS is that all the different parts of it are interoperable. That is, they work together and it is because calc() and viewport units work together that we’re able to get linear-interpolation in CSS. If we want a native interpolation function in CSS should be interoperable as well.\n\nChanging the way we are used to doing things is difficult, learning a new syntax is hard, even when it's superior to previous techniques. Interoperability can help with this and that’s one of the reasons why you see when new layout properties shared between flexbox and CSS grid. It turns out that fluid values in CSS have a lot in common with animation.\n\nThat's why I think polynomial regression and statistics might not the best mental model for thinking about interpolation in CSS. After all, we already have native interpolation with animation. Animation-timing-functions like `cubic-bezier` and keywords like `ease-in`, provide all the tools we need in a way that will be somewhat familiar to developers and designers.\n\nThe missing piece is direct access to the internal interpolation function that powers animation in CSS and the ability to replace the time dimension with the viewport or another custom completion value. A custom completion value could provide further compatibility with future CSS features such as container queries. I wrote about these ideas in more detail in an article [interpolation outside of animation](https://madebymike.com.au/writing/interpolation-without-animation/).\n\nIt might sound a little complex but it's the same mathematics we use when creating animation on the web.  CSS does a good job of abstracting away the mathematical complexities you probably don’t think about it but you understand the result of applying keywords like `ease-in` to an animation. The average doesn't need to understand what type of function this is or how it works. It's not a big leap to take these ideas and use them for creating the effects in typography and other areas of the web.\n\nFluid typography doesn’t need to be hard, so I've taken these ideas and feedback from the community to create a mixin that generates one or more bending points with a syntax that closely aligns with animation-functions:\n\n<p data-height=\"550\" data-theme-id=\"dark\" data-slug-hash=\"oWqvNa\" data-default-tab=\"css,result\" data-user=\"MadeByMike\" data-embed-version=\"2\" data-pen-title=\"Bending points\" class=\"codepen\" data-preview=\"true\">See the Pen <a href=\"http://codepen.io/MadeByMike/pen/oWqvNa/\">Bending points </a> by Mike (<a href=\"http://codepen.io/MadeByMike\">@MadeByMike</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p>\n<script async src=\"https://production-assets.codepen.io/assets/embed/ei.js\"></script>\n\nTo properly see this in action you might want to <a href=\"http://codepen.io/MadeByMike/pen/oWqvNa/?editors=0100\" target=\"_blank\">open it in a new window</a> so you can resize it.\n\nYou can [grab the mixin you can get it here](https://www.sassmeister.com/gist/beac01f68da4f9ef3007c0d17f72d8c6).\n\nThis code for the mixin looks complex but it does a lot of the maths, so that you don't need to consider anything except the type of easing you want to apply.\n\nLike other examples of fluid typography this one requires a min and max value for the target CSS property and screen sizes. But unlike other examples this one also takes an optional easing value.\n\nThe easing value works exactly like an [animation-timing-function](https://developer.mozilla.org/en/docs/Web/CSS/animation-timing-function). You can give it a keyword or even a `cubic-bezier` function and it will calculate the intermediary values and set up the transitions. Note: It does not accept `step` values.\n\nThe final optional parameter is the number of bending points. This defaults to 2, and in most cases I'd recommend leaving it at the default, but because I know you are going to do it anyway, you can set as many bending points as you like.\n\nHere are some examples to get you started:\n\n```scss\n.classic-linear {\n  @include interpolate('font-size', 600px, 12px, 900px, 24px);\n}\n.easy-peasy {\n  @include interpolate('font-size', 600px, 12px, 900px, 24px, 'ease-in');\n}\n.cubic-bezier {\n  @include interpolate('font-size', 600px, 12px, 900px, 24px, 'cubic-bezier(0.755, 0.05, 0.855, 0.06)');\n}\n.bloat-my-css {\n  @include interpolate('font-size', 600px, 12px, 900px, 24px, 'ease-in-ease-out', 10);\n}\n```\nThis aims to show how I think native interpolation should work in browsers, but it still only works where calc does. I think there is a lot more discussion to be had and problems that we need to solve before we can have a real native interpolation in CSS. I welcome contributions to this discussion and ideas from maths, statistics, animation or any areas. One thing that I think is increasingly apparent is that the web is fluid medium and breakpoints will not continue to be the only answer, or the key feature in the future of responsive design.\n\nIf you want to [use this in a project grab the mixin here](https://www.sassmeister.com/gist/beac01f68da4f9ef3007c0d17f72d8c6).\n\nIf you want to don't want multiple bending points you can still use the example above, but if you want a simple linear interpolation mixin [you can find my previous example here](https://www.sassmeister.com/gist/d8714d9b987e376ad52db5ede5401ff3).\n\nFinally if you want to look at some more examples [I have a fluid typography collection on CodePen](http://codepen.io/collection/nLbRMZ/).\n",
      "internal": {
        "type": "contentfulWritingBodyTextNode",
        "mediaType": "text/markdown",
        "content": "A few years ago I wrote about fluid typography techniques that show how you can use calc() and viewport units to create transitions between different font-sizes as the viewport size changes. If you'd like to know more about how this technique works you should read my article [Precise control over responsive typography](https://madebymike.com.au/writing/precise-control-responsive-typography/).\n\nRecently these ideas have circulated and gained more traction. I've seen more large sites using fluid typography and other people writing about it and expanding on my initial ideas and techniques. One recent example of this was an article by Jake Wilson [CSS Poly Fluid Sizing using calc(), vw, breakpoints and linear equations](https://medium.com/@jakobud/css-polyfluidsizing-using-calc-vw-breakpoints-and-linear-equations-8e15505d21ab).\n\nOne of the most interesting things in Jake's article is the idea of having multiple points of transition. He refers to these as \"*Breakpoints + Multiple Linear Equations*\" but I like to think of these as \"bending points\". I like the term bending points rather than breakpoints for these because to me, a breakpoint implies there should be a jump and that's not what this is. These are intermediary points where the rate of scale changes.\n\nThis idea of non-linear transitions is something I’ve been thinking about for a while. Unfortunately at the moment we can't do this with CSS alone. So when I’m asked about this, I usually reply with the same suggestion Jake has, that is to use multiple linear transitions. But I remain a little hesitant about how people might use this technique.\n\nI'd love to be able to use non-linear equations for transitions of font-size or other properties, but until there is a native function in CSS, I think adding a large number of intermediary steps only adds complexity.\n\nUndoubtedly some people will be willing to set many bending points at the cost readability and maintainability. In a lot of cases, readability and maintainability are more important than finessing a few pixels difference at uncommon screen sizes. That's why the original examples I created only allowed for only a single minimum and maximum font-size.\n\nI also felt that that equations and ideas were complex enough and based on the feedback I've had, I think this is often still the case. I get that, sometimes you just want the font to bend and you don’t want to worry about how the maths works.\n\nYet this is only one type of user. Clearly many people want to do this, and despite the complexity, some designs could benefit from using a small number of bending points. Besides, CSS has other complex concepts.\n\nIf you want to use bending points to transition CSS values between multiple intermediary points, it should be done deliberately and with restraint; not just because you can. Aside from adding complexity to the CSS, for standard body text with limited variation in size the difference is not particularly noticeable. This is a technique better reserved for headings and other key features where small details matter. Assuming you do have a good case for more than one bending point, how do you determine what those intermediary points should be? And how do we make this accessible to all types of users?\n\nJake talks about statistics as a tool for determining the minimum and maximum font-sizes at points along a trendline. I found this to be an interesting idea. I like the mathematical approach, but if maths is not your thing and calculating a polynomial regression trendline is probably not going to be up your alley either.\n\nFor me the statistical approach is an interesting aside to what we are trying to do; choose a set of appropriate bending points. If you like this type of mathematics you can of course use statistics as a tool for determining these points, however, it would be equally valid to choose points that have no mathematical basis, or to use a modular scale, or a cubic bezier function, or any other method you can imagine for drawing a line between two points.\nIf we were to have a native interpolation function in CSS, it would likely be similar to existing features. One of the great things about CSS is that all the different parts of it are interoperable. That is, they work together and it is because calc() and viewport units work together that we’re able to get linear-interpolation in CSS. If we want a native interpolation function in CSS should be interoperable as well.\n\nChanging the way we are used to doing things is difficult, learning a new syntax is hard, even when it's superior to previous techniques. Interoperability can help with this and that’s one of the reasons why you see when new layout properties shared between flexbox and CSS grid. It turns out that fluid values in CSS have a lot in common with animation.\n\nThat's why I think polynomial regression and statistics might not the best mental model for thinking about interpolation in CSS. After all, we already have native interpolation with animation. Animation-timing-functions like `cubic-bezier` and keywords like `ease-in`, provide all the tools we need in a way that will be somewhat familiar to developers and designers.\n\nThe missing piece is direct access to the internal interpolation function that powers animation in CSS and the ability to replace the time dimension with the viewport or another custom completion value. A custom completion value could provide further compatibility with future CSS features such as container queries. I wrote about these ideas in more detail in an article [interpolation outside of animation](https://madebymike.com.au/writing/interpolation-without-animation/).\n\nIt might sound a little complex but it's the same mathematics we use when creating animation on the web.  CSS does a good job of abstracting away the mathematical complexities you probably don’t think about it but you understand the result of applying keywords like `ease-in` to an animation. The average doesn't need to understand what type of function this is or how it works. It's not a big leap to take these ideas and use them for creating the effects in typography and other areas of the web.\n\nFluid typography doesn’t need to be hard, so I've taken these ideas and feedback from the community to create a mixin that generates one or more bending points with a syntax that closely aligns with animation-functions:\n\n<p data-height=\"550\" data-theme-id=\"dark\" data-slug-hash=\"oWqvNa\" data-default-tab=\"css,result\" data-user=\"MadeByMike\" data-embed-version=\"2\" data-pen-title=\"Bending points\" class=\"codepen\" data-preview=\"true\">See the Pen <a href=\"http://codepen.io/MadeByMike/pen/oWqvNa/\">Bending points </a> by Mike (<a href=\"http://codepen.io/MadeByMike\">@MadeByMike</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p>\n<script async src=\"https://production-assets.codepen.io/assets/embed/ei.js\"></script>\n\nTo properly see this in action you might want to <a href=\"http://codepen.io/MadeByMike/pen/oWqvNa/?editors=0100\" target=\"_blank\">open it in a new window</a> so you can resize it.\n\nYou can [grab the mixin you can get it here](https://www.sassmeister.com/gist/beac01f68da4f9ef3007c0d17f72d8c6).\n\nThis code for the mixin looks complex but it does a lot of the maths, so that you don't need to consider anything except the type of easing you want to apply.\n\nLike other examples of fluid typography this one requires a min and max value for the target CSS property and screen sizes. But unlike other examples this one also takes an optional easing value.\n\nThe easing value works exactly like an [animation-timing-function](https://developer.mozilla.org/en/docs/Web/CSS/animation-timing-function). You can give it a keyword or even a `cubic-bezier` function and it will calculate the intermediary values and set up the transitions. Note: It does not accept `step` values.\n\nThe final optional parameter is the number of bending points. This defaults to 2, and in most cases I'd recommend leaving it at the default, but because I know you are going to do it anyway, you can set as many bending points as you like.\n\nHere are some examples to get you started:\n\n```scss\n.classic-linear {\n  @include interpolate('font-size', 600px, 12px, 900px, 24px);\n}\n.easy-peasy {\n  @include interpolate('font-size', 600px, 12px, 900px, 24px, 'ease-in');\n}\n.cubic-bezier {\n  @include interpolate('font-size', 600px, 12px, 900px, 24px, 'cubic-bezier(0.755, 0.05, 0.855, 0.06)');\n}\n.bloat-my-css {\n  @include interpolate('font-size', 600px, 12px, 900px, 24px, 'ease-in-ease-out', 10);\n}\n```\nThis aims to show how I think native interpolation should work in browsers, but it still only works where calc does. I think there is a lot more discussion to be had and problems that we need to solve before we can have a real native interpolation in CSS. I welcome contributions to this discussion and ideas from maths, statistics, animation or any areas. One thing that I think is increasingly apparent is that the web is fluid medium and breakpoints will not continue to be the only answer, or the key feature in the future of responsive design.\n\nIf you want to [use this in a project grab the mixin here](https://www.sassmeister.com/gist/beac01f68da4f9ef3007c0d17f72d8c6).\n\nIf you want to don't want multiple bending points you can still use the example above, but if you want a simple linear interpolation mixin [you can find my previous example here](https://www.sassmeister.com/gist/d8714d9b987e376ad52db5ede5401ff3).\n\nFinally if you want to look at some more examples [I have a fluid typography collection on CodePen](http://codepen.io/collection/nLbRMZ/).\n",
        "contentDigest": "ddc9051ca05d75852b6fbab786e3bf13",
        "owner": "gatsby-source-contentful"
      }
    },
    "8a964b1b-2e87-5899-8e8f-6df6de3d4b55": {
      "id": "8a964b1b-2e87-5899-8e8f-6df6de3d4b55",
      "parent": "8ba8ae2e-6a81-5ea3-9414-0d5884bbe52f",
      "children": [
        "dc5578ae-b10e-5a42-947f-f08b3e72a891"
      ],
      "description": "A little pattern I wanted to share for creating bulletproof icons.",
      "internal": {
        "type": "contentfulWritingDescriptionTextNode",
        "mediaType": "text/markdown",
        "content": "A little pattern I wanted to share for creating bulletproof icons.",
        "contentDigest": "22aceebcdeb56611c64fd135e4937861",
        "owner": "gatsby-source-contentful"
      }
    },
    "9fefdebb-0172-5ad5-96e1-717fe3a28fea": {
      "id": "9fefdebb-0172-5ad5-96e1-717fe3a28fea",
      "parent": "8ba8ae2e-6a81-5ea3-9414-0d5884bbe52f",
      "children": [
        "c2d27e8b-53be-5a04-a30a-8e67adb054f5"
      ],
      "body": "I want to share a design pattern I've been using for icons. It's a robust technique that works in almost any situation. With this technique you can use icons inline or append &amp; prepend them to existing content. It works with paragraphs, headings, navigation items, buttons &hellip;almost any element.\n\n<div class=\"robust-icon-container\">\n\t<a class=\"robust-icon-examples icon-right-tomato icon-large\" href=\"http://codepen.io/MadeByMike/pen/xGoMMw?editors=010\">\n\n\t\t<h2 class=\"icon-left-tomato mtl\">Examples</h2>\n\t\t<p>View more examples <span class=\"icon icon-tomato icon-small\"></span> on CodePen.</p>\n\t\t<button class=\"icon-right-tomato mtl mbl\">View Examples</button>\n\n\t</a>\n</div>\n\nIt's also easy to extend so I can usually drop it into almost any project.\n\n## Usage\n\n### Inline:\n\n```html\n<span class=\"icon icon-{icon-name}\"></span>\n```\n\n### Prepend:\n\n```html\n<div class=\"icon-left-{icon-name}\"></div>\n```\n\n### Append:\n\n```html\n<div class=\"icon-right-{icon-name}\"></div>\n```\n\n### Size modifiers:\n\n```html\n<span class=\"icon icon-{icon-name} icon-small\"></span>\n<div class=\"icon-right-{icon-name} icon-large\"></div>\n<span class=\"icon icon-{icon-name} icon-responsive\"></span>\n```\n\n## How it works\n\nWhen appending or prepending, no matter the hight of the content, the icon will always be centred. Icons are vertically centred using absolutely positioned pseudo elements and left and right padding is added to the parent element as required to ensure icons and content always have adequate spacing.\n\nThe clever part of this technique, apart from the vertical centring, is the use of attribute selectors to target elements that that contain various `icon-` prefixes. By targeting attribute selectors we need fewer class names to apply icon styles and adding new icons or modifiers becomes exceptionally easy.\n\n## Extending the icon library\n\nIf you follow the naming conventions all you need to add a new icon to the set is a background image. To add a new icon we just need to add following line and change `{icon-name}` to the name of our new icon.\n\nCheck out some <a href=\"http://codepen.io/MadeByMike/pen/xGoMMw?editors=010\">demos on CodePen</a> or just <a href=\"https://gist.github.com/MadeByMike/b15aac18adc6a664efa4\">grab the code</a>.\n\n```css\n.icon-{icon-name},\n.icon-left-{icon-name}:before,\n.icon-right-{icon-name}:after{\n\tbackground-image: url(icon-name.svg);\n}\n```\n\nThis is the first of hopefully more short articles, where I share some of my favourite design patterns.\n",
      "internal": {
        "type": "contentfulWritingBodyTextNode",
        "mediaType": "text/markdown",
        "content": "I want to share a design pattern I've been using for icons. It's a robust technique that works in almost any situation. With this technique you can use icons inline or append &amp; prepend them to existing content. It works with paragraphs, headings, navigation items, buttons &hellip;almost any element.\n\n<div class=\"robust-icon-container\">\n\t<a class=\"robust-icon-examples icon-right-tomato icon-large\" href=\"http://codepen.io/MadeByMike/pen/xGoMMw?editors=010\">\n\n\t\t<h2 class=\"icon-left-tomato mtl\">Examples</h2>\n\t\t<p>View more examples <span class=\"icon icon-tomato icon-small\"></span> on CodePen.</p>\n\t\t<button class=\"icon-right-tomato mtl mbl\">View Examples</button>\n\n\t</a>\n</div>\n\nIt's also easy to extend so I can usually drop it into almost any project.\n\n## Usage\n\n### Inline:\n\n```html\n<span class=\"icon icon-{icon-name}\"></span>\n```\n\n### Prepend:\n\n```html\n<div class=\"icon-left-{icon-name}\"></div>\n```\n\n### Append:\n\n```html\n<div class=\"icon-right-{icon-name}\"></div>\n```\n\n### Size modifiers:\n\n```html\n<span class=\"icon icon-{icon-name} icon-small\"></span>\n<div class=\"icon-right-{icon-name} icon-large\"></div>\n<span class=\"icon icon-{icon-name} icon-responsive\"></span>\n```\n\n## How it works\n\nWhen appending or prepending, no matter the hight of the content, the icon will always be centred. Icons are vertically centred using absolutely positioned pseudo elements and left and right padding is added to the parent element as required to ensure icons and content always have adequate spacing.\n\nThe clever part of this technique, apart from the vertical centring, is the use of attribute selectors to target elements that that contain various `icon-` prefixes. By targeting attribute selectors we need fewer class names to apply icon styles and adding new icons or modifiers becomes exceptionally easy.\n\n## Extending the icon library\n\nIf you follow the naming conventions all you need to add a new icon to the set is a background image. To add a new icon we just need to add following line and change `{icon-name}` to the name of our new icon.\n\nCheck out some <a href=\"http://codepen.io/MadeByMike/pen/xGoMMw?editors=010\">demos on CodePen</a> or just <a href=\"https://gist.github.com/MadeByMike/b15aac18adc6a664efa4\">grab the code</a>.\n\n```css\n.icon-{icon-name},\n.icon-left-{icon-name}:before,\n.icon-right-{icon-name}:after{\n\tbackground-image: url(icon-name.svg);\n}\n```\n\nThis is the first of hopefully more short articles, where I share some of my favourite design patterns.\n",
        "contentDigest": "b3e293d1a7de3efd46b63292d8f6e2aa",
        "owner": "gatsby-source-contentful"
      }
    },
    "77f61876-bfcb-5f48-bc9c-64cf15937b21": {
      "id": "77f61876-bfcb-5f48-bc9c-64cf15937b21",
      "parent": "4c0495e4-f68f-504d-875d-b783b1399ad0",
      "children": [
        "e82b9da5-5753-574b-ab10-9cf7a87205b3"
      ],
      "body": "Today I received a [DMCA takedown request]( http://en.wikipedia.org/wiki/Digital_Millennium_Copyright_Act) against my personal website over a [trivial GitHub project that involves a periodic table layout](http://madebymike.com.au/html5-periodic-table/) and information about HTML5 elements.\n\n**Update:** The legal threats and the DMCA takedown request were withdrawn. In addition to that the person involved has apologised and as such I've removed the name from this post -I think that's fair.\n\nNormally I like to write about my projects and experiments but it seems this an unfortunate part of what we do so I will detail it here in case anyone else has this experience.\n\nThe reasons for the DMCA takedown are detailed below. At the end of the day, whether there is a legal basis for it or not, the claim is in very poor spirit.\n\nPrior to being informed about the DMCA takedown request I received an impersonal email. In fact it was not just an impersonal email, it was a ‘cease and desist notice’ full of legal speak and threats such as this:\n\n“You neither asked for nor received permission to use the Work… nor to make or distribute copies of it. Therefore, you have infringed my rights under 17 U.S.C. Section 101 et seq. and could be liable for statutory damages as high as $150,000 as set forth in Section 504(c)(2) therein.”\n\nI’d had no prior contact with this person or any knowledge of their work or existence, so it came as a bit of a shock. It was not what I’ve come to expect from the development community. But I respect the rights of fellow developers and designers to make a living by selling their work, so I thought I’d better check this out in more detail before responding.\n\nLike most developers in our community I’m always very careful to check and attribute sources so I could not understand what basis there could be for this claim.\n\nThe HTML5 periodic table I made was intended to be just a fun css challenge. It is responsive and the entire project including the interaction is done with just CSS (thank you :target attribute). The information about each element was shamelessly stolen from the [Mozilla Developer Network]( https://developer.mozilla.org/en/docs/Web/HTML/Element) (MDN) and the layout is thanks to [Dmitri Mendeleev](http://en.wikipedia.org/wiki/Dmitri_Mendeleev). But luckily MDN and Dmitri are all about the learning and they support the community; as such I have much love for them both.\n\nBut getting back to the basis for this claim. The original idea for the challenge came from an image:\n\n<img src=\"/img/html5-periodic-table-source.png\" />\n\nI’m not sure where I first saw this image but I believe it was shown to me by a friend who also proposed the challenge. I later traced the source of the image to Josh Duck and made an effort to attribute him.\n\nThe person who contacted me claims to have produced a poster of a HTML periodic table earlier than the work by Josh Duck. They also claimed to have sued Josh Duck. So they seem like a reasonable person. I responded and suggested: “Shall we try talking first?”. I pointed out that:\n\n  - I have not seen the original poster\n  - I cannot find any proof of an earlier work - only a recent version can be found online\n  - my final effort was substantially different to that by Josh Duck and even more different from the poster\n  - a printed poster and HTML are completely different mediums with different interactions and purpose\n  - the ability to claim copyright over public domain information such as a periodic table layout and the HTML5 specification is questionable at best\n  - I am not a US citizen so different copyright laws may apply\n  - And importantly the GitHub project exists purely as a learning exercise and has very little traffic (it’s just a simple hack day project!)\n\nFurther to this I’m not selling anything, it’s purely educational and if someone likes it, they would be more likely to take an interest in a print product with a similar concept.\n\nI’d love to remake this using flexbox and update it with newer HTML elements and more detailed content. I’d love people to be able to fork it and learn more about creating challenging layouts with css. Or develop something new from this concept.\n\nImagine if we all received copyright challenges over something as tenuous a particular layout and subject matter. This would mean there could only be one single column web development blog (and not only that it would be a book).\n\nAt the end of the day whether there is a legal basis for this claim or not it’s in very poor spirit and I think it amounts to nothing more than trolling and is not what DMCA was intended for.\n\nIt might be a small, outdated and largely insignificant GitHub project but I intend to challenge this through all reasonable means. Firstly this involves a [DMCA Counter Notice with GitHub](https://help.github.com/articles/guide-to-submitting-a-dmca-counter-notice/).\n\nLuckily in the end (after posting this origional story) the person involved had a change of heart. The approach may have been a tad overzealous and the reaction not anticipated, and I think we can forgive that. I also think a lot more can be achieved by working with the community, there is room for similar ideas and generally we're a great bunch of people who are happy to share a link and promote each other's work.\n",
      "internal": {
        "type": "contentfulWritingBodyTextNode",
        "mediaType": "text/markdown",
        "content": "Today I received a [DMCA takedown request]( http://en.wikipedia.org/wiki/Digital_Millennium_Copyright_Act) against my personal website over a [trivial GitHub project that involves a periodic table layout](http://madebymike.com.au/html5-periodic-table/) and information about HTML5 elements.\n\n**Update:** The legal threats and the DMCA takedown request were withdrawn. In addition to that the person involved has apologised and as such I've removed the name from this post -I think that's fair.\n\nNormally I like to write about my projects and experiments but it seems this an unfortunate part of what we do so I will detail it here in case anyone else has this experience.\n\nThe reasons for the DMCA takedown are detailed below. At the end of the day, whether there is a legal basis for it or not, the claim is in very poor spirit.\n\nPrior to being informed about the DMCA takedown request I received an impersonal email. In fact it was not just an impersonal email, it was a ‘cease and desist notice’ full of legal speak and threats such as this:\n\n“You neither asked for nor received permission to use the Work… nor to make or distribute copies of it. Therefore, you have infringed my rights under 17 U.S.C. Section 101 et seq. and could be liable for statutory damages as high as $150,000 as set forth in Section 504(c)(2) therein.”\n\nI’d had no prior contact with this person or any knowledge of their work or existence, so it came as a bit of a shock. It was not what I’ve come to expect from the development community. But I respect the rights of fellow developers and designers to make a living by selling their work, so I thought I’d better check this out in more detail before responding.\n\nLike most developers in our community I’m always very careful to check and attribute sources so I could not understand what basis there could be for this claim.\n\nThe HTML5 periodic table I made was intended to be just a fun css challenge. It is responsive and the entire project including the interaction is done with just CSS (thank you :target attribute). The information about each element was shamelessly stolen from the [Mozilla Developer Network]( https://developer.mozilla.org/en/docs/Web/HTML/Element) (MDN) and the layout is thanks to [Dmitri Mendeleev](http://en.wikipedia.org/wiki/Dmitri_Mendeleev). But luckily MDN and Dmitri are all about the learning and they support the community; as such I have much love for them both.\n\nBut getting back to the basis for this claim. The original idea for the challenge came from an image:\n\n<img src=\"/img/html5-periodic-table-source.png\" />\n\nI’m not sure where I first saw this image but I believe it was shown to me by a friend who also proposed the challenge. I later traced the source of the image to Josh Duck and made an effort to attribute him.\n\nThe person who contacted me claims to have produced a poster of a HTML periodic table earlier than the work by Josh Duck. They also claimed to have sued Josh Duck. So they seem like a reasonable person. I responded and suggested: “Shall we try talking first?”. I pointed out that:\n\n  - I have not seen the original poster\n  - I cannot find any proof of an earlier work - only a recent version can be found online\n  - my final effort was substantially different to that by Josh Duck and even more different from the poster\n  - a printed poster and HTML are completely different mediums with different interactions and purpose\n  - the ability to claim copyright over public domain information such as a periodic table layout and the HTML5 specification is questionable at best\n  - I am not a US citizen so different copyright laws may apply\n  - And importantly the GitHub project exists purely as a learning exercise and has very little traffic (it’s just a simple hack day project!)\n\nFurther to this I’m not selling anything, it’s purely educational and if someone likes it, they would be more likely to take an interest in a print product with a similar concept.\n\nI’d love to remake this using flexbox and update it with newer HTML elements and more detailed content. I’d love people to be able to fork it and learn more about creating challenging layouts with css. Or develop something new from this concept.\n\nImagine if we all received copyright challenges over something as tenuous a particular layout and subject matter. This would mean there could only be one single column web development blog (and not only that it would be a book).\n\nAt the end of the day whether there is a legal basis for this claim or not it’s in very poor spirit and I think it amounts to nothing more than trolling and is not what DMCA was intended for.\n\nIt might be a small, outdated and largely insignificant GitHub project but I intend to challenge this through all reasonable means. Firstly this involves a [DMCA Counter Notice with GitHub](https://help.github.com/articles/guide-to-submitting-a-dmca-counter-notice/).\n\nLuckily in the end (after posting this origional story) the person involved had a change of heart. The approach may have been a tad overzealous and the reaction not anticipated, and I think we can forgive that. I also think a lot more can be achieved by working with the community, there is room for similar ideas and generally we're a great bunch of people who are happy to share a link and promote each other's work.\n",
        "contentDigest": "926344036d07a16f07427ec06dd143af",
        "owner": "gatsby-source-contentful"
      }
    },
    "efd12b4a-ed97-5a4c-a022-e620def935a3": {
      "id": "efd12b4a-ed97-5a4c-a022-e620def935a3",
      "parent": "6cd6dd13-9477-50bd-923e-6a60cb9d51bb",
      "children": [
        "6a268ce0-e6cb-593e-97ef-d3f01e8c4b06"
      ],
      "description": "Some early experiments with WebRTC.",
      "internal": {
        "type": "contentfulWritingDescriptionTextNode",
        "mediaType": "text/markdown",
        "content": "Some early experiments with WebRTC.",
        "contentDigest": "fc10f4f8444240477efaad422bf8a835",
        "owner": "gatsby-source-contentful"
      }
    },
    "fe842c12-0073-57bf-9ace-d02d6dfcc40c": {
      "id": "fe842c12-0073-57bf-9ace-d02d6dfcc40c",
      "parent": "6cd6dd13-9477-50bd-923e-6a60cb9d51bb",
      "children": [
        "e1690f65-94c8-5d91-88c1-37aafe697610"
      ],
      "body": "I've been messing around with live video capture in the browser and have developed a nifty demo showing different methods for estimating the quality of light in realtime.\n\nTo view the demo you are going to need a web cam and a modern Chrome, Firefox or Opera browser. If you have what it takes you can [view my demo here](http://codepen.io/MadeByMike/full/d8369096b18e2192d0c9d721b9b2a673/). Please select allow when asked for permission to use the web cam.\n\nThese tests have some potential real world uses. For example to advise of optimal lighting in a camera app or to estimate the size of the subject in the frame.\n\n## A brief history of html video capture\n\nBefore I explain my demo, it's worth sharing what I've learnt about the history of video capture and webRTC as well as its [state today](http://caniuse.com/#search=getusermedia).\n\nThe first thing to know is, it had a bit of a rocky start. This history is well covered in [this excellent HTML5rocks article](http://www.html5rocks.com/en/tutorials/getusermedia/intro/) by Eric Bidelman.\n\nThe next thing to know is that `getUserMedia()` is still not fully supported in all browsers and there are some quirks (huge gaping inconsistencies) in implementation across browsers.\n\nNot to fear because web development superhero Addy Osmani and others have come to the rescue with pollyfills such as:\n\n  - [getUserMedia.js](https://github.com/addyosmani/getUserMedia.js/)\n  - [webcamjs](https://github.com/jhuckaby/webcamjs)\n\nTo keep it as simple as possible I haven't included any pollyfills in my demo, but I've tested them and they work, so there's no reason not to start using this now.\n\n## Estimating the quality of lighting\n\nIn my demo there were 2 methods I trialed for determining the brightness.\n\nThe first method was to find the average color of all the pixels in the frame then work out the relative brightness of this color. This method worked really well, in most situations it gave a good indication of the general brightness and would be suitable for uses such as a light indicator in a camera app.\n\nBut eventually I found some limitations with the average color method when testing subjects with a high level of contrast. Images with a very dark background can give a false indication of the overall brightness and there is not enough information in the average color method to determine the 'quality' of light.\n\nI realised that I wanted to know not just the average brightness but also how much of the frame was lit. To do this I applied a threshold filter to the incoming video stream. The threshold filter determines the brightness of each pixel and sets it to either black or white depending on whether it's above or below a certian level of brightness. In the end I can tell what percentage of the frame is lit and this is number can be very differnt to the average brightness.\n\nUsed together we can determine a lot about the composition and lighting of the frame.\n\n## Taking it further\n\nIf I apply more than one threshold I can set a maximum and minimum brightness and measure which parts of the image are potentially under or over exposed.\n\nFinally and it's not in my demo but you could potentially automatically adjust the threshold based on the average color brightness.  \n\nSo there we have a ton of information we can use to make inferences about the quality of lighting in a video stream. Now it's up to you work out how to put them to practical application.\n\n## Performance tips\n\nDespite being very poorly optomised my demo seems to run ok. Not only am I adjusting the brightness before rendering each frame to a canvas, I'm also showing the results of the threshold and average filters on a separate smaller canvas. In most cases you won't need to do either of these things.\n\nI was able to get these methods working on an average machine with a HD video input by combining each of the filters so that I was only looping over the pixel data once. I used an off screen canvas and only processed every 5th frame and every 5th pixel. The results were as accurate as the method shown in this demo.\n\n## Further reading\n\nInteresting articles I found along the way include:\n\n- [getUserMedia: Accessing the Camera and Privacy UI](https://dev.opera.com/articles/getusermedia-access-camera-privacy-ui/) - Bruce Lawson\n- [Capturing Audio & Video in HTML5](http://www.html5rocks.com/en/tutorials/getusermedia/intro/) - Eric Bidelman\n- [introduction to the getUserMedia API](http://www.sitepoint.com/introduction-getusermedia-api/) - Aurelio De Rosa\n",
      "internal": {
        "type": "contentfulWritingBodyTextNode",
        "mediaType": "text/markdown",
        "content": "I've been messing around with live video capture in the browser and have developed a nifty demo showing different methods for estimating the quality of light in realtime.\n\nTo view the demo you are going to need a web cam and a modern Chrome, Firefox or Opera browser. If you have what it takes you can [view my demo here](http://codepen.io/MadeByMike/full/d8369096b18e2192d0c9d721b9b2a673/). Please select allow when asked for permission to use the web cam.\n\nThese tests have some potential real world uses. For example to advise of optimal lighting in a camera app or to estimate the size of the subject in the frame.\n\n## A brief history of html video capture\n\nBefore I explain my demo, it's worth sharing what I've learnt about the history of video capture and webRTC as well as its [state today](http://caniuse.com/#search=getusermedia).\n\nThe first thing to know is, it had a bit of a rocky start. This history is well covered in [this excellent HTML5rocks article](http://www.html5rocks.com/en/tutorials/getusermedia/intro/) by Eric Bidelman.\n\nThe next thing to know is that `getUserMedia()` is still not fully supported in all browsers and there are some quirks (huge gaping inconsistencies) in implementation across browsers.\n\nNot to fear because web development superhero Addy Osmani and others have come to the rescue with pollyfills such as:\n\n  - [getUserMedia.js](https://github.com/addyosmani/getUserMedia.js/)\n  - [webcamjs](https://github.com/jhuckaby/webcamjs)\n\nTo keep it as simple as possible I haven't included any pollyfills in my demo, but I've tested them and they work, so there's no reason not to start using this now.\n\n## Estimating the quality of lighting\n\nIn my demo there were 2 methods I trialed for determining the brightness.\n\nThe first method was to find the average color of all the pixels in the frame then work out the relative brightness of this color. This method worked really well, in most situations it gave a good indication of the general brightness and would be suitable for uses such as a light indicator in a camera app.\n\nBut eventually I found some limitations with the average color method when testing subjects with a high level of contrast. Images with a very dark background can give a false indication of the overall brightness and there is not enough information in the average color method to determine the 'quality' of light.\n\nI realised that I wanted to know not just the average brightness but also how much of the frame was lit. To do this I applied a threshold filter to the incoming video stream. The threshold filter determines the brightness of each pixel and sets it to either black or white depending on whether it's above or below a certian level of brightness. In the end I can tell what percentage of the frame is lit and this is number can be very differnt to the average brightness.\n\nUsed together we can determine a lot about the composition and lighting of the frame.\n\n## Taking it further\n\nIf I apply more than one threshold I can set a maximum and minimum brightness and measure which parts of the image are potentially under or over exposed.\n\nFinally and it's not in my demo but you could potentially automatically adjust the threshold based on the average color brightness.  \n\nSo there we have a ton of information we can use to make inferences about the quality of lighting in a video stream. Now it's up to you work out how to put them to practical application.\n\n## Performance tips\n\nDespite being very poorly optomised my demo seems to run ok. Not only am I adjusting the brightness before rendering each frame to a canvas, I'm also showing the results of the threshold and average filters on a separate smaller canvas. In most cases you won't need to do either of these things.\n\nI was able to get these methods working on an average machine with a HD video input by combining each of the filters so that I was only looping over the pixel data once. I used an off screen canvas and only processed every 5th frame and every 5th pixel. The results were as accurate as the method shown in this demo.\n\n## Further reading\n\nInteresting articles I found along the way include:\n\n- [getUserMedia: Accessing the Camera and Privacy UI](https://dev.opera.com/articles/getusermedia-access-camera-privacy-ui/) - Bruce Lawson\n- [Capturing Audio & Video in HTML5](http://www.html5rocks.com/en/tutorials/getusermedia/intro/) - Eric Bidelman\n- [introduction to the getUserMedia API](http://www.sitepoint.com/introduction-getusermedia-api/) - Aurelio De Rosa\n",
        "contentDigest": "7be5a84c13f6706ebfc0dd7363f745d3",
        "owner": "gatsby-source-contentful"
      }
    },
    "a80ddecb-8905-5c76-a8c7-002b50024020": {
      "id": "a80ddecb-8905-5c76-a8c7-002b50024020",
      "parent": "4d7f0e82-276e-5222-9e4e-57e08cb8fd4e",
      "children": [
        "2fa8a8a7-d415-51a5-a21e-ff8b0511903e"
      ],
      "description": "Ideas for a more general purpose interpolation function in CSS.",
      "internal": {
        "type": "contentfulWritingDescriptionTextNode",
        "mediaType": "text/markdown",
        "content": "Ideas for a more general purpose interpolation function in CSS.",
        "contentDigest": "491ca955537814d36d537990dbf1c23e",
        "owner": "gatsby-source-contentful"
      }
    },
    "f6491b0b-d4b6-5216-a807-95bd18eb4ac8": {
      "id": "f6491b0b-d4b6-5216-a807-95bd18eb4ac8",
      "parent": "4d7f0e82-276e-5222-9e4e-57e08cb8fd4e",
      "children": [
        "20c7a7e0-bc45-5127-b917-a67dce92c9cb"
      ],
      "body": "\nInterpolation is the estimation of a new value between two known values. This simple concept is vastly useful and it's commonly seen in animation on the web. With animation you declare the target properties and the end-state, and the browser will workout out the values in-between. Animation happens over time, but this is not the only dimension where interpolation can occur. In fact we interpolate values regularly in design, albeit manually, and particularly in responsive design. You may even do it unknowingly. Because of this, I think there is a need for a more native way of interpolating CSS values outside animation.\n\nIf you are a web designer the chances are you frequently have two primary screen sizes in mind, a small screen and a large screen, or the device and the desktop. I know you probably think about more than just these two sizes, but these two sizes are especially important, they represent the upper and lower bounds of your design. When you make adjustments for screen sizes between these constraints, what you are doing is like interpolation.\n\nWhen adjusting properties such as font-size, font-weight, image width or grid dimensions at specific screen sizes between the upper and lower bounds, these values usually fall somewhere between the choices you've made for the largest small and smallest screen size. It would be unusual for the font to get larger, then smaller, then larger again as the viewport changes. Or to give another example, if a font varied between bold, normal, italic, then bold and italic. It's not unusual for these things to change from one state to another, but typically these changes are progressive, not back and forward.\n\n## Design intent vs constraints\n\nWe choose break-points where properties are to be adjusted. We don't do this because it is ideal, we're forced to select a fixed number break-points, often quite arbitrarily, where the design should change. Although sometimes we may want these break-points, more often it is due to technical limitations on the web.\n\nMedia queries are our primary tool for adjusting design in relation to the screen size and for practical reasons, we are constrained to using a limited number of these. These limitations have shaped how we think about web design, and the choices we make about using break-points don't necessarily reflect the pure intentions of the designer.\n\nI've been told that good design is rarely arbitrary. It serves a purpose. If the font size is smaller, larger or its weight stronger, it's because that is the best experience for users, at that screen size. It's feasible to say that the best experience for some aspects of design, will vary directly in relation to the screen size rather than only at set points. This is the use-case for interpolation without animation.\n\nLet's illustrate this with an example, imagine the following CSS:\n\n```css\nbody {\n  font-weight: bold;\n}\n\n@media screen and (min-width: 700px){\n  body {\n    font-size: 1.2rem;\n    font-weight: normal;\n  }\n}\n```\n\nIt's unlikely a designer would decide bold font is uniquely suited to screen resolutions below 700px. Why would one pixel make such a difference? Design decisions like this are often the result of constrains imposed by media queries. A more likely intention is for the font-weight to be adjusted in relation to its size, for improved legibility on smaller screens.\n\nMedia queries are the best tool available for approximately achieving this goal, but they are not always an accurate reflection of the designers intent.\n\n## Maximum safe operating pressure\n\nI noticed the label on my barbecue gas cylinder says it has a maximum safe operating pressure. If I exceed this pressure when refilling it, it might explode (it actually won't, they have safety valves, but just imagine would). Web design doesn't explode quite as spectacularly as gas cylinders, but responsive design is exposed to a different kind of operating pressure.\n\nAs the screen size gets smaller, there is often a point where a design is pressured by the limitations imposed by smaller screens. A break-point represents the point where the design cannot withstand this pressure any longer; it reached its maximum safe operating pressure and the appropriate response is to adjust some aspects of the design.\n\nDesigners choose these break-points carefully. They probably have in mind where constraints like this begin to pressure the design, and how quickly it impacts overall quality. But in a compromise to technology, we are forced to choose a middle point, knowing that immediately before and after the break-point the design is often still pressured by constrains that demanded change.\n\n<img alt=\"gradient demonstrating the location of ideal font-sizes in relation to a break-point and the design pressure experienced between these points\" data-src=\"/img/interpolation.png\">\n\nThis graphic attempts to illustrate the location of ideal font-sizes in relation to a break-point. You can move the ideal font-size closer to the break-point but this only shifts the pressure to somewhere else in the design. Alternatively you can add more break-points until this becomes problematic, but ideally these changes would be introduced gradually and continuously to reduce pressure on the design as it's required.\n\nMedia queries are not the right tool for this. Media queries have been around longer than responsive design and responsive design was as much a reaction to the available technology, as the idea of media queries was to user needs. As is often the case, real world implementations of responsive design pushed the technology further than spec writers had imagined, and uncovered new uses, new requirements and new limitations.\n\nThis is normal process. And with the perspective we have now, it's easy to ask, if we were designing a technical solution for responsive design today, would media queries be the best tool to implement designers intentions? I think not; or at least not the only tool.\n\n## Live interpolation in the browser today\n\nTheoretically, between two ideal points, there is an ideal value for every screen size, that can be expressed as a ratio, or a function relative to the screen-size (or even another relative factor).\n\nPreviously I've written about techniques you can use to achieve some forms of interpolation using calc() and viewport units.\n\nMy favourite example of this demonstrates how you can interpolate between different modular scales with heading levels.\n\n<video src=\"/img/modular-scale.mp4\" style=\"max-width:600px\" autoplay loop></video>\n\nNot only do the individual font-sizes change in a controlled way relative to the viewport, but the ratio between the heading levels also fluidly changes. This means there is a changing but consistent relationship between each of the headings. If you haven't seen this yet, you should read my article [precise control over responsive typography](https://madebymike.com.au/writing/precise-control-responsive-typography/).\n\nThis technique allows linear interpolation between any two length values. This is great, but linear interpolation is not the only form of interpolation, and length values are not the only properties that change in responsive design. In addition to that, the first example in this article demonstrated a situation where font-size should change relative to the screen size, and font weight should change relative to font-size. At the moment this isn't possible with CSS.\n\n## Limitations of interpolation with calc()\n\nThere are some limiting factors when it come to changing the font-weight in relation to the font-size. Firstly the calc() techniques work only with length values and font-weight is a unitless value.\n\nThe problem with interpolating unitless values could potentially be solved with something called 'unit algebra'. Unit algebra would allow calc() expressions that contain CSS units to resolve to a different unit type or even a unitless number. E.g `calc(2rem * 2rem) = 4`. This could allow us to interpolate unitless values like font-weight or line-height, and maybe even open the door to non-linier equations (by multiplying units by themselves). Whilst this would be a great feature, the syntax for these equations is likely to be complicated and still leaves us wanting a more native solution. We're also not likely to see this anytime soon. As far as I am aware there is no formal proposal, and this exists only as an idea discussed in w3c mailing lists.\n\nThe second problem with interpolating properties like font-weight is that by default a web font won't have all the variations required to smoothly interpolate between these values. Usually a font-family will include the standard font and a single variation for bold, or at worse, just a faux-bold. Adding more variations will increase network requests, loading time and FOUF (Flash Of Unstyled Font). This is another constraint designers will be familiar with.\n\n## Variable fonts and the future of font interpolation\n\nLuckily the problem of limited font variations has a solution that is relatively close on the horizon. Variable fonts offer the ability to specify how bold or italic a font should be. And not just bold or italic but other 'axes of variation'. You can read more about variable fonts in Andrew Johnson's excellent A List Apart article: [Live font interpolation on the web](http://alistapart.com/article/live-font-interpolation-on-the-web).\n\nIn his article Andrew mentions a need for\n\"bending points—not just breaking points—to adapt type to the design\". He also hints at [some challenges we face interpolating font-values effectively](http://alistapart.com/article/live-font-interpolation-on-the-web#section8) on the web.\n\nMy main concern is that many of these 'axes of variation' are not length values and therefor, whilst I'm excited for the opportunities that variable font will provide, I see their potential limited by existing constraints.\n\n## How interpolation and animation works in browsers\n\nCSS is already great at interpolating values and it knows how to do this with a whole bunch of different [animatable properties](https://www.w3.org/TR/css3-transitions/#animatable-properties) and [property types](https://www.w3.org/TR/css3-transitions/#animatable-types).\n\nWe can interpolate the value of any property that [can be animated](http://canianimate.com/) using CSS transitions or keyframe animations.\n\nDuring an animation the browser works out how much time has elapsed for every frame and picks an intermediary value. For example if 1 second of a 4 second animation has elapsed, we pick a point that is 25% of the way between the original and final value.\n\n<object data=\"/img/easing.svg\" type=\"image/svg+xml\"></object>\n\nThis is easy to understand with numeric properties like width or position, but it works exactly the same with properties like color. Just imagine the same process happening for each of the R, G and B values that represents the color. You can think of them as 3 separate 2D interpolations that combine to give a color at each step of the animation.\n\n> An interesting side note with CSS animations, is that no matter what values you use to define color the browser will always transition through an RGB colour space. This means that although the final colour will be the same, the path taken and intermediary colors will be different.\n\nWe can manipulate the timing of an animation to get different results at different points of interpolation. By plotting an animation timing function on the same graph above, we can see how this changes the value returned at different points in the animation, while the start and end values remain the same.\n\n<object data=\"/img/easing2.svg\" type=\"image/svg+xml\"></object>\n\nThis is a non-linear interpolation and it’s really handy for creating all kinds of animation effects and more natural looking movement with acceleration and easing. We can define [animation timing functions in CSS](https://developer.mozilla.org/en/docs/Web/CSS/animation-timing-function) using [keywords, steps or cubic bezier curves](https://developer.mozilla.org/en-US/docs/Web/CSS/single-transition-timing-function) for greater control.\n\n## Interpolation outside animation\n\nSo far I've discussed the problem with media queries not always reflecting design intentions, and the limitations of interpolation with calc(). I've also shown how new features like variable fonts might be constrained by these limitations. The interesting thing is, we have all the tools we need to solve these problems, in CSS right now. Only they are tied closely to animation in the browser.\n\nThe rest of this article is going to talk about the idea of exposing a native interpolation function in CSS, how it might work, and what problems might solve. It's very hypothetical and it's ok if you don't agree with either the idea in general or how it should work.\n\nI've talked about interpolation and animation together, however interpolating values over time is just one possibility. The duration and elapsed time of an animation simply provides a percentage completion. Somewhere within the browser an interpolation function is called and it will dutifully return a value at the given percentage completion, according to the timing function.\n\nLet’s imagine we could access this function directly in CSS and pass it our own percentage. If we could change this value using media queries, [CSS variables (custom properties)](https://developer.mozilla.org/en-US/docs/Web/CSS/Using_CSS_variables) and calc(), what are some of the things we might be able to do?\n\nFirst let’s imaging a syntax. We need an `initial-value`, a `target-value`, a `percentage-completion` and a `timing-function`. The timing function could be an optional value and default to a linear interpolation. That means it might look something like this:\n\n```css\ninterpolate(initial-value, target-value, percentage-completion, [timing-function])\n```\n\nAnd could be used like this:\n\n```css\n.thing {\n  width: interpolate(0px, 500px, 0.5, linear);\n}\n```\n\n**Note**: This is a not real CSS, it is a hypothetical solution to a real problem for the purpose of discussion.  \n\nObviously in the example above it would be far easier to set the width to 250px. So, interpolation functions are not that useful without variables. We do have some variable values in CSS. Things like:\n\n  - the viewport width and height,\n  - the width and height of an element or its container,\n  - the number of siblings an element has, or\n  - the order of an element amongst its siblings.\n\nThese are all things that in one context or another we can know and use in CSS; unfortunately in many cases these variables are not easily queried to create conditional statements. There are some useful tricks to take advantage of them. Things like [advanced fluid typography](https://madebymike.com.au/writing/precise-control-responsive-typography/) and [quantity queries](http://alistapart.com/article/quantity-queries-for-css) are great real world examples.\n\nA more hypothetical example in a native interpolation function might look something like this:\n\n```css\n:root {\n  --max-viewport: 500px;\n  --min-viewport: 1000px;\n  --range: var(--max-viewport) - var(--min-viewport);\n  --percentage-completion: calc( (100vw - var(--min-viewport)) / var(--range) );\n}\n.thing {\n  width: interpolate(0px, 500px, var(--percentage-completion), ease-in);\n}\n```\n\nAlthough the above calculation is quite simple, but it's more than a bit ugly. This is because it uses CSS variables and unit algebra concepts I mentioned earlier to work out a percentage completion.\n\nA far neater solution would be a function to work out a percentage. This would reduce the above to something far more digestible like this:  \n\n```css\nroot: {\n  --percentage-completion: percentage(500px, 1000px, 100vw);\n}\n.thing {\n  width: interpolate(0px, 500px, var(--percentage-completion), ease-in);\n}\n```\n\n**Note:** Any interpolation function would probably need to clamp returned values to the specified range, as negative completion percentage are a likely result with variables.\n\nThis doesn't need to work with just length values. I mentioned that CSS has a whole bunch of [animatable properties](https://www.w3.org/TR/css3-transitions/#animatable-properties) that it already knows how to interpolate. It makes sense that any native function should work with these definitions. This means interpolating a color is also valid:\n\n```css\nroot: {\n  --percentage-completion: percentage(500px, 1000px, 100vw);\n}\n.thing {\n  background-color: interpolate(red, greed, var(--percentage-completion));\n}\n```\n\nThe above example of changing the background color doesn't make much sense in relation to the viewport, but there are more legitimate use cases for interpolating a color in relation to an elements width. We just can't as easily query the properties needed to do this, as we can with the viewport. [Container queries](http://alistapart.com/article/container-queries-once-more-unto-the-breach) seem to be forever on the horizon. It won't be soon, but my hope is that container queries also ship with container and element units, that work much like viewport units, only for the width of an element.\n\nContainer query units might look something like this:\n\n| Unit      | Description                                                           |\n|-----------|-----------------------------------------------------------------------|\n| cqw       | Relative to 1% of the container width                                 |\n| cqh       | Relative to 1% of the container height                                |\n| cqmin     | Relative to 1% of the container width or height, whichever is smaller |\n| cqmax     | Relative to 1% of the container width or height, whichever is larger  |\n| eqw       | Relative to 1% of the element width                                   |\n| eqh       | Relative to 1% of the element height                                  |\n| eqmin     | Relative to 1% of the element width or height, whichever is smaller   |\n| eqmax     | Relative to 1% of the element width or height, whichever is larger    |\n\n**Note**: I used the `cq` prefix is because `ch` is already a valid unit type and `eq` for consistency.\n\nWith units like these, we could do something like this:\n\n```css\nroot: {\n  --percentage-completion: percentage(0px, 100cqw, 100eqw);\n}\n.thing {\n  background-color: interpolate(red, greed, var(--percentage-completion));\n}\n```\nIn this example the percentage-completion is the percentage width of a child element, in relation to it's parent element. Allowing CSS property values to be relative to context like this opens up a whole range of possibilities for things like, dynamic progress bars, creative navigation components and data-visualisation.\n\nBut maybe this isn't the right solution. If we have a unit type for viewport width, container width and element width, where does this stop? DOM order, line length, color? Is it better introduce another function to get a value? E.g. `value-of(width)` if we do this, what about container width and non CSS properties like DOM order or line length? Magic keywords? `value-of(dom-order)`. I don't know!\n\nPerhaps you don't agree with any of this. Perhaps you think we shouldn't introduce more functional features to CSS. That's ok. I hope you will agree that there is a need for discussion, that break-points don't necessarily match the intentions of designers and that interpolation will become a more significant feature of web design with the introduction of variable fonts, and an increasing adoption of viewport units and dynamic layout features.\n\nI'd like to start a discussion and if you have ideas please [let me know](https://twitter.com/MikeRiethmuller) or consider [contributing to the issue](https://github.com/w3c/csswg-drafts/issues/581) on the CSS Working Group's, GitHub page.\n",
      "internal": {
        "type": "contentfulWritingBodyTextNode",
        "mediaType": "text/markdown",
        "content": "\nInterpolation is the estimation of a new value between two known values. This simple concept is vastly useful and it's commonly seen in animation on the web. With animation you declare the target properties and the end-state, and the browser will workout out the values in-between. Animation happens over time, but this is not the only dimension where interpolation can occur. In fact we interpolate values regularly in design, albeit manually, and particularly in responsive design. You may even do it unknowingly. Because of this, I think there is a need for a more native way of interpolating CSS values outside animation.\n\nIf you are a web designer the chances are you frequently have two primary screen sizes in mind, a small screen and a large screen, or the device and the desktop. I know you probably think about more than just these two sizes, but these two sizes are especially important, they represent the upper and lower bounds of your design. When you make adjustments for screen sizes between these constraints, what you are doing is like interpolation.\n\nWhen adjusting properties such as font-size, font-weight, image width or grid dimensions at specific screen sizes between the upper and lower bounds, these values usually fall somewhere between the choices you've made for the largest small and smallest screen size. It would be unusual for the font to get larger, then smaller, then larger again as the viewport changes. Or to give another example, if a font varied between bold, normal, italic, then bold and italic. It's not unusual for these things to change from one state to another, but typically these changes are progressive, not back and forward.\n\n## Design intent vs constraints\n\nWe choose break-points where properties are to be adjusted. We don't do this because it is ideal, we're forced to select a fixed number break-points, often quite arbitrarily, where the design should change. Although sometimes we may want these break-points, more often it is due to technical limitations on the web.\n\nMedia queries are our primary tool for adjusting design in relation to the screen size and for practical reasons, we are constrained to using a limited number of these. These limitations have shaped how we think about web design, and the choices we make about using break-points don't necessarily reflect the pure intentions of the designer.\n\nI've been told that good design is rarely arbitrary. It serves a purpose. If the font size is smaller, larger or its weight stronger, it's because that is the best experience for users, at that screen size. It's feasible to say that the best experience for some aspects of design, will vary directly in relation to the screen size rather than only at set points. This is the use-case for interpolation without animation.\n\nLet's illustrate this with an example, imagine the following CSS:\n\n```css\nbody {\n  font-weight: bold;\n}\n\n@media screen and (min-width: 700px){\n  body {\n    font-size: 1.2rem;\n    font-weight: normal;\n  }\n}\n```\n\nIt's unlikely a designer would decide bold font is uniquely suited to screen resolutions below 700px. Why would one pixel make such a difference? Design decisions like this are often the result of constrains imposed by media queries. A more likely intention is for the font-weight to be adjusted in relation to its size, for improved legibility on smaller screens.\n\nMedia queries are the best tool available for approximately achieving this goal, but they are not always an accurate reflection of the designers intent.\n\n## Maximum safe operating pressure\n\nI noticed the label on my barbecue gas cylinder says it has a maximum safe operating pressure. If I exceed this pressure when refilling it, it might explode (it actually won't, they have safety valves, but just imagine would). Web design doesn't explode quite as spectacularly as gas cylinders, but responsive design is exposed to a different kind of operating pressure.\n\nAs the screen size gets smaller, there is often a point where a design is pressured by the limitations imposed by smaller screens. A break-point represents the point where the design cannot withstand this pressure any longer; it reached its maximum safe operating pressure and the appropriate response is to adjust some aspects of the design.\n\nDesigners choose these break-points carefully. They probably have in mind where constraints like this begin to pressure the design, and how quickly it impacts overall quality. But in a compromise to technology, we are forced to choose a middle point, knowing that immediately before and after the break-point the design is often still pressured by constrains that demanded change.\n\n<img alt=\"gradient demonstrating the location of ideal font-sizes in relation to a break-point and the design pressure experienced between these points\" data-src=\"/img/interpolation.png\">\n\nThis graphic attempts to illustrate the location of ideal font-sizes in relation to a break-point. You can move the ideal font-size closer to the break-point but this only shifts the pressure to somewhere else in the design. Alternatively you can add more break-points until this becomes problematic, but ideally these changes would be introduced gradually and continuously to reduce pressure on the design as it's required.\n\nMedia queries are not the right tool for this. Media queries have been around longer than responsive design and responsive design was as much a reaction to the available technology, as the idea of media queries was to user needs. As is often the case, real world implementations of responsive design pushed the technology further than spec writers had imagined, and uncovered new uses, new requirements and new limitations.\n\nThis is normal process. And with the perspective we have now, it's easy to ask, if we were designing a technical solution for responsive design today, would media queries be the best tool to implement designers intentions? I think not; or at least not the only tool.\n\n## Live interpolation in the browser today\n\nTheoretically, between two ideal points, there is an ideal value for every screen size, that can be expressed as a ratio, or a function relative to the screen-size (or even another relative factor).\n\nPreviously I've written about techniques you can use to achieve some forms of interpolation using calc() and viewport units.\n\nMy favourite example of this demonstrates how you can interpolate between different modular scales with heading levels.\n\n<video src=\"/img/modular-scale.mp4\" style=\"max-width:600px\" autoplay loop></video>\n\nNot only do the individual font-sizes change in a controlled way relative to the viewport, but the ratio between the heading levels also fluidly changes. This means there is a changing but consistent relationship between each of the headings. If you haven't seen this yet, you should read my article [precise control over responsive typography](https://madebymike.com.au/writing/precise-control-responsive-typography/).\n\nThis technique allows linear interpolation between any two length values. This is great, but linear interpolation is not the only form of interpolation, and length values are not the only properties that change in responsive design. In addition to that, the first example in this article demonstrated a situation where font-size should change relative to the screen size, and font weight should change relative to font-size. At the moment this isn't possible with CSS.\n\n## Limitations of interpolation with calc()\n\nThere are some limiting factors when it come to changing the font-weight in relation to the font-size. Firstly the calc() techniques work only with length values and font-weight is a unitless value.\n\nThe problem with interpolating unitless values could potentially be solved with something called 'unit algebra'. Unit algebra would allow calc() expressions that contain CSS units to resolve to a different unit type or even a unitless number. E.g `calc(2rem * 2rem) = 4`. This could allow us to interpolate unitless values like font-weight or line-height, and maybe even open the door to non-linier equations (by multiplying units by themselves). Whilst this would be a great feature, the syntax for these equations is likely to be complicated and still leaves us wanting a more native solution. We're also not likely to see this anytime soon. As far as I am aware there is no formal proposal, and this exists only as an idea discussed in w3c mailing lists.\n\nThe second problem with interpolating properties like font-weight is that by default a web font won't have all the variations required to smoothly interpolate between these values. Usually a font-family will include the standard font and a single variation for bold, or at worse, just a faux-bold. Adding more variations will increase network requests, loading time and FOUF (Flash Of Unstyled Font). This is another constraint designers will be familiar with.\n\n## Variable fonts and the future of font interpolation\n\nLuckily the problem of limited font variations has a solution that is relatively close on the horizon. Variable fonts offer the ability to specify how bold or italic a font should be. And not just bold or italic but other 'axes of variation'. You can read more about variable fonts in Andrew Johnson's excellent A List Apart article: [Live font interpolation on the web](http://alistapart.com/article/live-font-interpolation-on-the-web).\n\nIn his article Andrew mentions a need for\n\"bending points—not just breaking points—to adapt type to the design\". He also hints at [some challenges we face interpolating font-values effectively](http://alistapart.com/article/live-font-interpolation-on-the-web#section8) on the web.\n\nMy main concern is that many of these 'axes of variation' are not length values and therefor, whilst I'm excited for the opportunities that variable font will provide, I see their potential limited by existing constraints.\n\n## How interpolation and animation works in browsers\n\nCSS is already great at interpolating values and it knows how to do this with a whole bunch of different [animatable properties](https://www.w3.org/TR/css3-transitions/#animatable-properties) and [property types](https://www.w3.org/TR/css3-transitions/#animatable-types).\n\nWe can interpolate the value of any property that [can be animated](http://canianimate.com/) using CSS transitions or keyframe animations.\n\nDuring an animation the browser works out how much time has elapsed for every frame and picks an intermediary value. For example if 1 second of a 4 second animation has elapsed, we pick a point that is 25% of the way between the original and final value.\n\n<object data=\"/img/easing.svg\" type=\"image/svg+xml\"></object>\n\nThis is easy to understand with numeric properties like width or position, but it works exactly the same with properties like color. Just imagine the same process happening for each of the R, G and B values that represents the color. You can think of them as 3 separate 2D interpolations that combine to give a color at each step of the animation.\n\n> An interesting side note with CSS animations, is that no matter what values you use to define color the browser will always transition through an RGB colour space. This means that although the final colour will be the same, the path taken and intermediary colors will be different.\n\nWe can manipulate the timing of an animation to get different results at different points of interpolation. By plotting an animation timing function on the same graph above, we can see how this changes the value returned at different points in the animation, while the start and end values remain the same.\n\n<object data=\"/img/easing2.svg\" type=\"image/svg+xml\"></object>\n\nThis is a non-linear interpolation and it’s really handy for creating all kinds of animation effects and more natural looking movement with acceleration and easing. We can define [animation timing functions in CSS](https://developer.mozilla.org/en/docs/Web/CSS/animation-timing-function) using [keywords, steps or cubic bezier curves](https://developer.mozilla.org/en-US/docs/Web/CSS/single-transition-timing-function) for greater control.\n\n## Interpolation outside animation\n\nSo far I've discussed the problem with media queries not always reflecting design intentions, and the limitations of interpolation with calc(). I've also shown how new features like variable fonts might be constrained by these limitations. The interesting thing is, we have all the tools we need to solve these problems, in CSS right now. Only they are tied closely to animation in the browser.\n\nThe rest of this article is going to talk about the idea of exposing a native interpolation function in CSS, how it might work, and what problems might solve. It's very hypothetical and it's ok if you don't agree with either the idea in general or how it should work.\n\nI've talked about interpolation and animation together, however interpolating values over time is just one possibility. The duration and elapsed time of an animation simply provides a percentage completion. Somewhere within the browser an interpolation function is called and it will dutifully return a value at the given percentage completion, according to the timing function.\n\nLet’s imagine we could access this function directly in CSS and pass it our own percentage. If we could change this value using media queries, [CSS variables (custom properties)](https://developer.mozilla.org/en-US/docs/Web/CSS/Using_CSS_variables) and calc(), what are some of the things we might be able to do?\n\nFirst let’s imaging a syntax. We need an `initial-value`, a `target-value`, a `percentage-completion` and a `timing-function`. The timing function could be an optional value and default to a linear interpolation. That means it might look something like this:\n\n```css\ninterpolate(initial-value, target-value, percentage-completion, [timing-function])\n```\n\nAnd could be used like this:\n\n```css\n.thing {\n  width: interpolate(0px, 500px, 0.5, linear);\n}\n```\n\n**Note**: This is a not real CSS, it is a hypothetical solution to a real problem for the purpose of discussion.  \n\nObviously in the example above it would be far easier to set the width to 250px. So, interpolation functions are not that useful without variables. We do have some variable values in CSS. Things like:\n\n  - the viewport width and height,\n  - the width and height of an element or its container,\n  - the number of siblings an element has, or\n  - the order of an element amongst its siblings.\n\nThese are all things that in one context or another we can know and use in CSS; unfortunately in many cases these variables are not easily queried to create conditional statements. There are some useful tricks to take advantage of them. Things like [advanced fluid typography](https://madebymike.com.au/writing/precise-control-responsive-typography/) and [quantity queries](http://alistapart.com/article/quantity-queries-for-css) are great real world examples.\n\nA more hypothetical example in a native interpolation function might look something like this:\n\n```css\n:root {\n  --max-viewport: 500px;\n  --min-viewport: 1000px;\n  --range: var(--max-viewport) - var(--min-viewport);\n  --percentage-completion: calc( (100vw - var(--min-viewport)) / var(--range) );\n}\n.thing {\n  width: interpolate(0px, 500px, var(--percentage-completion), ease-in);\n}\n```\n\nAlthough the above calculation is quite simple, but it's more than a bit ugly. This is because it uses CSS variables and unit algebra concepts I mentioned earlier to work out a percentage completion.\n\nA far neater solution would be a function to work out a percentage. This would reduce the above to something far more digestible like this:  \n\n```css\nroot: {\n  --percentage-completion: percentage(500px, 1000px, 100vw);\n}\n.thing {\n  width: interpolate(0px, 500px, var(--percentage-completion), ease-in);\n}\n```\n\n**Note:** Any interpolation function would probably need to clamp returned values to the specified range, as negative completion percentage are a likely result with variables.\n\nThis doesn't need to work with just length values. I mentioned that CSS has a whole bunch of [animatable properties](https://www.w3.org/TR/css3-transitions/#animatable-properties) that it already knows how to interpolate. It makes sense that any native function should work with these definitions. This means interpolating a color is also valid:\n\n```css\nroot: {\n  --percentage-completion: percentage(500px, 1000px, 100vw);\n}\n.thing {\n  background-color: interpolate(red, greed, var(--percentage-completion));\n}\n```\n\nThe above example of changing the background color doesn't make much sense in relation to the viewport, but there are more legitimate use cases for interpolating a color in relation to an elements width. We just can't as easily query the properties needed to do this, as we can with the viewport. [Container queries](http://alistapart.com/article/container-queries-once-more-unto-the-breach) seem to be forever on the horizon. It won't be soon, but my hope is that container queries also ship with container and element units, that work much like viewport units, only for the width of an element.\n\nContainer query units might look something like this:\n\n| Unit      | Description                                                           |\n|-----------|-----------------------------------------------------------------------|\n| cqw       | Relative to 1% of the container width                                 |\n| cqh       | Relative to 1% of the container height                                |\n| cqmin     | Relative to 1% of the container width or height, whichever is smaller |\n| cqmax     | Relative to 1% of the container width or height, whichever is larger  |\n| eqw       | Relative to 1% of the element width                                   |\n| eqh       | Relative to 1% of the element height                                  |\n| eqmin     | Relative to 1% of the element width or height, whichever is smaller   |\n| eqmax     | Relative to 1% of the element width or height, whichever is larger    |\n\n**Note**: I used the `cq` prefix is because `ch` is already a valid unit type and `eq` for consistency.\n\nWith units like these, we could do something like this:\n\n```css\nroot: {\n  --percentage-completion: percentage(0px, 100cqw, 100eqw);\n}\n.thing {\n  background-color: interpolate(red, greed, var(--percentage-completion));\n}\n```\nIn this example the percentage-completion is the percentage width of a child element, in relation to it's parent element. Allowing CSS property values to be relative to context like this opens up a whole range of possibilities for things like, dynamic progress bars, creative navigation components and data-visualisation.\n\nBut maybe this isn't the right solution. If we have a unit type for viewport width, container width and element width, where does this stop? DOM order, line length, color? Is it better introduce another function to get a value? E.g. `value-of(width)` if we do this, what about container width and non CSS properties like DOM order or line length? Magic keywords? `value-of(dom-order)`. I don't know!\n\nPerhaps you don't agree with any of this. Perhaps you think we shouldn't introduce more functional features to CSS. That's ok. I hope you will agree that there is a need for discussion, that break-points don't necessarily match the intentions of designers and that interpolation will become a more significant feature of web design with the introduction of variable fonts, and an increasing adoption of viewport units and dynamic layout features.\n\nI'd like to start a discussion and if you have ideas please [let me know](https://twitter.com/MikeRiethmuller) or consider [contributing to the issue](https://github.com/w3c/csswg-drafts/issues/581) on the CSS Working Group's, GitHub page.\n",
        "contentDigest": "431cd06fddb9298eb8b2ad2235748be6",
        "owner": "gatsby-source-contentful"
      }
    },
    "a7bdaa30-4cbf-5a24-8f2c-0cb4eb0eef41": {
      "id": "a7bdaa30-4cbf-5a24-8f2c-0cb4eb0eef41",
      "parent": "7b95e6bc-209b-5da6-a1fc-5eed05257a3a",
      "children": [
        "526e9e64-6d53-52d0-bcaa-5aa949032b59"
      ],
      "description": "A very tongue-in-cheek article about why jQuery is good for the web.",
      "internal": {
        "type": "contentfulWritingDescriptionTextNode",
        "mediaType": "text/markdown",
        "content": "A very tongue-in-cheek article about why jQuery is good for the web.",
        "contentDigest": "c5c5bf136d377b51a98f2ad70cba5880",
        "owner": "gatsby-source-contentful"
      }
    },
    "8882dfb4-a256-5f64-9b6c-abaa1bf71b86": {
      "id": "8882dfb4-a256-5f64-9b6c-abaa1bf71b86",
      "parent": "7b95e6bc-209b-5da6-a1fc-5eed05257a3a",
      "children": [
        "a1d227e0-244f-51ef-b713-c361cf1fc45d"
      ],
      "body": "jQuery I love you. We've been together for 10 years and that's more than 50 years in JavaScript framework lifetimes. I might see you now less often than I did once, but I need you now no less than when we first met.\n\nI’ll never forget our first function together:\n\n```javascript\n$(document).ready(function(){\n  alert(‘page loaded’);\n});\n```\nHa! I hope you will forgive me for that alert. That’s how we did things then and I wanted to be sure you worked; of course you worked, I would never doubt it now. We don’t do `$(document).ready()` very much these days, but I still remember the good times we had. I also remember the pain I had trying to do this without you!\n\nYou were always there for me when things were tough. You made things consistent, how they should be, often without me even realising you were doing it. The web was a scary place and you brought order to it. You gave me confidence.\n\nYou were there for me too when I had no clue what I was doing. You helped me achieve things I would have never achieved on my own. In some ways, you made it too easy for me and I did some things I should have never done; I'm sorry, that was my fault not yours.\n\nShallow though it might be, I like the way you look. I can recognise your form anywhere. I love your neat and tidy closures and your chainable methods that keep me wanting more. I look upon you with comfort and familiarity. You always make me smile.  \n\nYou are selfless. So selfless in fact, that you made me less reliant on you. You taught me how to think. And not just me, but the world around us has been shaped by your influence. Everytime I hear someone say “Native JavaScript” I smile and I think of you. You are so brilliant they needed a term to describe your absence. You have been my fearless leader and guiding light. That’s why I love you jQuery.\n\nI wish those that didn't know you as well as I do, would treat you with more respect. Younger suitors like Angular and React will come and go; some will make their mark and one day they might even be worthy of comparison. But you will always be my first love; my one true love.\n\nIt hurts me when I hear them say things like “you don’t need jQuery”. They don’t remember how dark it was before your light. We needed you then and we still need you now. I like the way you do things and although the years have passed, for certain tasks, you still do what you do better than anyone else could. I trust you. I know you and you know me. There will always be other ways we could do things, but I know I can rely on you and you’re always there when I need you to be.\n\nSo thank you jQuery! It’s been a wonderful 10 years. I hope we have another 10, but if we don’t it will always be with dignity and respect that I remember you and never less, because you do the perfect job of making yourself redundant. It is befitting that you do this so gracefully. If the time does come to say goodbye it will be because you have given us all that you can. To not be needed does not mean you will not forever be important to the me and the web.\n\nThank you jQuery.",
      "internal": {
        "type": "contentfulWritingBodyTextNode",
        "mediaType": "text/markdown",
        "content": "jQuery I love you. We've been together for 10 years and that's more than 50 years in JavaScript framework lifetimes. I might see you now less often than I did once, but I need you now no less than when we first met.\n\nI’ll never forget our first function together:\n\n```javascript\n$(document).ready(function(){\n  alert(‘page loaded’);\n});\n```\nHa! I hope you will forgive me for that alert. That’s how we did things then and I wanted to be sure you worked; of course you worked, I would never doubt it now. We don’t do `$(document).ready()` very much these days, but I still remember the good times we had. I also remember the pain I had trying to do this without you!\n\nYou were always there for me when things were tough. You made things consistent, how they should be, often without me even realising you were doing it. The web was a scary place and you brought order to it. You gave me confidence.\n\nYou were there for me too when I had no clue what I was doing. You helped me achieve things I would have never achieved on my own. In some ways, you made it too easy for me and I did some things I should have never done; I'm sorry, that was my fault not yours.\n\nShallow though it might be, I like the way you look. I can recognise your form anywhere. I love your neat and tidy closures and your chainable methods that keep me wanting more. I look upon you with comfort and familiarity. You always make me smile.  \n\nYou are selfless. So selfless in fact, that you made me less reliant on you. You taught me how to think. And not just me, but the world around us has been shaped by your influence. Everytime I hear someone say “Native JavaScript” I smile and I think of you. You are so brilliant they needed a term to describe your absence. You have been my fearless leader and guiding light. That’s why I love you jQuery.\n\nI wish those that didn't know you as well as I do, would treat you with more respect. Younger suitors like Angular and React will come and go; some will make their mark and one day they might even be worthy of comparison. But you will always be my first love; my one true love.\n\nIt hurts me when I hear them say things like “you don’t need jQuery”. They don’t remember how dark it was before your light. We needed you then and we still need you now. I like the way you do things and although the years have passed, for certain tasks, you still do what you do better than anyone else could. I trust you. I know you and you know me. There will always be other ways we could do things, but I know I can rely on you and you’re always there when I need you to be.\n\nSo thank you jQuery! It’s been a wonderful 10 years. I hope we have another 10, but if we don’t it will always be with dignity and respect that I remember you and never less, because you do the perfect job of making yourself redundant. It is befitting that you do this so gracefully. If the time does come to say goodbye it will be because you have given us all that you can. To not be needed does not mean you will not forever be important to the me and the web.\n\nThank you jQuery.",
        "contentDigest": "5f9f97d6c48e8d909238b45e1b471296",
        "owner": "gatsby-source-contentful"
      }
    },
    "94f77e6c-3427-56f8-beb5-984846348062": {
      "id": "94f77e6c-3427-56f8-beb5-984846348062",
      "parent": "a2f197ea-93d2-50d7-adfd-b3e34a24a2f2",
      "children": [
        "f8c5451f-cb6a-56aa-8ed3-cd4cd9822c3d"
      ],
      "description": "A more personal article on being a developer and having an average mathematical ability.",
      "internal": {
        "type": "contentfulWritingDescriptionTextNode",
        "mediaType": "text/markdown",
        "content": "A more personal article on being a developer and having an average mathematical ability.",
        "contentDigest": "b99256b12a284d2a256b8b780046de9b",
        "owner": "gatsby-source-contentful"
      }
    },
    "0d3f20f9-0a59-5827-93be-03b9ec6df855": {
      "id": "0d3f20f9-0a59-5827-93be-03b9ec6df855",
      "parent": "a2f197ea-93d2-50d7-adfd-b3e34a24a2f2",
      "children": [
        "85655e10-d94f-5cba-aa70-fa3425dff26f"
      ],
      "body": "When I was at school I had a strong interest in learning to code, but I was terrible at maths. My teachers and parents told me I would need strong mathematical abilities to be a good developer and although they didn't mean it to be, I found this discouraging. I really wasn't good with numbers and I couldn't see this changing.\n\nOn the one hand I was right, it didn't change and I've only recently learnt to use maths to great effect when coding. On the other hand, although my abilities haven't changed, my approach and appreciation for maths has.\n\nAnother thing I was wrong about was that I hated maths. This turned out to be a symptom of a different problem. For whatever reason, and to this day still, my brain sometimes freaks out when asked to do simple mental arithmetic.\n\nThis has been a real issue for me. If you ask me to calculate something in my head, there is a small but very real chance my brain will have a kernel panic. Sometimes it recovers and I get the answer in about the same time as an average 5 year old. On other occasions my brain just shuts down. At this point I have the choice to reboot and start the problem again from the beginning, or I could just run away. It can be embarrassing, so in public I avoid situations where I might be asked to do maths and if stuck try to divert attention from myself. This has led to me avoiding maths in general and downplaying any ability in this area.\n\nIt was eventually coding that allowed me to realise that my handicap with mental arithmetic was not an in indication of my overall ability or my capacity to enjoy mathematical problems, and it does not need to be a limiting factor me as a developer.\n\nObviously there are many different roles that you can choose as a developer. Some of these probably do require a greater affinity for maths. I'm not making physics engines, 3D rendering applications, or sending spacecraft to Mars. If you are doing these things, and I'm just guessing here, maybe my experience doesn't apply to you.\n\nPrimarily, I'm a web developer and I consider myself more of a front-end developer as well. At any level this is still a highly technical role and there is a lot that [front-end developers need to be aware](https://css-tricks.com/front-end-developer-aware/) of, but for the most part, hard maths is not one of those things.\n\nSo for a long time, despite my job as a developer, I successfully avoided thinking about maths in a direct way. This was particularly true early on in my career, but at some point I started to see maths in the things I was doing. Things like animation, colour, layout, typography, almost everywhere actually. Do you know what else I realised? I was actually good at many of these things!\n\nI was confidently tweaking numbers that represent bezier curves to manipulate motion in animation. I was using modular scales and other ratios in my designs. I understood colour theory and contrast.\n\nBut whilst I understood the results of what I was doing, initially I didn't deeply understand the maths behind a lot of these concepts. I wanted to explore this more and in my spare time I started experimenting with creative coding.\n\nThis opened my eyes to a lot of maths I already knew. I found I already had a reasonable understanding of how colour transitions worked in different 2D and 3D colour spaces. I was already using triangles and circles to calculate distance like Pythagoras himself. Occasionally, I was even playing with vectors, calculus and trigonometry in HTML canvas to create complex physics based animation.\n\nExperimenting with these things does not require any mental arithmetic. With code it's easy for me to visualise mathematical concepts and for once I can begin to understand how and why maths works. This was completely different from my attempts at school to understand a black-box with several disconnected, one dimensional experiments.\n\nSuddenly I was not hating maths any more. I looked at the things I was doing with my eyes more open. The more I learnt, the more I discovered mathamatical rules underpin a lot of my work. Daniel Shiffman's book [The Nature of Code](http://natureofcode.com/) and [his videos](https://www.youtube.com/user/shiffman) showed me even more examples and formulas I could use. I found new practical applications for mathematical concepts everywhere.\n\nMaths now inspires me as much as it scares and I'm willing to engage with more advanced concepts even those I don't fully understand. YouTube channels like [Numberphile](https://www.youtube.com/user/numberphile) and [Standup Maths](https://www.youtube.com/user/standupmaths) have shown me it is possible to understand and appreciate mathematics on a higher level while a deeper understanding may be out of reach. I feel proud that can understand concepts, implications, connections and the beauty of complexity, rather than let down that I can't compute the details. This is the same effect that coding had for me. I never got this inspiration in school.\n\nMy brain still crashes sometimes when attempting to do mental arithmetic, but that's ok. Although you can probably do it 10 times faster than me, it doesn't count if you're not solving the right problem. When working on problems I don't fully understand I no longer feel the pressure to solve them in the same 90 minutes as everyone else. I feel my slower pace sometimes allows me to focus better.\n\nAlthough I haven't become great at maths, with more willingness to engage, my ability has gradually improved. Maybe one day I'll fix whatever bug there is in my brain code, that causes me crash when attempting mental arithmetic.\n",
      "internal": {
        "type": "contentfulWritingBodyTextNode",
        "mediaType": "text/markdown",
        "content": "When I was at school I had a strong interest in learning to code, but I was terrible at maths. My teachers and parents told me I would need strong mathematical abilities to be a good developer and although they didn't mean it to be, I found this discouraging. I really wasn't good with numbers and I couldn't see this changing.\n\nOn the one hand I was right, it didn't change and I've only recently learnt to use maths to great effect when coding. On the other hand, although my abilities haven't changed, my approach and appreciation for maths has.\n\nAnother thing I was wrong about was that I hated maths. This turned out to be a symptom of a different problem. For whatever reason, and to this day still, my brain sometimes freaks out when asked to do simple mental arithmetic.\n\nThis has been a real issue for me. If you ask me to calculate something in my head, there is a small but very real chance my brain will have a kernel panic. Sometimes it recovers and I get the answer in about the same time as an average 5 year old. On other occasions my brain just shuts down. At this point I have the choice to reboot and start the problem again from the beginning, or I could just run away. It can be embarrassing, so in public I avoid situations where I might be asked to do maths and if stuck try to divert attention from myself. This has led to me avoiding maths in general and downplaying any ability in this area.\n\nIt was eventually coding that allowed me to realise that my handicap with mental arithmetic was not an in indication of my overall ability or my capacity to enjoy mathematical problems, and it does not need to be a limiting factor me as a developer.\n\nObviously there are many different roles that you can choose as a developer. Some of these probably do require a greater affinity for maths. I'm not making physics engines, 3D rendering applications, or sending spacecraft to Mars. If you are doing these things, and I'm just guessing here, maybe my experience doesn't apply to you.\n\nPrimarily, I'm a web developer and I consider myself more of a front-end developer as well. At any level this is still a highly technical role and there is a lot that [front-end developers need to be aware](https://css-tricks.com/front-end-developer-aware/) of, but for the most part, hard maths is not one of those things.\n\nSo for a long time, despite my job as a developer, I successfully avoided thinking about maths in a direct way. This was particularly true early on in my career, but at some point I started to see maths in the things I was doing. Things like animation, colour, layout, typography, almost everywhere actually. Do you know what else I realised? I was actually good at many of these things!\n\nI was confidently tweaking numbers that represent bezier curves to manipulate motion in animation. I was using modular scales and other ratios in my designs. I understood colour theory and contrast.\n\nBut whilst I understood the results of what I was doing, initially I didn't deeply understand the maths behind a lot of these concepts. I wanted to explore this more and in my spare time I started experimenting with creative coding.\n\nThis opened my eyes to a lot of maths I already knew. I found I already had a reasonable understanding of how colour transitions worked in different 2D and 3D colour spaces. I was already using triangles and circles to calculate distance like Pythagoras himself. Occasionally, I was even playing with vectors, calculus and trigonometry in HTML canvas to create complex physics based animation.\n\nExperimenting with these things does not require any mental arithmetic. With code it's easy for me to visualise mathematical concepts and for once I can begin to understand how and why maths works. This was completely different from my attempts at school to understand a black-box with several disconnected, one dimensional experiments.\n\nSuddenly I was not hating maths any more. I looked at the things I was doing with my eyes more open. The more I learnt, the more I discovered mathamatical rules underpin a lot of my work. Daniel Shiffman's book [The Nature of Code](http://natureofcode.com/) and [his videos](https://www.youtube.com/user/shiffman) showed me even more examples and formulas I could use. I found new practical applications for mathematical concepts everywhere.\n\nMaths now inspires me as much as it scares and I'm willing to engage with more advanced concepts even those I don't fully understand. YouTube channels like [Numberphile](https://www.youtube.com/user/numberphile) and [Standup Maths](https://www.youtube.com/user/standupmaths) have shown me it is possible to understand and appreciate mathematics on a higher level while a deeper understanding may be out of reach. I feel proud that can understand concepts, implications, connections and the beauty of complexity, rather than let down that I can't compute the details. This is the same effect that coding had for me. I never got this inspiration in school.\n\nMy brain still crashes sometimes when attempting to do mental arithmetic, but that's ok. Although you can probably do it 10 times faster than me, it doesn't count if you're not solving the right problem. When working on problems I don't fully understand I no longer feel the pressure to solve them in the same 90 minutes as everyone else. I feel my slower pace sometimes allows me to focus better.\n\nAlthough I haven't become great at maths, with more willingness to engage, my ability has gradually improved. Maybe one day I'll fix whatever bug there is in my brain code, that causes me crash when attempting mental arithmetic.\n",
        "contentDigest": "e8044cb93b2a8b3e6a885100ccca1b0e",
        "owner": "gatsby-source-contentful"
      }
    },
    "b9f2ada5-ca57-5d1a-9ba3-629df8351a6d": {
      "id": "b9f2ada5-ca57-5d1a-9ba3-629df8351a6d",
      "parent": "47f21b2f-8c31-573c-b016-8af2a56545cf",
      "children": [
        "d49a5870-a6dd-54ca-a3ce-5362458f6c86"
      ],
      "body": "Merging deeply nested data in JSON is more difficult than it might seem.\n\nIn the past I've used a brute force approach when dealing with small and well structured data. This approach proved completely inadequate for large volumes of real world data.\n\nImagine we have a monthly darts competition and at the end of each month record the scores in a JSON file:\n\n```javascript\ndata_jan = { \"name\": \"mike\", \"score\": 47 }\ndata_feb = { \"name\": \"mike\", \"score\": 25 }\n```\n(I have no clue what a darts score should look like)\n\nAt this level getting mike's total score is trivial `data_jan.score +  data_feb.score`. But if we add more players, more months or more data getting totals quickly becomes a bit more involved.\n\n```javascript\ndata_jan = [\n  { \"name\": \"mike\", \"score\": 47, \"team\": \"A\" },\n  { \"name\": \"jill\", \"score\": 51, \"team\": \"B\" }\n]\ndata_feb = [\n  { \"name\": \"mike\", \"score\": 25, \"team\": \"A\" },\n  { \"name\": \"jill\", \"score\": 41, \"team\": \"B\" }\n]\n```\n\nYour first instinct might be to find all the players then for each player, loop over all the months, find score and add this to the current players total.\n\nWith help from something like [jQuery](http://jquery.com/) or [Underscore](http://underscorejs.org/), enough nested loops and liberal use filter and map statements you might get a result.\n\nThis will work until you run into some real world situations like players absent or a need for both team and player totals. In short this type of solution is a bit of a house of cards.\n\nThinking more about the problem I soon realised that it is similar to the use case for `.extend()` that both jQuery and Underscore provide. The only difference is I want control when merging so that I can change values and not just overwrite.\n\nIt was eventually suggested that I checkout [Lodash](http://lodash.com/) and I found the `.merge()` function allows a callback for data manipulation. So to get player totals all we need is:\n\n```javascript\n_.merge(data_jan, data_feb, function(a,b){\n  if(_.isNumber(a) && _.isNumber(b)){\n  \treturn a + b\n  }\n  return undefined\n})\n```\n\nThis is much faster and easier to follow than nested loops.\n\nOne small downside is you can only merge 2 objects at a time and my only other complaint is I don't have access to the key in the callback.\n\nBonus: If you are using Underscore, Lodash is almost a one for one replacement so it's easy to switch.\n\n**Update**\n\nIf you're using jQuery and do not want to add another library to the mix I wrote a jQuery extension to merge objects:\n\nhttps://gist.github.com/MadeByMike/e57dd16797acf5d105b5\n\nIt works much like `jQuery.extend()` however the first parameter is an array containing the objects to merge. The 2nd parameter is a callback that allows you to modify the data while merging.\n\n```javascript\n$.mergeObjects(merge_array, callback)\n```\n\nE.g.\n\n```javascript\nmerge_array = [{ \"name\": \"mike\", \"score\": 47},{ \"name\": \"mike\", \"score\": 11}];\n$.mergeObjects(merge_array, function(a,b){\n\tif($.isNumeric( a ) && $.isNumeric( a )){\n    \treturn a+b;\n    }\n    return b;\n});\n// Will return: { \"name\": \"mike\", \"score\": 58}\n```",
      "internal": {
        "type": "contentfulWritingBodyTextNode",
        "mediaType": "text/markdown",
        "content": "Merging deeply nested data in JSON is more difficult than it might seem.\n\nIn the past I've used a brute force approach when dealing with small and well structured data. This approach proved completely inadequate for large volumes of real world data.\n\nImagine we have a monthly darts competition and at the end of each month record the scores in a JSON file:\n\n```javascript\ndata_jan = { \"name\": \"mike\", \"score\": 47 }\ndata_feb = { \"name\": \"mike\", \"score\": 25 }\n```\n(I have no clue what a darts score should look like)\n\nAt this level getting mike's total score is trivial `data_jan.score +  data_feb.score`. But if we add more players, more months or more data getting totals quickly becomes a bit more involved.\n\n```javascript\ndata_jan = [\n  { \"name\": \"mike\", \"score\": 47, \"team\": \"A\" },\n  { \"name\": \"jill\", \"score\": 51, \"team\": \"B\" }\n]\ndata_feb = [\n  { \"name\": \"mike\", \"score\": 25, \"team\": \"A\" },\n  { \"name\": \"jill\", \"score\": 41, \"team\": \"B\" }\n]\n```\n\nYour first instinct might be to find all the players then for each player, loop over all the months, find score and add this to the current players total.\n\nWith help from something like [jQuery](http://jquery.com/) or [Underscore](http://underscorejs.org/), enough nested loops and liberal use filter and map statements you might get a result.\n\nThis will work until you run into some real world situations like players absent or a need for both team and player totals. In short this type of solution is a bit of a house of cards.\n\nThinking more about the problem I soon realised that it is similar to the use case for `.extend()` that both jQuery and Underscore provide. The only difference is I want control when merging so that I can change values and not just overwrite.\n\nIt was eventually suggested that I checkout [Lodash](http://lodash.com/) and I found the `.merge()` function allows a callback for data manipulation. So to get player totals all we need is:\n\n```javascript\n_.merge(data_jan, data_feb, function(a,b){\n  if(_.isNumber(a) && _.isNumber(b)){\n  \treturn a + b\n  }\n  return undefined\n})\n```\n\nThis is much faster and easier to follow than nested loops.\n\nOne small downside is you can only merge 2 objects at a time and my only other complaint is I don't have access to the key in the callback.\n\nBonus: If you are using Underscore, Lodash is almost a one for one replacement so it's easy to switch.\n\n**Update**\n\nIf you're using jQuery and do not want to add another library to the mix I wrote a jQuery extension to merge objects:\n\nhttps://gist.github.com/MadeByMike/e57dd16797acf5d105b5\n\nIt works much like `jQuery.extend()` however the first parameter is an array containing the objects to merge. The 2nd parameter is a callback that allows you to modify the data while merging.\n\n```javascript\n$.mergeObjects(merge_array, callback)\n```\n\nE.g.\n\n```javascript\nmerge_array = [{ \"name\": \"mike\", \"score\": 47},{ \"name\": \"mike\", \"score\": 11}];\n$.mergeObjects(merge_array, function(a,b){\n\tif($.isNumeric( a ) && $.isNumeric( a )){\n    \treturn a+b;\n    }\n    return b;\n});\n// Will return: { \"name\": \"mike\", \"score\": 58}\n```",
        "contentDigest": "793a8908c70203e3be0eeecb800c9645",
        "owner": "gatsby-source-contentful"
      }
    },
    "953a7add-782d-5c98-9b05-db47236fa8cd": {
      "id": "953a7add-782d-5c98-9b05-db47236fa8cd",
      "parent": "d562810d-ee79-5edc-8a4d-e0546757cda3",
      "children": [
        "43ff1ece-e5b7-5d9f-9ead-0230390b9c56"
      ],
      "description": "Creating fluid responsive typography with calc and viewport units.",
      "internal": {
        "type": "contentfulWritingDescriptionTextNode",
        "mediaType": "text/markdown",
        "content": "Creating fluid responsive typography with calc and viewport units.",
        "contentDigest": "5726bfd41a374b51eedafee0c30cad88",
        "owner": "gatsby-source-contentful"
      }
    },
    "4d8876be-0337-50e2-9044-eb7bc16b973c": {
      "id": "4d8876be-0337-50e2-9044-eb7bc16b973c",
      "parent": "d562810d-ee79-5edc-8a4d-e0546757cda3",
      "children": [
        "27c62192-a391-5b17-858b-b7d510546866"
      ],
      "body": "It is possible to have precise control over responsive typography. Using calc() and viewport units you can create fluid type that scales perfectly between specific pixel values, within a specific viewport range.\n\n<p>\n<a href=\"http://codepen.io/MadeByMike/pen/YPJJYv\" class=\"responsive-type\">\n  This text is limited to between 20px and 40px, over a viewport range of 600px to 800px.\n</a>\n</p>\n\nI don’t know why we don’t see viewport units being used more extensively for creating designs with responsive typography.\n\nViewport units have been around since 2012 and are [fairly well supported](http://caniuse.com/#feat=viewport-units). In fact Internet Explorer was an early mover on this and supports viewport units as far back as IE9.\n\nThey are also really easy to understand. One viewport unit is simply 1% of the viewport and there are 4 types of viewport units:\n\n  * vw - viewport width,\n  * vh - viewport height,\n  * vmin - height or width, whichever is smaller,\n  * vmax - height or width, whichever is larger\n\nSo the reason viewport units are not used more extensively is probably not due to a lack of browser support or developers' understanding. My guess is it’s probably more likely to do with the lack of precise control designers have over the font-size.\n\nDesigners that love typography often really love typography and they enjoy precise control over line-height, font-size, letter-spacing and other elements of typography those of us not in the club might not even know exist.\n\nThis desire for precise control is the reason that some designers still prefer to declare these properties using pixels. But it doesn’t really matter, whether they use ems, rems or percentages the truth is, they are all just abstractions of a base font size and that is usually 16 pixels. So they have never really had to give up complete control. It’s not difficult to work out what font-size an element is, as long as we know the base font-size.\n\nBut viewport units are different! They represent a fundamental change in approach. Unlike all the other units, viewport units are not relative to the base font size in any way. Instead they are relative to the viewport, which the user controls, and that might be scary for some.\n\nBut there are advantages to using viewport units, a font-size declared with viewport units is fluid, meaning it will scale smoothly. This is a clearly a better experience than [clunky responsive typography techniques](http://codepen.io/MadeByMike/pen/c54dfa521cf08e0439943b7a745f77f0) that require multiple media queries.\n\nResponsive typography with viewport units is really easy to implement, just declare the base font-size using vw; as long as you are not using pixels elsewhere in your stylesheet, other units are relative to the base font-size, (which is now viewport units) so they will all scale accordingly.\n\nBut there are a few rough edges you will need to sand back. Firstly when you get down to a very small viewport scaling is problematic. Luckily there are a few good methods for avoiding this.\n\n## Limit font scaling with calc()\n\nIf you would like set an exact minimum font-size in pixels you can use calc().\n\n```css\n:root{\n  font-size: calc(16px + 3vw);\n}\n```\n\nThis example says set the default size to 16px + 3vw.\n\n**Note**: There are still issues in some browsers when using viewport units and calc() together, so for now media queries is probably safer.\n\n## Limit font scaling with media queries\n\nYou can prevent the text from scaling below a specific threshold simply by using a media query and only applying viewport units above a certain device resolution.\n\n```css\n:root { font-size: 18px;  /* default below 600px */ }\n@media (min-width: 600px){\n  :root {\n    font-size: 3vw;\n  }\n}\n```\n\nWe can also stop scaling above a specific font-size, but for this we need to first work out what the viewport size will be at the font-size we want to stop scaling. For that we need a bit of maths:\n\n```text\nfont-size / ( number of viewport units / 100 )\nEg. 24 / ( 3 / 100 ) = 800px\n```\n\nWith that result just set another media query to change the root font-size back to a fixed unit.\n\n```css\n...\n@media (min-width: 800px){\n  :root {\n    font-size: 24px;  /*above 800px */\n  }\n}\n```\n\nThe calculations are not that hard but I find it easier to look at a simple table. This helps me visualise the change in font-size across different resolutions.\n\n<table>\n  <tbody>\n    <tr>\n      <th>Viewport units:</th><th>1vw</th><th>2vw</th><th>3vw</th><th>4vw</th><th>5vw</th>\n    </tr>\n    <tr>\n      <th>Viewport size</th><th colspan=\"5\">font-size in pixels</th>\n    </tr>\n    <tr>\n      <th>400px</th><td>4px</td><td>8px</td><td>12px</td><td>16px</td><td>20px</td>\n    </tr>\n    <tr>\n      <th>500px</th><td>5px</td><td>10px</td><td>15px</td><td>20px</td><td>25px</td>\n    </tr>\n    <tr>\n      <th>600px</th><td>6px</td><td>12px</td><td>18px</td><td>24px</td><td>30px</td>\n    </tr>\n    <tr>\n      <th>700px</th><td>7px</td><td>14px</td><td>21px</td><td>28px</td><td>35px</td>\n    </tr>\n    <tr>\n      <th>800px</th><td>8px</td><td>16px</td><td>24px</td><td>32px</td><td>40px</td>\n    </tr>\n    <tr>\n      <th>900px</th><td>9px</td><td>18px</td><td>27px</td><td>36px</td><td>45px</td>\n    </tr>\n    <tr>\n      <th>1000px</th><td>10px</td><td>20px</td><td>30px</td><td>40px</td><td>50px</td>\n    </tr>\n  </tbody>\n</table>\n\nLooking at the table you can see there are many limitations. We have little control over the rate at which viewport units change and we are confined to the options available in the table.\n\n## Precise control with calc()\n\nIn his 2012 article on [Fluid Type](http://trentwalton.com/2012/06/19/fluid-type/) Trent Walton said:\n\n<blockquote>\"It's been hard to let go of setting a static font-size for a site and calling things done. I’m realizing that the predictability & control we've had over web type is becoming a thing of the past.\"</blockquote>\n\nBut perhaps not all predictability and control is lost.\n\nLet's imagine that as a typography nerd with an eye for absolute precision, you want the font-size at a resolution of 600px to be 12px. Great! Looking at the table, setting a font-size of 2vw will achieve this. But you also want the font-size at 800px to be 32px. It seems you can’t do this without changing from 2vw to 4vw and this means a break-point and our font scaling will be jumpy and not fluid. I consider this a pretty significant limitation.\n\nThere is a solution to this! It's not exactly pretty but it works – at least in modern browsers. As stated earlier, some browser have bugs when using calc() and viewport units together, so this might be buggy in some older browsers. (This is not really a concern anymore, just set sensible default font sizes before declaring a fluid type calc() expression.)\n\nIt appears that by using calc() and vw we can get responsive typography that scales perfectly between specific pixel values within a specific viewport range.\n\nThis means you can have perfect smooth scaling between any 2 font sizes over any viewport range. The font will start scaling and stop scaling exactly where you want.\n\nTry the demo: [Precise control over responsive typography](http://codepen.io/MadeByMike/pen/YPJJYv?editors=110)\nThe demo uses SASS so you can easily change the upper and lower limits of the font-size and media queries. But the important part looks something like this:\n\n```css\n  font-size: calc( 12px + (24 - 12) * ( (100vw - 400px) / ( 800 - 400) ));\n```\n**Note**: In the example above, 12px is the minimum font-size and 24px is the maximum. 400px is the start of the viewport range and 800px is where it should stop scaling. The inclusion or absence of the units after each value is important.\n\nPut simply, it is a function that takes a value within a range and works out what the new value would be if applied to a different range. I can take the current viewport width (100vw) as input into this ‘function’. For example if I had viewport range of 500px to 1000px, and let’s imagine the current viewport is 750px, I then apply this to a font-size range. If my font-size range was 20px to 30px, because the input of 750px is right in the middle of 500px and 1000px my new font-size will also be right in the middle, 25px. Simple right?\n\nThis seems like it could be a pretty useful way to control the scaling of viewport units. It could also have uses beyond typography. You can do other interesting things, by inverting the range for example, you can have font sizes that get smaller as the viewport gets larger. Perhaps there is a use for this? I’d love to hear your thoughts and see other applications or extensions of this idea.\n\n**Update**: Each of the methods above use pixels for 'precise' control, however some readers have expressed concern that this will override user preferences for default font size. This is true, however all methods also work equally well with rem or any other unit type.\n\n## More info\n\n  - [Fluid Type](http://trentwalton.com/2012/06/19/fluid-type/), Trent Walton\n  - [Viewport units](https://web-design-weekly.com/2014/11/18/viewport-units-vw-vh-vmin-vmax/), Tim Severien\n  - [CSS Viewport Units](https://dev.opera.com/articles/css-viewport-units/), Chris Mills\n  - [FitText](http://fittextjs.com/), Dave Rupert\n  - [Viewport sized typography](https://eduardoboucas.com/blog/2015/06/18/viewport-sized-typography-with-minimum-and-maximum-sizes.html), a similar concept by Eduardo Bouças\n  - [Molten leading](http://nicewebtype.com/notes/2012/02/03/molten-leading-or-fluid-line-height/)\n",
      "internal": {
        "type": "contentfulWritingBodyTextNode",
        "mediaType": "text/markdown",
        "content": "It is possible to have precise control over responsive typography. Using calc() and viewport units you can create fluid type that scales perfectly between specific pixel values, within a specific viewport range.\n\n<p>\n<a href=\"http://codepen.io/MadeByMike/pen/YPJJYv\" class=\"responsive-type\">\n  This text is limited to between 20px and 40px, over a viewport range of 600px to 800px.\n</a>\n</p>\n\nI don’t know why we don’t see viewport units being used more extensively for creating designs with responsive typography.\n\nViewport units have been around since 2012 and are [fairly well supported](http://caniuse.com/#feat=viewport-units). In fact Internet Explorer was an early mover on this and supports viewport units as far back as IE9.\n\nThey are also really easy to understand. One viewport unit is simply 1% of the viewport and there are 4 types of viewport units:\n\n  * vw - viewport width,\n  * vh - viewport height,\n  * vmin - height or width, whichever is smaller,\n  * vmax - height or width, whichever is larger\n\nSo the reason viewport units are not used more extensively is probably not due to a lack of browser support or developers' understanding. My guess is it’s probably more likely to do with the lack of precise control designers have over the font-size.\n\nDesigners that love typography often really love typography and they enjoy precise control over line-height, font-size, letter-spacing and other elements of typography those of us not in the club might not even know exist.\n\nThis desire for precise control is the reason that some designers still prefer to declare these properties using pixels. But it doesn’t really matter, whether they use ems, rems or percentages the truth is, they are all just abstractions of a base font size and that is usually 16 pixels. So they have never really had to give up complete control. It’s not difficult to work out what font-size an element is, as long as we know the base font-size.\n\nBut viewport units are different! They represent a fundamental change in approach. Unlike all the other units, viewport units are not relative to the base font size in any way. Instead they are relative to the viewport, which the user controls, and that might be scary for some.\n\nBut there are advantages to using viewport units, a font-size declared with viewport units is fluid, meaning it will scale smoothly. This is a clearly a better experience than [clunky responsive typography techniques](http://codepen.io/MadeByMike/pen/c54dfa521cf08e0439943b7a745f77f0) that require multiple media queries.\n\nResponsive typography with viewport units is really easy to implement, just declare the base font-size using vw; as long as you are not using pixels elsewhere in your stylesheet, other units are relative to the base font-size, (which is now viewport units) so they will all scale accordingly.\n\nBut there are a few rough edges you will need to sand back. Firstly when you get down to a very small viewport scaling is problematic. Luckily there are a few good methods for avoiding this.\n\n## Limit font scaling with calc()\n\nIf you would like set an exact minimum font-size in pixels you can use calc().\n\n```css\n:root{\n  font-size: calc(16px + 3vw);\n}\n```\n\nThis example says set the default size to 16px + 3vw.\n\n**Note**: There are still issues in some browsers when using viewport units and calc() together, so for now media queries is probably safer.\n\n## Limit font scaling with media queries\n\nYou can prevent the text from scaling below a specific threshold simply by using a media query and only applying viewport units above a certain device resolution.\n\n```css\n:root { font-size: 18px;  /* default below 600px */ }\n@media (min-width: 600px){\n  :root {\n    font-size: 3vw;\n  }\n}\n```\n\nWe can also stop scaling above a specific font-size, but for this we need to first work out what the viewport size will be at the font-size we want to stop scaling. For that we need a bit of maths:\n\n```text\nfont-size / ( number of viewport units / 100 )\nEg. 24 / ( 3 / 100 ) = 800px\n```\n\nWith that result just set another media query to change the root font-size back to a fixed unit.\n\n```css\n...\n@media (min-width: 800px){\n  :root {\n    font-size: 24px;  /*above 800px */\n  }\n}\n```\n\nThe calculations are not that hard but I find it easier to look at a simple table. This helps me visualise the change in font-size across different resolutions.\n\n<table>\n  <tbody>\n    <tr>\n      <th>Viewport units:</th><th>1vw</th><th>2vw</th><th>3vw</th><th>4vw</th><th>5vw</th>\n    </tr>\n    <tr>\n      <th>Viewport size</th><th colspan=\"5\">font-size in pixels</th>\n    </tr>\n    <tr>\n      <th>400px</th><td>4px</td><td>8px</td><td>12px</td><td>16px</td><td>20px</td>\n    </tr>\n    <tr>\n      <th>500px</th><td>5px</td><td>10px</td><td>15px</td><td>20px</td><td>25px</td>\n    </tr>\n    <tr>\n      <th>600px</th><td>6px</td><td>12px</td><td>18px</td><td>24px</td><td>30px</td>\n    </tr>\n    <tr>\n      <th>700px</th><td>7px</td><td>14px</td><td>21px</td><td>28px</td><td>35px</td>\n    </tr>\n    <tr>\n      <th>800px</th><td>8px</td><td>16px</td><td>24px</td><td>32px</td><td>40px</td>\n    </tr>\n    <tr>\n      <th>900px</th><td>9px</td><td>18px</td><td>27px</td><td>36px</td><td>45px</td>\n    </tr>\n    <tr>\n      <th>1000px</th><td>10px</td><td>20px</td><td>30px</td><td>40px</td><td>50px</td>\n    </tr>\n  </tbody>\n</table>\n\nLooking at the table you can see there are many limitations. We have little control over the rate at which viewport units change and we are confined to the options available in the table.\n\n## Precise control with calc()\n\nIn his 2012 article on [Fluid Type](http://trentwalton.com/2012/06/19/fluid-type/) Trent Walton said:\n\n<blockquote>\"It's been hard to let go of setting a static font-size for a site and calling things done. I’m realizing that the predictability & control we've had over web type is becoming a thing of the past.\"</blockquote>\n\nBut perhaps not all predictability and control is lost.\n\nLet's imagine that as a typography nerd with an eye for absolute precision, you want the font-size at a resolution of 600px to be 12px. Great! Looking at the table, setting a font-size of 2vw will achieve this. But you also want the font-size at 800px to be 32px. It seems you can’t do this without changing from 2vw to 4vw and this means a break-point and our font scaling will be jumpy and not fluid. I consider this a pretty significant limitation.\n\nThere is a solution to this! It's not exactly pretty but it works – at least in modern browsers. As stated earlier, some browser have bugs when using calc() and viewport units together, so this might be buggy in some older browsers. (This is not really a concern anymore, just set sensible default font sizes before declaring a fluid type calc() expression.)\n\nIt appears that by using calc() and vw we can get responsive typography that scales perfectly between specific pixel values within a specific viewport range.\n\nThis means you can have perfect smooth scaling between any 2 font sizes over any viewport range. The font will start scaling and stop scaling exactly where you want.\n\nTry the demo: [Precise control over responsive typography](http://codepen.io/MadeByMike/pen/YPJJYv?editors=110)\nThe demo uses SASS so you can easily change the upper and lower limits of the font-size and media queries. But the important part looks something like this:\n\n```css\n  font-size: calc( 12px + (24 - 12) * ( (100vw - 400px) / ( 800 - 400) ));\n```\n**Note**: In the example above, 12px is the minimum font-size and 24px is the maximum. 400px is the start of the viewport range and 800px is where it should stop scaling. The inclusion or absence of the units after each value is important.\n\nPut simply, it is a function that takes a value within a range and works out what the new value would be if applied to a different range. I can take the current viewport width (100vw) as input into this ‘function’. For example if I had viewport range of 500px to 1000px, and let’s imagine the current viewport is 750px, I then apply this to a font-size range. If my font-size range was 20px to 30px, because the input of 750px is right in the middle of 500px and 1000px my new font-size will also be right in the middle, 25px. Simple right?\n\nThis seems like it could be a pretty useful way to control the scaling of viewport units. It could also have uses beyond typography. You can do other interesting things, by inverting the range for example, you can have font sizes that get smaller as the viewport gets larger. Perhaps there is a use for this? I’d love to hear your thoughts and see other applications or extensions of this idea.\n\n**Update**: Each of the methods above use pixels for 'precise' control, however some readers have expressed concern that this will override user preferences for default font size. This is true, however all methods also work equally well with rem or any other unit type.\n\n## More info\n\n  - [Fluid Type](http://trentwalton.com/2012/06/19/fluid-type/), Trent Walton\n  - [Viewport units](https://web-design-weekly.com/2014/11/18/viewport-units-vw-vh-vmin-vmax/), Tim Severien\n  - [CSS Viewport Units](https://dev.opera.com/articles/css-viewport-units/), Chris Mills\n  - [FitText](http://fittextjs.com/), Dave Rupert\n  - [Viewport sized typography](https://eduardoboucas.com/blog/2015/06/18/viewport-sized-typography-with-minimum-and-maximum-sizes.html), a similar concept by Eduardo Bouças\n  - [Molten leading](http://nicewebtype.com/notes/2012/02/03/molten-leading-or-fluid-line-height/)\n",
        "contentDigest": "06c4b113e6e0bef22f145888b6711240",
        "owner": "gatsby-source-contentful"
      }
    },
    "9f99c124-9efc-5525-889e-5b3a2e97152f": {
      "id": "9f99c124-9efc-5525-889e-5b3a2e97152f",
      "parent": "f08bd495-cb62-5bd8-ae0b-03bf223a6015",
      "children": [
        "19f7c7b5-34e2-5045-a101-7aa54f8dfd6f"
      ],
      "description": "A detailed exploration of how the space and size of items are determined when using flexbox.",
      "internal": {
        "type": "contentfulWritingDescriptionTextNode",
        "mediaType": "text/markdown",
        "content": "A detailed exploration of how the space and size of items are determined when using flexbox.",
        "contentDigest": "c385f4a2e6b5f98daf440d42007cf118",
        "owner": "gatsby-source-contentful"
      }
    },
    "26d7a417-f231-572e-9c83-fd12952aa7bf": {
      "id": "26d7a417-f231-572e-9c83-fd12952aa7bf",
      "parent": "f08bd495-cb62-5bd8-ae0b-03bf223a6015",
      "children": [
        "3ce7ed04-e965-55f6-ab77-5ca4d40f841c"
      ],
      "body": "Instead of covering all properties of Flexbox this article focuses on understanding how Flexbox calculates the width of items. The examples in this article are all in the context of a horizontal layout, but the same logic applies if you use a vertical layout.\n\nIf you don't know what Flexbox is, it's a layout method best suited for distributing the available space inside a container, amongst child items, even when the number of child items, their size and even their DOM order is not known or might change. [Have a look at this guide](http://css-tricks.com/snippets/css/a-guide-to-flexbox/), and [take a look at some examples](http://codepen.io/MadeByMike/pen/26cb650eaef356da925e75139537f74e) it might look like magic, but it's not, there is a method for calculating the size of child items.\n\nThe full algorithm for working out a flexbox layout in any situation is [available here](http://dev.w3.org/csswg/css-flexbox/#layout-algorithm), but as the spec rightly states:\n\n<blockquote>Authors writing web pages should generally be served well by the individual property descriptions, and do not need to read this section unless they have a deep-seated urge to understand arcane details of CSS layout.</blockquote>\n\nWhile this is true, I believe that designers and developers will still want to understand some parts of the layout algorithm. In particular so that they can roughly estimate width or height of flex items and confidently assign flex values without excessive trial and error.\n\n## How does it work?\n\nFlexbox wants to fit in. If a flex item is allowed to be itself the flex-basis tells the browser what size it wants to be. Think of the flex-basis as a suggested size or ideal size. If a flex-basis is not set, or if it is set to 'auto', it will equal the initial size of the element. In other words, it will be the width of its inner content.\n\n**Note:** If a flex item has borders, margin or padding these values need to be added to the flex-basis according to the current box-sizing method when calculating the remaining space. They should also be added to the values at the end of calculation to get the final outer width of each flex item.\n\nOnce each flex-basis has been determined the browser adds these together along with any margins, borders or padding and checks to see if there is any space remaining in the container. If there is space remaining it will distribute this proportionally amongst the flex items, according to their flex-grow values. Similarly, if the space remaining is negative it will shrink each item proportionately, according to their flex-shrink values. Of course if the remaining space is 0, nothing more needs to be done.\n\n### Increasing the size of flex items (flex-growing)\n\nWhen the combined size of all the flex items is less than their container, the remaining space is distributed amongst all the items. The flex-grow attribute is used to determine how the remaining space should be allocated. To work out how much space is allocated to each item, take the ratio of the item's flex-grow value, over the total of all the other flex-grow values in the same container and multiply this by the space remaining. Here is an example:\n\n<div id=\"example-static-flex-1\" class=\"flex-container\">\n\t<div class=\"flex-item flex-item-1\"><span>Item 1</span></div>\n\t<div class=\"flex-item flex-item-2\"><span>Item 2</span></div>\n</div>\n<div class=\"example-container pre\">\n.flex-container{ width: 600px; }\n.flex-item-1{ flex-basis: 200px; flex-grow: 3; }\n.flex-item-2{ flex-basis: 200px; flex-grow: 1; }\n\nTotal basis: 400px\nSpace remaining:  200px\n\nItem 1 grow factor: 3/4 &times; 200px = 150px\nItem 2 grow factor: 1/4 &times; 200px = 50px\n</div>\n\nThe space remaining is 200px, this is equal to the width of the flex container (600px) minus the total basis (400px). Of the remaining space (200px), ¾ (150px) is allocated to item 1 and ¼ (50px) to item 2.\n\nThese fractions are determined by taking the items individual flex-grow value over the combined flex-grow value of all items. To get the final width of each item, add this result to the initial flex-basis (350px and 250px).\n\nTo give another example; if both items had a flex-grow value of 1, or in any case where they had the same number, they would each be allocated half the remaining space. If one item had a value of 2 and the other 1, the first flex item would be allocated ⅔ of the remaining space and the other ⅓. This works the same with 3, 4, 5 or any number of items although obviously the fractions will differ.\n\n### Decreasing the size of flex items (flex-shrinking)\n\nIf the space remaining is a negative this means that the flex container is smaller than the preferred width of all the flex items. They are going to have to shrink. By assigning a flex-shrink value we can control much space each flex item will surrender.\n\nFor some reason the method for working out flex shrink differs slightly and is a little harder.\n\nRather than working out the ratio of an items flex-shrink value against the total of all flex-shrink values, for each item we first multiply its flex shrink value by its basis and then workout the ratio of this number against the sum of all flex-basis values, and multiply by the space remaining.\n\n<div id=\"example-static-flex-2\" class=\"flex-container\">\n\t<div class=\"flex-item flex-item-1\"><span>Item 1</span></div>\n\t<div class=\"flex-item flex-item-2\"><span>Item 2</span></div>\n\t<div class=\"flex-item flex-item-3\"><span>Item 2</span></div>\n</div>  \n<div class=\"example-container pre\">\n.flex-container{ width: 600px; }\n.flex-item-1{ flex-basis: 100px; flex-shrink: 1; }\n.flex-item-2{ flex-basis: 400px; flex-shrink: 1; }\n.flex-item-3{ flex-basis: 400px; flex-shrink: 1; }\n\nTotal basis: 900px\nSpace remaining: -300px\n\nItem 1 shrink factor: (1&times;100) / (100px + 400px + 400px) = .111 &times; -300px = -33.333px\nItem 2 shrink factor: (1&times;400) / (100px + 400px + 400px) = .444 &times; -300px = -133.333px\nItem 3 shrink factor: (1&times;400) / (100px + 400px + 400px) = .444 &times; -300px = -133.333px\n</div>\n\nThe space remaining is -300px, this is equal to the width of the flex container (600px) minus the total basis (900px). To find the shrink factor for each, multiply its flex-shrink value by its flex-basis value (1&times;100px or 1&times;400px), then divide this by the combined sum of the flex-shrink multiply the flex-basis for all items (1&times;100px) + (1&times;400px) + (1&times;400px).\n\nFinally multiply this number by the space remaining (-300px) to get the amount to reduce each item by (33.33px and 66.66px).\n\nIn the above example if the flex shrink of the first item was to change to 2 the result would differ as follows:\n\n<div class=\"example-container pre\">.flex-container{ width: 600px; }\n.flex-item-1{ flex-basis: 100px; flex-shrink: 2; }\n.flex-item-2{ flex-basis: 400px; flex-shrink: 1; }\n.flex-item-3{ flex-basis: 400px; flex-shrink: 1; }\n\nTotal basis: 900px\nSpace remaining: -300px\n\nItem 1 shrink factor: (2&times;100) / (200px + 400px + 400px) = .2 &times; -300px = -60px\nItem 2 shrink factor: (1&times;400) / (200px + 400px + 400px) = .4 &times; -300px = -120px\nItem 3 shrink factor: (1&times;400) / (200px + 400px + 400px) = .4 &times; -300px = -120px\n</div>\n\n## More info\n\n  - I built a little [tool for testing flexbox calculations](/demos/flexbox-tester/),\n  - Chris Wright covers his [adventures with flexbox](http://chriswrightdesign.com/experiments/flexbox-adventures/),\n  - Chris Coyier [a Complete Guide to Flexbox](http://css-tricks.com/snippets/css/a-guide-to-flexbox/),\n  - Chris Mills, wrote a great [introduction to flexbox](https://dev.opera.com/articles/flexbox-basics/),\n  - If you really must, every detail is available [in the spec](http://dev.w3.org/csswg/css-flexbox/#layout-algorithm)",
      "internal": {
        "type": "contentfulWritingBodyTextNode",
        "mediaType": "text/markdown",
        "content": "Instead of covering all properties of Flexbox this article focuses on understanding how Flexbox calculates the width of items. The examples in this article are all in the context of a horizontal layout, but the same logic applies if you use a vertical layout.\n\nIf you don't know what Flexbox is, it's a layout method best suited for distributing the available space inside a container, amongst child items, even when the number of child items, their size and even their DOM order is not known or might change. [Have a look at this guide](http://css-tricks.com/snippets/css/a-guide-to-flexbox/), and [take a look at some examples](http://codepen.io/MadeByMike/pen/26cb650eaef356da925e75139537f74e) it might look like magic, but it's not, there is a method for calculating the size of child items.\n\nThe full algorithm for working out a flexbox layout in any situation is [available here](http://dev.w3.org/csswg/css-flexbox/#layout-algorithm), but as the spec rightly states:\n\n<blockquote>Authors writing web pages should generally be served well by the individual property descriptions, and do not need to read this section unless they have a deep-seated urge to understand arcane details of CSS layout.</blockquote>\n\nWhile this is true, I believe that designers and developers will still want to understand some parts of the layout algorithm. In particular so that they can roughly estimate width or height of flex items and confidently assign flex values without excessive trial and error.\n\n## How does it work?\n\nFlexbox wants to fit in. If a flex item is allowed to be itself the flex-basis tells the browser what size it wants to be. Think of the flex-basis as a suggested size or ideal size. If a flex-basis is not set, or if it is set to 'auto', it will equal the initial size of the element. In other words, it will be the width of its inner content.\n\n**Note:** If a flex item has borders, margin or padding these values need to be added to the flex-basis according to the current box-sizing method when calculating the remaining space. They should also be added to the values at the end of calculation to get the final outer width of each flex item.\n\nOnce each flex-basis has been determined the browser adds these together along with any margins, borders or padding and checks to see if there is any space remaining in the container. If there is space remaining it will distribute this proportionally amongst the flex items, according to their flex-grow values. Similarly, if the space remaining is negative it will shrink each item proportionately, according to their flex-shrink values. Of course if the remaining space is 0, nothing more needs to be done.\n\n### Increasing the size of flex items (flex-growing)\n\nWhen the combined size of all the flex items is less than their container, the remaining space is distributed amongst all the items. The flex-grow attribute is used to determine how the remaining space should be allocated. To work out how much space is allocated to each item, take the ratio of the item's flex-grow value, over the total of all the other flex-grow values in the same container and multiply this by the space remaining. Here is an example:\n\n<div id=\"example-static-flex-1\" class=\"flex-container\">\n\t<div class=\"flex-item flex-item-1\"><span>Item 1</span></div>\n\t<div class=\"flex-item flex-item-2\"><span>Item 2</span></div>\n</div>\n<div class=\"example-container pre\">\n.flex-container{ width: 600px; }\n.flex-item-1{ flex-basis: 200px; flex-grow: 3; }\n.flex-item-2{ flex-basis: 200px; flex-grow: 1; }\n\nTotal basis: 400px\nSpace remaining:  200px\n\nItem 1 grow factor: 3/4 &times; 200px = 150px\nItem 2 grow factor: 1/4 &times; 200px = 50px\n</div>\n\nThe space remaining is 200px, this is equal to the width of the flex container (600px) minus the total basis (400px). Of the remaining space (200px), ¾ (150px) is allocated to item 1 and ¼ (50px) to item 2.\n\nThese fractions are determined by taking the items individual flex-grow value over the combined flex-grow value of all items. To get the final width of each item, add this result to the initial flex-basis (350px and 250px).\n\nTo give another example; if both items had a flex-grow value of 1, or in any case where they had the same number, they would each be allocated half the remaining space. If one item had a value of 2 and the other 1, the first flex item would be allocated ⅔ of the remaining space and the other ⅓. This works the same with 3, 4, 5 or any number of items although obviously the fractions will differ.\n\n### Decreasing the size of flex items (flex-shrinking)\n\nIf the space remaining is a negative this means that the flex container is smaller than the preferred width of all the flex items. They are going to have to shrink. By assigning a flex-shrink value we can control much space each flex item will surrender.\n\nFor some reason the method for working out flex shrink differs slightly and is a little harder.\n\nRather than working out the ratio of an items flex-shrink value against the total of all flex-shrink values, for each item we first multiply its flex shrink value by its basis and then workout the ratio of this number against the sum of all flex-basis values, and multiply by the space remaining.\n\n<div id=\"example-static-flex-2\" class=\"flex-container\">\n\t<div class=\"flex-item flex-item-1\"><span>Item 1</span></div>\n\t<div class=\"flex-item flex-item-2\"><span>Item 2</span></div>\n\t<div class=\"flex-item flex-item-3\"><span>Item 2</span></div>\n</div>  \n<div class=\"example-container pre\">\n.flex-container{ width: 600px; }\n.flex-item-1{ flex-basis: 100px; flex-shrink: 1; }\n.flex-item-2{ flex-basis: 400px; flex-shrink: 1; }\n.flex-item-3{ flex-basis: 400px; flex-shrink: 1; }\n\nTotal basis: 900px\nSpace remaining: -300px\n\nItem 1 shrink factor: (1&times;100) / (100px + 400px + 400px) = .111 &times; -300px = -33.333px\nItem 2 shrink factor: (1&times;400) / (100px + 400px + 400px) = .444 &times; -300px = -133.333px\nItem 3 shrink factor: (1&times;400) / (100px + 400px + 400px) = .444 &times; -300px = -133.333px\n</div>\n\nThe space remaining is -300px, this is equal to the width of the flex container (600px) minus the total basis (900px). To find the shrink factor for each, multiply its flex-shrink value by its flex-basis value (1&times;100px or 1&times;400px), then divide this by the combined sum of the flex-shrink multiply the flex-basis for all items (1&times;100px) + (1&times;400px) + (1&times;400px).\n\nFinally multiply this number by the space remaining (-300px) to get the amount to reduce each item by (33.33px and 66.66px).\n\nIn the above example if the flex shrink of the first item was to change to 2 the result would differ as follows:\n\n<div class=\"example-container pre\">.flex-container{ width: 600px; }\n.flex-item-1{ flex-basis: 100px; flex-shrink: 2; }\n.flex-item-2{ flex-basis: 400px; flex-shrink: 1; }\n.flex-item-3{ flex-basis: 400px; flex-shrink: 1; }\n\nTotal basis: 900px\nSpace remaining: -300px\n\nItem 1 shrink factor: (2&times;100) / (200px + 400px + 400px) = .2 &times; -300px = -60px\nItem 2 shrink factor: (1&times;400) / (200px + 400px + 400px) = .4 &times; -300px = -120px\nItem 3 shrink factor: (1&times;400) / (200px + 400px + 400px) = .4 &times; -300px = -120px\n</div>\n\n## More info\n\n  - I built a little [tool for testing flexbox calculations](/demos/flexbox-tester/),\n  - Chris Wright covers his [adventures with flexbox](http://chriswrightdesign.com/experiments/flexbox-adventures/),\n  - Chris Coyier [a Complete Guide to Flexbox](http://css-tricks.com/snippets/css/a-guide-to-flexbox/),\n  - Chris Mills, wrote a great [introduction to flexbox](https://dev.opera.com/articles/flexbox-basics/),\n  - If you really must, every detail is available [in the spec](http://dev.w3.org/csswg/css-flexbox/#layout-algorithm)",
        "contentDigest": "92abc9e9d483bd2504d634f3bb810ac1",
        "owner": "gatsby-source-contentful"
      }
    },
    "c0b00b48-7402-5d9f-971c-61d3cfab3fbe": {
      "id": "c0b00b48-7402-5d9f-971c-61d3cfab3fbe",
      "parent": "844f4bd2-a6ee-5f7b-b4f4-eb4d10c3bbb6",
      "children": [
        "e7425620-202f-5349-a861-7d420bd3ba99"
      ],
      "description": "A tutorial for Codrops on using HTML5 canvas to crop and resize images on the client side.",
      "internal": {
        "type": "contentfulWritingDescriptionTextNode",
        "mediaType": "text/markdown",
        "content": "A tutorial for Codrops on using HTML5 canvas to crop and resize images on the client side.",
        "contentDigest": "211cbb87af4b35732f9af517650fce0f",
        "owner": "gatsby-source-contentful"
      }
    },
    "6d09f4e3-b5f4-5745-ab25-8247ae61a599": {
      "id": "6d09f4e3-b5f4-5745-ab25-8247ae61a599",
      "parent": "844f4bd2-a6ee-5f7b-b4f4-eb4d10c3bbb6",
      "children": [
        "a25ddaf6-c3cd-5995-9ca7-fcfc9df530e1"
      ],
      "body": "Learn how to resize and crop images using JavaScript and the HTML5 Canvas element using controls, commonly seen in photo editing applications.\n\nI published an article on the Codrops website: [Resizing and Cropping Images with Canvas](http://tympanus.net/codrops/2014/10/30/resizing-cropping-images-canvas/)\n\nThis tutorial focuses on the interaction and design aspects of this task rather than just the technical details of using Canvas for image resampling.\n\nI also recommend using this example with the FileReader and Drag and Drop APIs which are not covered in this tutorial.\n\nA huge thanks to Mary Lou (Manoela Ilic) for support with the design and much more!",
      "internal": {
        "type": "contentfulWritingBodyTextNode",
        "mediaType": "text/markdown",
        "content": "Learn how to resize and crop images using JavaScript and the HTML5 Canvas element using controls, commonly seen in photo editing applications.\n\nI published an article on the Codrops website: [Resizing and Cropping Images with Canvas](http://tympanus.net/codrops/2014/10/30/resizing-cropping-images-canvas/)\n\nThis tutorial focuses on the interaction and design aspects of this task rather than just the technical details of using Canvas for image resampling.\n\nI also recommend using this example with the FileReader and Drag and Drop APIs which are not covered in this tutorial.\n\nA huge thanks to Mary Lou (Manoela Ilic) for support with the design and much more!",
        "contentDigest": "8eb8b4c63e956a0b618b5273598dc637",
        "owner": "gatsby-source-contentful"
      }
    },
    "894edf2d-e701-5b58-8997-646afa8f834a": {
      "id": "894edf2d-e701-5b58-8997-646afa8f834a",
      "parent": "3ee8fe14-1a33-5758-a779-da11375b203a",
      "children": [
        "6ad3e664-a44e-5355-a9d9-f48f976b2be5"
      ],
      "description": "Sharing some experiences trying to get a design system\\living style guide working in a corporate environment.",
      "internal": {
        "type": "contentfulWritingDescriptionTextNode",
        "mediaType": "text/markdown",
        "content": "Sharing some experiences trying to get a design system\\living style guide working in a corporate environment.",
        "contentDigest": "d7fd6e44bb419a3de72824c2f0eab825",
        "owner": "gatsby-source-contentful"
      }
    },
    "5890fe96-7bd1-56b5-b84d-9facc5a27739": {
      "id": "5890fe96-7bd1-56b5-b84d-9facc5a27739",
      "parent": "3ee8fe14-1a33-5758-a779-da11375b203a",
      "children": [
        "b899bbbf-97a6-5195-9c80-e4cfb9cf094c"
      ],
      "body": "\nI recently completed my third attempt at implementing a style guide within my organisation. So far this is the first attempt that looks to be maintainable and has some traction outside the development team. I want to share with you how we got there and what I learnt from 2 failed attempts.\n\nMy first attempt at a style guide used an automated tool called [KSS](http://warpspire.com/kss/styleguides/), it automatically generated a style guide from comments in the CSS. It was clever. I was sold by the efficiency. It failed quickly. I don't think it failed because of the choice of tool. I just hadn't adequately prepared. I hadn't discussed the objectives with other developers and definitely not more broadly with the team.\n\nHowever before I could learn that lesson there was an immediate barrier of technical debt. At the time we didn't use build tools or even SASS. I'm ashamed to say that despite my best efforts the CSS was a little all over the place. This meant that the style guide was difficult to maintain. As well as this, people in the development team were also used to working reactively. The style guide was not being used as a tool for development and planning, so inevitably it became a post implementation task to update and it quickly fell behind production.\n\n\nWe needed to change how we worked. I began the mammoth task of refactoring seven thousand lines of CSS as well as making preprocessors and build tools a part our toolkit. We started discussing our prefered approach to CSS architecture and other development principles and guidelines. We settled on [SMACSS](https://smacss.com/) for naming conventions, [Mark Otto’s Code guide](http://codeguide.co/) and [Atomic Design](http://patternlab.io/about.html) principles. We were not instant experts at any of these things and developing discipline takes time. You never arrive at perfect and it’s a moving target anyway, so we just kept working towards it. I wrote about this in [another blog post on how I CSS](http://madebymike.com.au/writing/how-do-I-css).\nWe worked with these principles without a style guide for a while. Everyone up-skilled and we noticed better consistency and maintainability of our code. We were pretty sure we were ready and style guide version 2.0 was going to be brilliant. It was for a while. We used [Fabricator](https://fbrctr.github.io/) and [Gulp](http://gulpjs.com/) to create a custom style guide. Unlike KSS we manually created a markdown file for each component. The extra work was offset by a high degree of flexibility and the live reload features meant the style guide became the place for development and testing.\n\nThis worked really well for developers with only a slightly steeper learning curve and set-up cost for new staff.\n\nThe next thing I learnt was that the success of a style guide depends as much on the processes you have within your organisation as it does on on the discipline of your development team. It's not just the development process that matters, content and design processes also influence your chance of success.\n\nThis matters even more in large organisations. Unfortunately a lot of developers focus on the build process and no matter how clever that is it's not going to be successful if it doesn't enable content writers and designers to do their job better. They don't care how efficient your build process is. It also has to enable managers and decision makers to get an overview of how isolated changes are going to influence the boarded aesthetic. Only then will they see value in it.\n\nDone well style guides reduce conflict and lead to better design decisions, at worst they cause friction and the development team will soon be seen as a blocker rather than an enabler. Right from the beginning start thinking about how your style guide is going to make other people's jobs easier not your own.\n\nYou might need to influence people's thinking and modify existing processes to move to a place in your organisation where a style guide will be accepted as an important design tool. A strong foundation in the concepts of atomic design is important but do not try to sell these concepts to non technical staff. Instead talk about the benefits of visual consistency from a user experience perspective and how patterns help streamline the design process and lead to better business outcomes.\n\nThis is easy to say now but this is not how I did it. Instead I harped on about maintainability of stylesheets, about reducing lines of code and more efficient development processes. \"So what\", was often the response, “I want that button, on that page only, to be corporate bule” and I would fight the good fight, but in the end, more often than not I found myself saying “which of the 49 shades of corporate blue we have, would you like to use”. No doubt only because I'd made such a fuss about it, “can I have a new one?” was the answer.\n\nEventually I clicked and I started talking about what does blue represent to our customers, where and why do we use buttons and what are the business rules that govern or guide our decisions to use these indicators. Everything in design conveys meaning and if you can define it on a per component basis, you can start to get non-technical people to understand the design language.\n\nFor the most part managers, designers and developers are all out to achieve the same goals and style guides can give you a common language to discuss this. Who’d have thought that style guides were not just a vanity exercise in developer tooling.\n\nI started focusing on what purpose each component has on the site. Asking questions like: \"What is its function?\" and \"Where should it be used?\" I also realised that it is equally important to define where something should not be used. Soon I found we were wanting to put even more business logic in there, things like “What are the character limits?” and “How many times can a component be used on a single page?”.\n\nNow we have a tool that is a lot more than a style guide it is a framework for discussion. When new feature is proposed we see if we have an existing component that fulfills the stated need. If we do, we use that. If we don’t we create a new one, modify an existing one or create a new variation of a base component. This forces more stringent thinking. Firstly am I happy with an existing feature, secondly am I prepared to modify something globally and if not, can I describe the reason and purpose for a variation.\n\nDoes this always work? It’s early days and we need more time to see how much influence this process will actually have. Although I’m optimistic, I don’t think it will always work. At the end of the day a process only works as long as people are prepared to follow it. The style guide now gives us a really good chance of showcasing the value of our process and the reason behind them but if someone high enough up the food chain says \"it must be this shade of blue\", I guess we'll just have to put that reason in the style guide.",
      "internal": {
        "type": "contentfulWritingBodyTextNode",
        "mediaType": "text/markdown",
        "content": "\nI recently completed my third attempt at implementing a style guide within my organisation. So far this is the first attempt that looks to be maintainable and has some traction outside the development team. I want to share with you how we got there and what I learnt from 2 failed attempts.\n\nMy first attempt at a style guide used an automated tool called [KSS](http://warpspire.com/kss/styleguides/), it automatically generated a style guide from comments in the CSS. It was clever. I was sold by the efficiency. It failed quickly. I don't think it failed because of the choice of tool. I just hadn't adequately prepared. I hadn't discussed the objectives with other developers and definitely not more broadly with the team.\n\nHowever before I could learn that lesson there was an immediate barrier of technical debt. At the time we didn't use build tools or even SASS. I'm ashamed to say that despite my best efforts the CSS was a little all over the place. This meant that the style guide was difficult to maintain. As well as this, people in the development team were also used to working reactively. The style guide was not being used as a tool for development and planning, so inevitably it became a post implementation task to update and it quickly fell behind production.\n\n\nWe needed to change how we worked. I began the mammoth task of refactoring seven thousand lines of CSS as well as making preprocessors and build tools a part our toolkit. We started discussing our prefered approach to CSS architecture and other development principles and guidelines. We settled on [SMACSS](https://smacss.com/) for naming conventions, [Mark Otto’s Code guide](http://codeguide.co/) and [Atomic Design](http://patternlab.io/about.html) principles. We were not instant experts at any of these things and developing discipline takes time. You never arrive at perfect and it’s a moving target anyway, so we just kept working towards it. I wrote about this in [another blog post on how I CSS](http://madebymike.com.au/writing/how-do-I-css).\nWe worked with these principles without a style guide for a while. Everyone up-skilled and we noticed better consistency and maintainability of our code. We were pretty sure we were ready and style guide version 2.0 was going to be brilliant. It was for a while. We used [Fabricator](https://fbrctr.github.io/) and [Gulp](http://gulpjs.com/) to create a custom style guide. Unlike KSS we manually created a markdown file for each component. The extra work was offset by a high degree of flexibility and the live reload features meant the style guide became the place for development and testing.\n\nThis worked really well for developers with only a slightly steeper learning curve and set-up cost for new staff.\n\nThe next thing I learnt was that the success of a style guide depends as much on the processes you have within your organisation as it does on on the discipline of your development team. It's not just the development process that matters, content and design processes also influence your chance of success.\n\nThis matters even more in large organisations. Unfortunately a lot of developers focus on the build process and no matter how clever that is it's not going to be successful if it doesn't enable content writers and designers to do their job better. They don't care how efficient your build process is. It also has to enable managers and decision makers to get an overview of how isolated changes are going to influence the boarded aesthetic. Only then will they see value in it.\n\nDone well style guides reduce conflict and lead to better design decisions, at worst they cause friction and the development team will soon be seen as a blocker rather than an enabler. Right from the beginning start thinking about how your style guide is going to make other people's jobs easier not your own.\n\nYou might need to influence people's thinking and modify existing processes to move to a place in your organisation where a style guide will be accepted as an important design tool. A strong foundation in the concepts of atomic design is important but do not try to sell these concepts to non technical staff. Instead talk about the benefits of visual consistency from a user experience perspective and how patterns help streamline the design process and lead to better business outcomes.\n\nThis is easy to say now but this is not how I did it. Instead I harped on about maintainability of stylesheets, about reducing lines of code and more efficient development processes. \"So what\", was often the response, “I want that button, on that page only, to be corporate bule” and I would fight the good fight, but in the end, more often than not I found myself saying “which of the 49 shades of corporate blue we have, would you like to use”. No doubt only because I'd made such a fuss about it, “can I have a new one?” was the answer.\n\nEventually I clicked and I started talking about what does blue represent to our customers, where and why do we use buttons and what are the business rules that govern or guide our decisions to use these indicators. Everything in design conveys meaning and if you can define it on a per component basis, you can start to get non-technical people to understand the design language.\n\nFor the most part managers, designers and developers are all out to achieve the same goals and style guides can give you a common language to discuss this. Who’d have thought that style guides were not just a vanity exercise in developer tooling.\n\nI started focusing on what purpose each component has on the site. Asking questions like: \"What is its function?\" and \"Where should it be used?\" I also realised that it is equally important to define where something should not be used. Soon I found we were wanting to put even more business logic in there, things like “What are the character limits?” and “How many times can a component be used on a single page?”.\n\nNow we have a tool that is a lot more than a style guide it is a framework for discussion. When new feature is proposed we see if we have an existing component that fulfills the stated need. If we do, we use that. If we don’t we create a new one, modify an existing one or create a new variation of a base component. This forces more stringent thinking. Firstly am I happy with an existing feature, secondly am I prepared to modify something globally and if not, can I describe the reason and purpose for a variation.\n\nDoes this always work? It’s early days and we need more time to see how much influence this process will actually have. Although I’m optimistic, I don’t think it will always work. At the end of the day a process only works as long as people are prepared to follow it. The style guide now gives us a really good chance of showcasing the value of our process and the reason behind them but if someone high enough up the food chain says \"it must be this shade of blue\", I guess we'll just have to put that reason in the style guide.",
        "contentDigest": "a927c43979af786ac7826d75f97522e4",
        "owner": "gatsby-source-contentful"
      }
    },
    "0dbc01af-f742-5068-843d-77a80963ed36": {
      "id": "0dbc01af-f742-5068-843d-77a80963ed36",
      "parent": "11e689e2-017c-57b6-b59f-e6df0d1714fa",
      "children": [
        "f35395be-8f5f-5883-abcd-ecfe7ae1165e"
      ],
      "description": "A technique for loading animations that can be applied to existing elements.",
      "internal": {
        "type": "contentfulWritingDescriptionTextNode",
        "mediaType": "text/markdown",
        "content": "A technique for loading animations that can be applied to existing elements.",
        "contentDigest": "1e6f8a81ab53c08e53fb0c143558985c",
        "owner": "gatsby-source-contentful"
      }
    },
    "e447a460-b7ae-56db-992b-7a982f9c1c63": {
      "id": "e447a460-b7ae-56db-992b-7a982f9c1c63",
      "parent": "11e689e2-017c-57b6-b59f-e6df0d1714fa",
      "children": [
        "42e07311-fc68-573b-ba82-5e2ed7690dbf"
      ],
      "body": "With a \"zero element\" loading animation, a loading state can be applied to any element with just the addition of a class name.\n\n<div class=\"row\">\n  <div class=\"col col-6\">\n    <a href=\"http://codepen.io/MadeByMike/pen/LEbYgr?editors=110\">\n      <div class=\"loading horizontal-example\"></div>\n    </a>\n    <p class=\"caption\"><a href=\"http://codepen.io/MadeByMike/pen/LEbYgr?editors=110\">view examples on codepen</a></p>\n  </div>\n  <div class=\"col col-6\">\n    <a href=\"http://codepen.io/MadeByMike/pen/bNeyEj?editors=110\">\n      <div class=\"loading radial-example\"></div>\n    </a>\n    <p class=\"caption\"><a href=\"http://codepen.io/MadeByMike/pen/bNeyEj?editors=110\">view examples on codepen</a></p>\n  </div>\n</div>\n\nFirst of all, I'm not a huge fan of loading animations and neither are your users but sometimes, for various reasons an action is going to take time and we need to let people know we're working on it. So if we must use a loading animation we want it to have a light footprint and be easy to toggle on and off when and where we need it.\n\nI've seen a lot of css only loading animations. A quick search on CodePen will find thousands of examples. They are popular because they are relatively quick and easy to make, yet can be creatively challenging and the result is usually visually pleasing. These type of experiments are fun and can be a rewarding and worthwhile exercise, but the practicality of many examples is more questionable.\n\nThere are definite benefits to css only solutions such as improving the number of network requests, page weight and animation performance. But in my opinion these benefits are often outweighed by the need to insert a div soup into the mark-up. Not only that, positioning a css only \"spinner\" can be challenging, it often requires changes to the surrounding mark-up to avoid breaking the layout.\n\nPerhaps slightly more practical are the \"single element\" examples. They tend to be a bit more robust and whilst it's simple enough to toggle a single element to show and hide the loading animation, I don't like toggling element visibility or adding and removing elements with JavaScript. To me this seems to defeat the purpose of a CSS only solution. It feels like the correct way to approach a css loading animation would be for it to work simply by adding a class name such as `loading` to an element to indicate that it's in a loading state.\n\nAfter all loading is a \"describing word\", it indicates the state of something and is not an object itself. Maybe it is a little silly to think we should apply this logic to our mark-up, but it feels right to me. So I set out to make a \"zero element\" loading animation, one that can be applied simply by adding a class name.\n\nI eventually settled on a solution that works almost everywhere. There are only 2 conditions. The element we're adding the loading animation to:\n\n - cannot have `:before` or `:after` pseudo-elements applied\n - must be possible to change the `position` property to `relative`\n\nThis works in every situation I’ve ever needed a loading animation but if we want to apply this technique to an element that requires absolute positioning or already has pseudo-elements, it’s usually possible to add the loading class to a container or child element.\n\n## How it works\n\nThis technique works by using `:before` and `:after` pseudo-elements to create the different parts of the animation. CSS transformations and absolute positioning are applied and these properties are animated to create different types of loading indicators.\n\nThe difficult part is working out how to position and animate the various parts, taking into account the width, height, borders and css transformations.\n\nFor a typical horizontal loading animation we can work this out without too much trouble but to create a smooth radial animation or anything more complex you will probably want to rely on something like sass or a generator.\n\nIf you want to understand how it works let’s look at making a simple horizontal example.\n\n```css\n.loading{\n  position: relative;\n  background: rgba(255,255,255,.8);\n}\n\n.loading:before{\n  content:'';\n  box-sizing: border-box;\n\n  /* centre everything */\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n\n  width: 200px;\n  height: 30px;\n\n  border: solid 1px #000;\n  border-radius: 30px;\n}\n\n.loading:after{\n  content:'';\n  box-sizing: border-box;\n\n  /* centre everything */\n  position: absolute;\n  transform: translate(-50%, -50%);\n  top: 50%;\n  left: 50%;\n\n  border: solid 5px #000;\n  width: 28px;\n  height: 28px;\n  border-radius: 50%;\n}\n```\n\nWith the above css we can add a class name `loading` to any element on the page and we should get something like the following, positioned in the centre:\n\n<img style=\"margin: 0 auto; display:block;\" src=\"/img/zero-element-example.png\">\n\nIf you want to apply this to the whole page, by applying the class name to the body element, you will also need to add the following css:\n\n```css\nhtml, body { height: 100%; }\n```\n\nTo complete the loading animation we need to move the circle back and forward along the bar.\n\nTo our circle add the following css:\n\n```css\n.loading:after{\n\n  ...\n\n  -webkit-animation: loading 3s ease-in-out infinite alternate;\n  animation: loading 3s ease-in-out infinite alternate;\n}\n```\n\nImportant animation properties in this example are the `animation-timing-function` and `animation-direction`. For the timing function I selected `ease-in-out` which causes it to slow before changing direction, although `linear` also works, however for this example the animation direction must be set to `alternate`. Next we add the animation keyframes.\n\n```css\n@keyframes loading {\n  0% { transform: translate(-99px, -50%); }\n  100% { transform: translate(71px, -50%); }\n}\n\n@-webkit-keyframes loading {\n  0% { transform: translate(-99px, -50%); }\n  100% { transform: translate(71px, -50%); }\n}\n```\n\nFor the animation keyframes we translate the position of the circle so that is starts with its left edge against the left edge of the bar and ends with its right edge against the right edge of the bar. We also need to translate the vertical position by `-50%` to maintain its vertical centring. We do not change the vertical position in this animation.\n\nWithout any transformations applied, the left edge of the circle is positioned in the centre of the bar. Since we know the width of the bar is 200px, to position the left edge of the circle against the left edge of the bar we need to move it `-100px` horizontally. So why in the example do I have `-99px`? This is simply because I want the circle to bounce against the inside edge of the bar. In the css I have `box-sizing: border-box;` applied to the bar so I need to account for the border width. It’s barely noticeable with a border width of 1px but with a thick border it will make a difference. This is the same reason the width and height of the circle are `28px` rather than `30px`.\n\nThe full calculation for the first keyframe is:\n\n```\n-(half the width of the bar - border width of the bar)\n-(100 - 1) = -99\n```\n\nFor the final keyframe the calculation is similar however as already stated positions in css are relative to the top left corner of the element, so we need to take off the width of the circle.\n\nThe full calculation is for the final keyframe is:\n\n```\n(half the width of the bar - border width of the bar – width of circle)\n100-1-28 = 71\n```\n\n**Note**: You might not want to confine the circle to the inner width of the bar. Take a look at some of the examples I’ve done in the links at end of this article.\n\nYou can of course change the sizes and colors to suit your preferences, as well as the border width or other properties, just remember if you change these adjust the calculations accordingly.\n\nIf you’d like to make a horizontal zero element loading animation you can, [fork my zero element animation boilerplate](http://codepen.io/MadeByMike/pen/6fced0cf51ce07ef6833aa775d254652).\n\nThis is of course only one possible type of loading animation. There are plenty of alternatives that could be made using the same technique.\n\nI’ve created some other examples such as a radial loading animation - I'll admit, this one generates some lengthy css, but in most cases it is still smaller than an image or even an SVG. To create more complex animations like this you are going to need a preprocessor or some kind of script to generate the keyframes. Otherwise minor changes are going to result in a significant re-calculations and this is not something you would want to do by hand.\n\nPlease let me know on [twitter](https://twitter.com/MikeRiethmuller) if you find this useful, if you have some more examples or if you have any questions. I'll be happy to add your examples here.\n\n## Examples\n\n - [Horizontal zero element loaders](http://codepen.io/MadeByMike/pen/LEbYgr?editors=110)\n - [Radial loaders zero element](http://codepen.io/MadeByMike/pen/bNeyEj?editors=110)\n",
      "internal": {
        "type": "contentfulWritingBodyTextNode",
        "mediaType": "text/markdown",
        "content": "With a \"zero element\" loading animation, a loading state can be applied to any element with just the addition of a class name.\n\n<div class=\"row\">\n  <div class=\"col col-6\">\n    <a href=\"http://codepen.io/MadeByMike/pen/LEbYgr?editors=110\">\n      <div class=\"loading horizontal-example\"></div>\n    </a>\n    <p class=\"caption\"><a href=\"http://codepen.io/MadeByMike/pen/LEbYgr?editors=110\">view examples on codepen</a></p>\n  </div>\n  <div class=\"col col-6\">\n    <a href=\"http://codepen.io/MadeByMike/pen/bNeyEj?editors=110\">\n      <div class=\"loading radial-example\"></div>\n    </a>\n    <p class=\"caption\"><a href=\"http://codepen.io/MadeByMike/pen/bNeyEj?editors=110\">view examples on codepen</a></p>\n  </div>\n</div>\n\nFirst of all, I'm not a huge fan of loading animations and neither are your users but sometimes, for various reasons an action is going to take time and we need to let people know we're working on it. So if we must use a loading animation we want it to have a light footprint and be easy to toggle on and off when and where we need it.\n\nI've seen a lot of css only loading animations. A quick search on CodePen will find thousands of examples. They are popular because they are relatively quick and easy to make, yet can be creatively challenging and the result is usually visually pleasing. These type of experiments are fun and can be a rewarding and worthwhile exercise, but the practicality of many examples is more questionable.\n\nThere are definite benefits to css only solutions such as improving the number of network requests, page weight and animation performance. But in my opinion these benefits are often outweighed by the need to insert a div soup into the mark-up. Not only that, positioning a css only \"spinner\" can be challenging, it often requires changes to the surrounding mark-up to avoid breaking the layout.\n\nPerhaps slightly more practical are the \"single element\" examples. They tend to be a bit more robust and whilst it's simple enough to toggle a single element to show and hide the loading animation, I don't like toggling element visibility or adding and removing elements with JavaScript. To me this seems to defeat the purpose of a CSS only solution. It feels like the correct way to approach a css loading animation would be for it to work simply by adding a class name such as `loading` to an element to indicate that it's in a loading state.\n\nAfter all loading is a \"describing word\", it indicates the state of something and is not an object itself. Maybe it is a little silly to think we should apply this logic to our mark-up, but it feels right to me. So I set out to make a \"zero element\" loading animation, one that can be applied simply by adding a class name.\n\nI eventually settled on a solution that works almost everywhere. There are only 2 conditions. The element we're adding the loading animation to:\n\n - cannot have `:before` or `:after` pseudo-elements applied\n - must be possible to change the `position` property to `relative`\n\nThis works in every situation I’ve ever needed a loading animation but if we want to apply this technique to an element that requires absolute positioning or already has pseudo-elements, it’s usually possible to add the loading class to a container or child element.\n\n## How it works\n\nThis technique works by using `:before` and `:after` pseudo-elements to create the different parts of the animation. CSS transformations and absolute positioning are applied and these properties are animated to create different types of loading indicators.\n\nThe difficult part is working out how to position and animate the various parts, taking into account the width, height, borders and css transformations.\n\nFor a typical horizontal loading animation we can work this out without too much trouble but to create a smooth radial animation or anything more complex you will probably want to rely on something like sass or a generator.\n\nIf you want to understand how it works let’s look at making a simple horizontal example.\n\n```css\n.loading{\n  position: relative;\n  background: rgba(255,255,255,.8);\n}\n\n.loading:before{\n  content:'';\n  box-sizing: border-box;\n\n  /* centre everything */\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n\n  width: 200px;\n  height: 30px;\n\n  border: solid 1px #000;\n  border-radius: 30px;\n}\n\n.loading:after{\n  content:'';\n  box-sizing: border-box;\n\n  /* centre everything */\n  position: absolute;\n  transform: translate(-50%, -50%);\n  top: 50%;\n  left: 50%;\n\n  border: solid 5px #000;\n  width: 28px;\n  height: 28px;\n  border-radius: 50%;\n}\n```\n\nWith the above css we can add a class name `loading` to any element on the page and we should get something like the following, positioned in the centre:\n\n<img style=\"margin: 0 auto; display:block;\" src=\"/img/zero-element-example.png\">\n\nIf you want to apply this to the whole page, by applying the class name to the body element, you will also need to add the following css:\n\n```css\nhtml, body { height: 100%; }\n```\n\nTo complete the loading animation we need to move the circle back and forward along the bar.\n\nTo our circle add the following css:\n\n```css\n.loading:after{\n\n  ...\n\n  -webkit-animation: loading 3s ease-in-out infinite alternate;\n  animation: loading 3s ease-in-out infinite alternate;\n}\n```\n\nImportant animation properties in this example are the `animation-timing-function` and `animation-direction`. For the timing function I selected `ease-in-out` which causes it to slow before changing direction, although `linear` also works, however for this example the animation direction must be set to `alternate`. Next we add the animation keyframes.\n\n```css\n@keyframes loading {\n  0% { transform: translate(-99px, -50%); }\n  100% { transform: translate(71px, -50%); }\n}\n\n@-webkit-keyframes loading {\n  0% { transform: translate(-99px, -50%); }\n  100% { transform: translate(71px, -50%); }\n}\n```\n\nFor the animation keyframes we translate the position of the circle so that is starts with its left edge against the left edge of the bar and ends with its right edge against the right edge of the bar. We also need to translate the vertical position by `-50%` to maintain its vertical centring. We do not change the vertical position in this animation.\n\nWithout any transformations applied, the left edge of the circle is positioned in the centre of the bar. Since we know the width of the bar is 200px, to position the left edge of the circle against the left edge of the bar we need to move it `-100px` horizontally. So why in the example do I have `-99px`? This is simply because I want the circle to bounce against the inside edge of the bar. In the css I have `box-sizing: border-box;` applied to the bar so I need to account for the border width. It’s barely noticeable with a border width of 1px but with a thick border it will make a difference. This is the same reason the width and height of the circle are `28px` rather than `30px`.\n\nThe full calculation for the first keyframe is:\n\n```\n-(half the width of the bar - border width of the bar)\n-(100 - 1) = -99\n```\n\nFor the final keyframe the calculation is similar however as already stated positions in css are relative to the top left corner of the element, so we need to take off the width of the circle.\n\nThe full calculation is for the final keyframe is:\n\n```\n(half the width of the bar - border width of the bar – width of circle)\n100-1-28 = 71\n```\n\n**Note**: You might not want to confine the circle to the inner width of the bar. Take a look at some of the examples I’ve done in the links at end of this article.\n\nYou can of course change the sizes and colors to suit your preferences, as well as the border width or other properties, just remember if you change these adjust the calculations accordingly.\n\nIf you’d like to make a horizontal zero element loading animation you can, [fork my zero element animation boilerplate](http://codepen.io/MadeByMike/pen/6fced0cf51ce07ef6833aa775d254652).\n\nThis is of course only one possible type of loading animation. There are plenty of alternatives that could be made using the same technique.\n\nI’ve created some other examples such as a radial loading animation - I'll admit, this one generates some lengthy css, but in most cases it is still smaller than an image or even an SVG. To create more complex animations like this you are going to need a preprocessor or some kind of script to generate the keyframes. Otherwise minor changes are going to result in a significant re-calculations and this is not something you would want to do by hand.\n\nPlease let me know on [twitter](https://twitter.com/MikeRiethmuller) if you find this useful, if you have some more examples or if you have any questions. I'll be happy to add your examples here.\n\n## Examples\n\n - [Horizontal zero element loaders](http://codepen.io/MadeByMike/pen/LEbYgr?editors=110)\n - [Radial loaders zero element](http://codepen.io/MadeByMike/pen/bNeyEj?editors=110)\n",
        "contentDigest": "bc19b025ae03c46fd3983d97307b9cbc",
        "owner": "gatsby-source-contentful"
      }
    },
    "3efb439f-b7ac-543d-baf6-ece41d990898": {
      "id": "3efb439f-b7ac-543d-baf6-ece41d990898",
      "parent": "c6021bd8-4e79-5e53-8ada-6ac2fb68027c",
      "children": [
        "2a1bfe1e-bb0b-50e7-a43c-ed69f78c8101"
      ],
      "description": "My experience implementing service workers to cache and serve content offline.",
      "internal": {
        "type": "contentfulWritingDescriptionTextNode",
        "mediaType": "text/markdown",
        "content": "My experience implementing service workers to cache and serve content offline.",
        "contentDigest": "2d0de9effc29ecb63c9a741da7c62f9a",
        "owner": "gatsby-source-contentful"
      }
    },
    "edfd379f-9adc-5b92-baeb-ecae57cff7a1": {
      "id": "edfd379f-9adc-5b92-baeb-ecae57cff7a1",
      "parent": "c6021bd8-4e79-5e53-8ada-6ac2fb68027c",
      "children": [
        "9ff5728a-3db0-5a4c-b0a2-e4b5aa030ec9"
      ],
      "body": "Service workers can do a lot more than make web pages work offline but for most people, myself included, this will be their first experience with them. I recently implemented a simple offline page for my blog and was surprised with how easy it was. Full of confidence, I wanted to do more. I decided to start saving blog posts for offline reading and things escalated quickly. I soon learnt the rabbit hole is deep.\n\nThis is not a criticism of service workers, it's an indication of how powerful and versatile they are. I think in time, as the concepts become more familiar, and the complexities are abstracted away, offline content will become common place. In fact, I drank the kool-aid and can see why many people think that, within a few years, offline content will become as ubiquitous in web development as responsive design today.\n\nHaving said that, there are a few things I wish I had known before getting started.\n\n## Browser support & caching\n\nService workers are an easy candidate for progressive enhancement and on the surface, it's easy to check for support before registering a service worker. You do that like this:\n\n```javascript\nif ('serviceWorker' in navigator) {\n  // Yay, service workers work!\n  navigator.serviceWorker.register('/sw.js');\n}\n```\n\nIt seems simple enough but there is one gotcha. If you look at the [MDN page for the service worker cache API](https://developer.mozilla.org/en-US/docs/Web/API/Cache), you will see that different versions of Chrome support different caching methods. This means that, despite diligently checking for feature support, versions of Chrome between 40 and 45 will get an error when using the `addAll` method. This is less of a problem now than it was when these versions were more widely used. I checked [Can I Use](http://caniuse.com/usage-table) and at the time of writing this, it looks like it might impact around 1.15% of users.  \n\nI read several blogs and tutorials on getting started with service workers, some advocate using only `put` rather than `addAll`, others recommend using a [cache pollyfill](https://github.com/dominiccooney/cache-polyfill), while others still make no mention of it. Obviously these were all written at different times and it took me a lot of research to work out what the right approach was.\n\nIn the end, with such a small number of users, that is only getting smaller, I opted to check for the `addAll` method and treat browsers that don't support it, like those that don't support service workers at all.\n\nSo, my feature detection now becomes:\n\n```javascript\nif ( 'serviceWorker' in navigator && (typeof Cache !== 'undefined' && Cache.prototype.addAll) ) {\n  // Yay, this is a problem we didn't need to have!\n  navigator.serviceWorker.register('/sw.js');\n}\n```\n\nThis is a bit verbose, and I'm really going out of my way here just to avoid a console error, but I tested this in all major browsers, including critical versions that don't support the `addAll` method, and I'm happy with it. It was so much fun!\n\n## Where to put service workers\n\nWhen you register a service worker you point to a JavaScript file with the service worker logic, and this brings me to the second thing I wish I'd known. That is, if you want to implement service workers across your domain, you **must place the service worker in the root directory of your site**. For security reasons, service workers only control pages in the same directory as the service worker or below. Effectively this means, not in your site's JavaScript directory as I attempted at first. I'm sure this was written as clear as day, somewhere that was obvious to everyone but me.\n\nWhile on this topic, it's worth mentioning that service workers only work over HTTPS or localhost domains. Luckily for me my blog was already configured to redirect HTTP traffic to HTTPS. If you can do this, it's a great idea, if not, you could check you are on a secure domain before registering a service worker.\n\n## Can we service worker yet?\n\nYes, we are now ready to service worker! When getting started I recommend reading, Jake \"The Service Worker\" Archibald's [Offline Cookbook](https://jakearchibald.com/2014/offline-cookbook/). It's still a great place to start and the links and references contain a wealth of information.\n\nYou'll soon learn that, where offline content is concerned, there are 3 main events we listen for in a service worker:\n\n  - install,\n  - activate, and\n  - fetch.\n\nThe **install** event is fired only once when the service worker is first registered. Here we setup the cache prime it with essential resources. My install event is pretty simple, nothing special here. I cache the homepage, CSS and an offline page:\n\n```javascript\nvar CACHE_NAME = 'v1::madebymike';\nvar urlsToCache = [\n  '/',\n  '/offline.html',\n  '/css/styles.min.css'\n];\n\n// Install\nself.addEventListener('install', function(event) {\n  event.waitUntil(\n    caches.open(CACHE_NAME).then(function(cache) {\n      return cache.addAll(urlsToCache);\n    })\n  );\n});\n```\n\nThe **activate** event is fired after install and every time you navigate to the domain managed by the service worker. It's not fired for subsequent navigation between pages on the same domain.  \n\nMy activate event is also pretty standard. I'm only using one cache for my service worker. This pattern checks the names of any caches to ensure they match the variable `CACHE_NAME`, if they don't, it will delete them. This gives me a manual means of invalidating my service worker cache.     \n\n```javascript\nself.addEventListener('activate', function(event) {\n  event.waitUntil(\n    caches.keys().then(function(cacheNames) {\n      return Promise.all(\n        cacheNames.filter(function(cacheName) {\n          return cacheName !== CACHE_NAME;\n        }).map(function(cacheName) {\n          console.log('Deleting '+ cacheName);\n          return caches.delete(cacheName);\n        })\n      );\n    })\n  );\n});\n```\n\nFinally, the **fetch** event is fired every time a page is requested. The fetch event is intercepted regardless of whether the user is offline or not. Like I said earlier service workers != offline content. Offline content is just one implementation of service workers. And this is really good news! Service workers have the ability speed up everyday web browsing, like, a lot.\n\nHere is my first example of a fetch event. It's really little more than custom error page, but it's a start.\n\n```javascript\nself.addEventListener('fetch', function(event) {\n  e.respondWith(\n    // If network fetch fails serve offline page form cache\n    fetch(event.request).catch(function(error) {\n      return caches.open(CACHE_NAME).then(function(cache) {\n        return cache.match('/offline.html');\n      });\n    })\n  );\n});\n```\n\n## A better service worker (down the rabbit hole)\n\nAt this point I was pretty happy with myself and if you want to implement offline content, aiming for the above is a great start. Brazened by my success I could see the potential. I needed to cache blog posts for offline reading, and where possible, I needed to return pages from the cache for connected users.\n\nIt took me a lot of testing and several mistakes to finally arrive at this pattern. You need to be really careful when serving cached pages by default. You could end up showing really old content, or even breaking your site.\n\n```javascript\nself.addEventListener('fetch', function(event) {\n\n  var requestURL = new URL(event.request.url);\n\n  event.respondWith(\n    caches.open(CACHE_NAME).then(function(cache) {\n      return cache.match(event.request).then(function(response) {\n\n        // If there is a cached response return this otherwise grab from network\n        return response || fetch(event.request).then(function(response) {\n\n          // Check if the network request is successful\n          // don't update the cache with error pages!!\n          // Also check the request domain matches service worker domain\n          if (response.ok && requestURL.origin == location.origin){\n            // All good? Update the cache with the network response\n            cache.put(event.request, response.clone());\n          }\n\n          return response;\n\n        }).catch(function() {\n\n          // We can't access the network, return an offline page from the cache\n          return caches.match('/offline.html');\n\n        });\n\n      });\n    });\n  );\n\n});\n\n```\n\nThis pattern always attempts to serve content from the cache first, but at the same time I start a network request. If the network request resolves successfully, and is not an error page, I update the cache. This means that when a user visits my website, they will see the last cached version, not necessarily the latest version. On a subsequent visit or a refresh, they will retrieve the updated page from the cache. If I make major changes, such as to CSS and I want to manually invalidate the service worker cache, I can change the `CACHE_NAME` in my service worker script.\n\n## A better offline page (deeper down the rabbit hole)\n\nThe generic offline page, from my first fetch example, is still served when the content is not cached and the network request fails. I wanted to do more with this. If we can't show the page they want, I thought it would be helpful to list pages the user has available in their cache. So I went down the rabbit hole again.\n\nThere is a method for communicating with service workers and web workers called the [channel messaging API](https://developer.mozilla.org/en-US/docs/Web/API/Channel_Messaging_API).\n\n**IMPORTANT UPDATE** \n\nI don't need to use the channel messaging API to get a URL from the cache in this example (Thanks to [Nicolas Hoizey](https://twitter.com/nhoizey) for brining that to my attention). The channel messaging API is useful when you want to respond to an event that only the service worker is aware of. In this case, since I am only grabbing a list of pages fron the cache I can access the `window.caches` object in the offline page. The only thing the service worker is aware of that my ofline page is not, is the `CACHE_NAME` variable. It contains the cache version and I didn't want to update it in multiple places each time it changed, but since it follows a predictable pattern I can do something like the following:\n\n```javascript\n// Get a list of cache keys\nwindow.caches.keys().then(function(cacheNames){\n  \n  // Find the key that matches my cacheName\n  cacheName = cacheNames.filter(function(cacheName) {\n    return cacheName.indexOf(\"::madebymike\") !== -1;\n  })[0]\n\n  // Open the cache for that key\n  caches.open(cacheName).then(function(cache) {\n\n    // The rest of this function is very similar to the Channel messaging API example\n    // where I fetch and return a list of URLs that are cached for offline reading\n\n  })\n}\n```\n\n## Channel messaging API\n\nThis is the old method I used to fetch cached pages from the service worker. Although it turned out I didn't need to message the service worker to do this, it's still a valuable technique for other purposes. \n\nIn the service worker, I listen for a `message` event. Once received, I get a list of pages from the cache that match the URL pattern for blog posts on my site and post a response back to the offline page.\n\n```javascript\nself.addEventListener('message', function(event) {\n  caches.open(CACHE_NAME).then(function(cache) {\n\n    return cache.keys().then(function(requests) {\n\n      var urls = requests.filter(function(request){\n        return request.url.indexOf(\"/writing/\") !== -1;\n      }).map(function(request) {\n        return request.url;\n      });\n      return urls.sort();\n\n    }).then(function(urls) {\n      event.ports[0].postMessage(urls);\n    });\n\n  });\n});\n```\n\nIn my offline page I send a message to the service worker and listen for a response. It's not very clever. At the moment it doesn't matter what message I post, I will always get the same response. But this is sufficient for now and I didn't want to complicate it more than necessary.  \n\n```javascript\nvar messageChannel = new MessageChannel();\nmessageChannel.port1.onmessage = function(event) {\n  // Add list of offline pages to body with JavaScript\n  // `event.data` contains an array of cached URLs\n};\nnavigator.serviceWorker.controller.postMessage(\"get-pages\", [messageChannel.port2]);  \n```\nMy worst case offline experience now looks something like this:\n\n<img src=\"/img/offline.png\" style=\"border: solid 1px #999\">\n\n## What next?\n\nI'd like to give users an indication of when they are reading something offline. I think this could be helpful, and in poor network conditions it might not always be obvious. This would probably would use the message API as well, but I might also investigate push notifications. I'll update this post if I ever get around to it.\n\nI hope explaining my experience implementing offline content can help make it easier for you or just inspire you to get started. I think the most difficult thing was understanding the impact of choices when serving cached content to all users. Making sure you get this right is important and it takes some time to understanding how service workers, and caching in general works. I'm not an expert at this so please, if I've got anything wrong, let me know so I can update it.",
      "internal": {
        "type": "contentfulWritingBodyTextNode",
        "mediaType": "text/markdown",
        "content": "Service workers can do a lot more than make web pages work offline but for most people, myself included, this will be their first experience with them. I recently implemented a simple offline page for my blog and was surprised with how easy it was. Full of confidence, I wanted to do more. I decided to start saving blog posts for offline reading and things escalated quickly. I soon learnt the rabbit hole is deep.\n\nThis is not a criticism of service workers, it's an indication of how powerful and versatile they are. I think in time, as the concepts become more familiar, and the complexities are abstracted away, offline content will become common place. In fact, I drank the kool-aid and can see why many people think that, within a few years, offline content will become as ubiquitous in web development as responsive design today.\n\nHaving said that, there are a few things I wish I had known before getting started.\n\n## Browser support & caching\n\nService workers are an easy candidate for progressive enhancement and on the surface, it's easy to check for support before registering a service worker. You do that like this:\n\n```javascript\nif ('serviceWorker' in navigator) {\n  // Yay, service workers work!\n  navigator.serviceWorker.register('/sw.js');\n}\n```\n\nIt seems simple enough but there is one gotcha. If you look at the [MDN page for the service worker cache API](https://developer.mozilla.org/en-US/docs/Web/API/Cache), you will see that different versions of Chrome support different caching methods. This means that, despite diligently checking for feature support, versions of Chrome between 40 and 45 will get an error when using the `addAll` method. This is less of a problem now than it was when these versions were more widely used. I checked [Can I Use](http://caniuse.com/usage-table) and at the time of writing this, it looks like it might impact around 1.15% of users.  \n\nI read several blogs and tutorials on getting started with service workers, some advocate using only `put` rather than `addAll`, others recommend using a [cache pollyfill](https://github.com/dominiccooney/cache-polyfill), while others still make no mention of it. Obviously these were all written at different times and it took me a lot of research to work out what the right approach was.\n\nIn the end, with such a small number of users, that is only getting smaller, I opted to check for the `addAll` method and treat browsers that don't support it, like those that don't support service workers at all.\n\nSo, my feature detection now becomes:\n\n```javascript\nif ( 'serviceWorker' in navigator && (typeof Cache !== 'undefined' && Cache.prototype.addAll) ) {\n  // Yay, this is a problem we didn't need to have!\n  navigator.serviceWorker.register('/sw.js');\n}\n```\n\nThis is a bit verbose, and I'm really going out of my way here just to avoid a console error, but I tested this in all major browsers, including critical versions that don't support the `addAll` method, and I'm happy with it. It was so much fun!\n\n## Where to put service workers\n\nWhen you register a service worker you point to a JavaScript file with the service worker logic, and this brings me to the second thing I wish I'd known. That is, if you want to implement service workers across your domain, you **must place the service worker in the root directory of your site**. For security reasons, service workers only control pages in the same directory as the service worker or below. Effectively this means, not in your site's JavaScript directory as I attempted at first. I'm sure this was written as clear as day, somewhere that was obvious to everyone but me.\n\nWhile on this topic, it's worth mentioning that service workers only work over HTTPS or localhost domains. Luckily for me my blog was already configured to redirect HTTP traffic to HTTPS. If you can do this, it's a great idea, if not, you could check you are on a secure domain before registering a service worker.\n\n## Can we service worker yet?\n\nYes, we are now ready to service worker! When getting started I recommend reading, Jake \"The Service Worker\" Archibald's [Offline Cookbook](https://jakearchibald.com/2014/offline-cookbook/). It's still a great place to start and the links and references contain a wealth of information.\n\nYou'll soon learn that, where offline content is concerned, there are 3 main events we listen for in a service worker:\n\n  - install,\n  - activate, and\n  - fetch.\n\nThe **install** event is fired only once when the service worker is first registered. Here we setup the cache prime it with essential resources. My install event is pretty simple, nothing special here. I cache the homepage, CSS and an offline page:\n\n```javascript\nvar CACHE_NAME = 'v1::madebymike';\nvar urlsToCache = [\n  '/',\n  '/offline.html',\n  '/css/styles.min.css'\n];\n\n// Install\nself.addEventListener('install', function(event) {\n  event.waitUntil(\n    caches.open(CACHE_NAME).then(function(cache) {\n      return cache.addAll(urlsToCache);\n    })\n  );\n});\n```\n\nThe **activate** event is fired after install and every time you navigate to the domain managed by the service worker. It's not fired for subsequent navigation between pages on the same domain.  \n\nMy activate event is also pretty standard. I'm only using one cache for my service worker. This pattern checks the names of any caches to ensure they match the variable `CACHE_NAME`, if they don't, it will delete them. This gives me a manual means of invalidating my service worker cache.     \n\n```javascript\nself.addEventListener('activate', function(event) {\n  event.waitUntil(\n    caches.keys().then(function(cacheNames) {\n      return Promise.all(\n        cacheNames.filter(function(cacheName) {\n          return cacheName !== CACHE_NAME;\n        }).map(function(cacheName) {\n          console.log('Deleting '+ cacheName);\n          return caches.delete(cacheName);\n        })\n      );\n    })\n  );\n});\n```\n\nFinally, the **fetch** event is fired every time a page is requested. The fetch event is intercepted regardless of whether the user is offline or not. Like I said earlier service workers != offline content. Offline content is just one implementation of service workers. And this is really good news! Service workers have the ability speed up everyday web browsing, like, a lot.\n\nHere is my first example of a fetch event. It's really little more than custom error page, but it's a start.\n\n```javascript\nself.addEventListener('fetch', function(event) {\n  e.respondWith(\n    // If network fetch fails serve offline page form cache\n    fetch(event.request).catch(function(error) {\n      return caches.open(CACHE_NAME).then(function(cache) {\n        return cache.match('/offline.html');\n      });\n    })\n  );\n});\n```\n\n## A better service worker (down the rabbit hole)\n\nAt this point I was pretty happy with myself and if you want to implement offline content, aiming for the above is a great start. Brazened by my success I could see the potential. I needed to cache blog posts for offline reading, and where possible, I needed to return pages from the cache for connected users.\n\nIt took me a lot of testing and several mistakes to finally arrive at this pattern. You need to be really careful when serving cached pages by default. You could end up showing really old content, or even breaking your site.\n\n```javascript\nself.addEventListener('fetch', function(event) {\n\n  var requestURL = new URL(event.request.url);\n\n  event.respondWith(\n    caches.open(CACHE_NAME).then(function(cache) {\n      return cache.match(event.request).then(function(response) {\n\n        // If there is a cached response return this otherwise grab from network\n        return response || fetch(event.request).then(function(response) {\n\n          // Check if the network request is successful\n          // don't update the cache with error pages!!\n          // Also check the request domain matches service worker domain\n          if (response.ok && requestURL.origin == location.origin){\n            // All good? Update the cache with the network response\n            cache.put(event.request, response.clone());\n          }\n\n          return response;\n\n        }).catch(function() {\n\n          // We can't access the network, return an offline page from the cache\n          return caches.match('/offline.html');\n\n        });\n\n      });\n    });\n  );\n\n});\n\n```\n\nThis pattern always attempts to serve content from the cache first, but at the same time I start a network request. If the network request resolves successfully, and is not an error page, I update the cache. This means that when a user visits my website, they will see the last cached version, not necessarily the latest version. On a subsequent visit or a refresh, they will retrieve the updated page from the cache. If I make major changes, such as to CSS and I want to manually invalidate the service worker cache, I can change the `CACHE_NAME` in my service worker script.\n\n## A better offline page (deeper down the rabbit hole)\n\nThe generic offline page, from my first fetch example, is still served when the content is not cached and the network request fails. I wanted to do more with this. If we can't show the page they want, I thought it would be helpful to list pages the user has available in their cache. So I went down the rabbit hole again.\n\nThere is a method for communicating with service workers and web workers called the [channel messaging API](https://developer.mozilla.org/en-US/docs/Web/API/Channel_Messaging_API).\n\n**IMPORTANT UPDATE** \n\nI don't need to use the channel messaging API to get a URL from the cache in this example (Thanks to [Nicolas Hoizey](https://twitter.com/nhoizey) for brining that to my attention). The channel messaging API is useful when you want to respond to an event that only the service worker is aware of. In this case, since I am only grabbing a list of pages fron the cache I can access the `window.caches` object in the offline page. The only thing the service worker is aware of that my ofline page is not, is the `CACHE_NAME` variable. It contains the cache version and I didn't want to update it in multiple places each time it changed, but since it follows a predictable pattern I can do something like the following:\n\n```javascript\n// Get a list of cache keys\nwindow.caches.keys().then(function(cacheNames){\n  \n  // Find the key that matches my cacheName\n  cacheName = cacheNames.filter(function(cacheName) {\n    return cacheName.indexOf(\"::madebymike\") !== -1;\n  })[0]\n\n  // Open the cache for that key\n  caches.open(cacheName).then(function(cache) {\n\n    // The rest of this function is very similar to the Channel messaging API example\n    // where I fetch and return a list of URLs that are cached for offline reading\n\n  })\n}\n```\n\n## Channel messaging API\n\nThis is the old method I used to fetch cached pages from the service worker. Although it turned out I didn't need to message the service worker to do this, it's still a valuable technique for other purposes. \n\nIn the service worker, I listen for a `message` event. Once received, I get a list of pages from the cache that match the URL pattern for blog posts on my site and post a response back to the offline page.\n\n```javascript\nself.addEventListener('message', function(event) {\n  caches.open(CACHE_NAME).then(function(cache) {\n\n    return cache.keys().then(function(requests) {\n\n      var urls = requests.filter(function(request){\n        return request.url.indexOf(\"/writing/\") !== -1;\n      }).map(function(request) {\n        return request.url;\n      });\n      return urls.sort();\n\n    }).then(function(urls) {\n      event.ports[0].postMessage(urls);\n    });\n\n  });\n});\n```\n\nIn my offline page I send a message to the service worker and listen for a response. It's not very clever. At the moment it doesn't matter what message I post, I will always get the same response. But this is sufficient for now and I didn't want to complicate it more than necessary.  \n\n```javascript\nvar messageChannel = new MessageChannel();\nmessageChannel.port1.onmessage = function(event) {\n  // Add list of offline pages to body with JavaScript\n  // `event.data` contains an array of cached URLs\n};\nnavigator.serviceWorker.controller.postMessage(\"get-pages\", [messageChannel.port2]);  \n```\nMy worst case offline experience now looks something like this:\n\n<img src=\"/img/offline.png\" style=\"border: solid 1px #999\">\n\n## What next?\n\nI'd like to give users an indication of when they are reading something offline. I think this could be helpful, and in poor network conditions it might not always be obvious. This would probably would use the message API as well, but I might also investigate push notifications. I'll update this post if I ever get around to it.\n\nI hope explaining my experience implementing offline content can help make it easier for you or just inspire you to get started. I think the most difficult thing was understanding the impact of choices when serving cached content to all users. Making sure you get this right is important and it takes some time to understanding how service workers, and caching in general works. I'm not an expert at this so please, if I've got anything wrong, let me know so I can update it.",
        "contentDigest": "4a8195942e0706f13ebeaa7f95bba0e8",
        "owner": "gatsby-source-contentful"
      }
    },
    "5e46b326-64db-572b-a140-15a2fe4bfdf1": {
      "id": "5e46b326-64db-572b-a140-15a2fe4bfdf1",
      "parent": "c6021bd8-4e79-5e53-8ada-6ac2fb68027c",
      "children": [
        "d9691426-ce96-5049-a9f4-f12125a1665e"
      ],
      "update": "I've updated my blog platform and am now using a workbox configuration with Gatsby. I'd still recommend the methods listed here for simple static sites or where you want greater control over service workers.",
      "internal": {
        "type": "contentfulWritingUpdateTextNode",
        "mediaType": "text/markdown",
        "content": "I've updated my blog platform and am now using a workbox configuration with Gatsby. I'd still recommend the methods listed here for simple static sites or where you want greater control over service workers.",
        "contentDigest": "74aa53e21f6ab81d1586654aa6752b09",
        "owner": "gatsby-source-contentful"
      }
    },
    "e498ede0-1f4d-519d-9c16-a39b91add927": {
      "id": "e498ede0-1f4d-519d-9c16-a39b91add927",
      "parent": null,
      "children": [],
      "name": "Page",
      "displayField": "title",
      "description": "",
      "internal": {
        "type": "ContentfulContentType",
        "contentDigest": "3042203182459741dc0ef05a07d58627",
        "owner": "gatsby-source-contentful"
      }
    },
    "80899290-155b-59e7-8265-6e07fbf72705": {
      "title": "Let's make something brilliant!",
      "pageTitle": "Hire me",
      "slug": "hire-me",
      "publishDate": "2018-07-28T00:00+10:00",
      "description___NODE": "08d59f81-40d2-5a28-a903-20f2237756f7",
      "body___NODE": "f38021cd-33c9-50fb-97f3-d4abbb271e15",
      "sidebar___NODE": "be6af314-ebc7-5fef-92b1-7c3b6e86fe98",
      "id": "80899290-155b-59e7-8265-6e07fbf72705",
      "contentful_id": "5k0KagC0eAEwMSkmGAEigK",
      "createdAt": "2018-07-28T11:21:23.148Z",
      "updatedAt": "2018-09-30T06:56:59.325Z",
      "parent": "Page",
      "children": [
        "08d59f81-40d2-5a28-a903-20f2237756f7",
        "f38021cd-33c9-50fb-97f3-d4abbb271e15",
        "be6af314-ebc7-5fef-92b1-7c3b6e86fe98"
      ],
      "internal": {
        "type": "ContentfulPage",
        "contentDigest": "00bd3d59eaef22637643c2d96aa98d07",
        "owner": "gatsby-source-contentful"
      },
      "node_locale": "en-US"
    },
    "08d59f81-40d2-5a28-a903-20f2237756f7": {
      "id": "08d59f81-40d2-5a28-a903-20f2237756f7",
      "parent": "80899290-155b-59e7-8265-6e07fbf72705",
      "children": [
        "e1dba7d6-a4ec-5896-83e9-63041d471206"
      ],
      "description": "I build innovative applications,  data visualisations and websites. I want to make amazing user experiences that focus on quality, performance and great design, with built-in accessibility. I write maintainable, future-proof code with the latest tools and techniques.",
      "internal": {
        "type": "contentfulPageDescriptionTextNode",
        "mediaType": "text/markdown",
        "content": "I build innovative applications,  data visualisations and websites. I want to make amazing user experiences that focus on quality, performance and great design, with built-in accessibility. I write maintainable, future-proof code with the latest tools and techniques.",
        "contentDigest": "c68670f302e6d745e0994c740a879dfc",
        "owner": "gatsby-source-contentful"
      }
    },
    "f38021cd-33c9-50fb-97f3-d4abbb271e15": {
      "id": "f38021cd-33c9-50fb-97f3-d4abbb271e15",
      "parent": "80899290-155b-59e7-8265-6e07fbf72705",
      "children": [
        "96aa0a75-7b72-5d6e-a493-3e8408c55856"
      ],
      "body": "I'm a skilled engineer. I'm comfortable with tools such as React, Node, ES6, Webpack etc. but I don't like listing tools and libraries. I am comfortable learning new languages, libraries and tools when required. I have done this before and I will no doubt have to do it again.\n\nI'm a creative, innovative and dedicated developer. I have a deep understanding front-end technologies such as CSS and SVG, but also of the web as a platform. I know how browsers work. I read specifications and so many blog posts. There is a good chance I know how to solve specific problems or where to find the answer.\n\nI am an effective team builder. I've led teams. I've worked remotely and I'm a mentor in my community. I've worked for myself, in small agencies and in large corporate environments. I know the many shapes teams can take and how to be effective in each case. I value diversity that's why I help organise a program called [CodeBar in Sydney](https://codebar.io/sydney) to support underrepresented groups in tech. I don't just build teams I build community. I can do this for you too.\n\nI'm adaptable. I've worked on some of Australia's largest websites as well as the smallest community sites. I've built websites, applications and data visualisations on numerous platforms. \n\nI have spoken at dozens of conferences and community-level events around Australia, Europe, UK, and the US. I have written numerous technical articles some of which are here on my personal blog, as well as on websites like Smashing Magazine and Codrops. \n\n\n## What can I help with?\n* Ready to make use of CSS Grid or Custom Properties and not sure where to start?\n* Want to write better responsive design patterns?\n* Need help implementing a design system or building a UI library?\n* Have an innovative application, visualisation or product idea?\n* Have a team that needs help or training with any of the above?  \n* Working on something larger? Let's put together a world class team.\n\nGot something else you think I would be good at or interested in that doesn’t fit with the above? That’s great! <a href=\"mailto:mike@madebymike.com.au\">Get in touch</a>. Let’s do something amazing together. Let’s win the internet!",
      "internal": {
        "type": "contentfulPageBodyTextNode",
        "mediaType": "text/markdown",
        "content": "I'm a skilled engineer. I'm comfortable with tools such as React, Node, ES6, Webpack etc. but I don't like listing tools and libraries. I am comfortable learning new languages, libraries and tools when required. I have done this before and I will no doubt have to do it again.\n\nI'm a creative, innovative and dedicated developer. I have a deep understanding front-end technologies such as CSS and SVG, but also of the web as a platform. I know how browsers work. I read specifications and so many blog posts. There is a good chance I know how to solve specific problems or where to find the answer.\n\nI am an effective team builder. I've led teams. I've worked remotely and I'm a mentor in my community. I've worked for myself, in small agencies and in large corporate environments. I know the many shapes teams can take and how to be effective in each case. I value diversity that's why I help organise a program called [CodeBar in Sydney](https://codebar.io/sydney) to support underrepresented groups in tech. I don't just build teams I build community. I can do this for you too.\n\nI'm adaptable. I've worked on some of Australia's largest websites as well as the smallest community sites. I've built websites, applications and data visualisations on numerous platforms. \n\nI have spoken at dozens of conferences and community-level events around Australia, Europe, UK, and the US. I have written numerous technical articles some of which are here on my personal blog, as well as on websites like Smashing Magazine and Codrops. \n\n\n## What can I help with?\n* Ready to make use of CSS Grid or Custom Properties and not sure where to start?\n* Want to write better responsive design patterns?\n* Need help implementing a design system or building a UI library?\n* Have an innovative application, visualisation or product idea?\n* Have a team that needs help or training with any of the above?  \n* Working on something larger? Let's put together a world class team.\n\nGot something else you think I would be good at or interested in that doesn’t fit with the above? That’s great! <a href=\"mailto:mike@madebymike.com.au\">Get in touch</a>. Let’s do something amazing together. Let’s win the internet!",
        "contentDigest": "4be843c3ef177302f1068cf2cfa28447",
        "owner": "gatsby-source-contentful"
      }
    },
    "be6af314-ebc7-5fef-92b1-7c3b6e86fe98": {
      "id": "be6af314-ebc7-5fef-92b1-7c3b6e86fe98",
      "parent": "80899290-155b-59e7-8265-6e07fbf72705",
      "children": [
        "fbd2a532-272b-5830-85c2-5c8b140ba892"
      ],
      "sidebar": "<figure class=\"nice-pic\">\n  <img src=\"https://images.ctfassets.net/2cb7djx9f8kv/4QWrnDKzZK6eugwYS4ScSM/2d97538e8b969ebdbf0362ee9874a1c5/mike.jpg\" />\n</figure>\nGet in touch:\n<a href=\"mailto:mike@madebymike.com.au\">mike@madebymike.com.au</a>\n",
      "internal": {
        "type": "contentfulPageSidebarTextNode",
        "mediaType": "text/markdown",
        "content": "<figure class=\"nice-pic\">\n  <img src=\"https://images.ctfassets.net/2cb7djx9f8kv/4QWrnDKzZK6eugwYS4ScSM/2d97538e8b969ebdbf0362ee9874a1c5/mike.jpg\" />\n</figure>\nGet in touch:\n<a href=\"mailto:mike@madebymike.com.au\">mike@madebymike.com.au</a>\n",
        "contentDigest": "3b6284660e570a3baa749780fae8bef3",
        "owner": "gatsby-source-contentful"
      }
    },
    "e266b5b0-3b04-506c-a72f-97488e850127": {
      "id": "e266b5b0-3b04-506c-a72f-97488e850127",
      "parent": null,
      "children": [],
      "name": "Card",
      "displayField": "title",
      "description": "",
      "internal": {
        "type": "ContentfulContentType",
        "contentDigest": "3038f4ef50d8a98704fffdf018d40098",
        "owner": "gatsby-source-contentful"
      }
    },
    "b2b3f90a-ce0d-5853-8b4b-ab7b5281f614": {
      "title": "Smashing Conf Freiburg",
      "type": "Video",
      "url": "https://vimeo.com/235428198",
      "publishDate": "2017-09-17T00:00+10:00",
      "color": "White",
      "size": "Wide",
      "image___NODE": "edf8346c-99ed-5ecc-aff9-228fca50a022",
      "description___NODE": "995d7aad-5031-54b4-b808-245353aa9e5c",
      "id": "b2b3f90a-ce0d-5853-8b4b-ab7b5281f614",
      "contentful_id": "60oSD2yKByS2YAYy2oQeyO",
      "createdAt": "2018-11-04T10:10:13.522Z",
      "updatedAt": "2018-11-04T12:17:39.649Z",
      "parent": "Card",
      "children": [
        "995d7aad-5031-54b4-b808-245353aa9e5c"
      ],
      "internal": {
        "type": "ContentfulCard",
        "contentDigest": "c14de2b1f39f58eefe5a7c3ce9af1bd6",
        "owner": "gatsby-source-contentful"
      },
      "node_locale": "en-US"
    },
    "727d5cf5-c96e-55d7-9a17-e19601ce5de0": {
      "title": "Smashing Conf San Francisco",
      "type": "Video",
      "url": "https://vimeo.com/266788829",
      "publishDate": "2017-06-16T00:00+10:00",
      "color": "White",
      "size": "Wide",
      "image___NODE": "1dd64149-0c42-55c6-b6aa-c8b9f97e3d1a",
      "description___NODE": "23cdebc3-6994-58dc-aa58-16513593783e",
      "id": "727d5cf5-c96e-55d7-9a17-e19601ce5de0",
      "contentful_id": "2LOAn2Ib8IiC4CSwgUYOEY",
      "createdAt": "2018-09-16T03:54:31.270Z",
      "updatedAt": "2018-11-04T10:13:05.487Z",
      "parent": "Card",
      "children": [
        "23cdebc3-6994-58dc-aa58-16513593783e"
      ],
      "internal": {
        "type": "ContentfulCard",
        "contentDigest": "4f5b9314d9220fbd6e1a9b18ad973676",
        "owner": "gatsby-source-contentful"
      },
      "node_locale": "en-US"
    },
    "58ee4a10-573e-5a69-9454-60e3a75ac142": {
      "title": "CSS Grid reading list",
      "type": "List",
      "publishDate": "2018-01-09T00:00+10:00",
      "color": "White",
      "size": "Tall",
      "description___NODE": "0c2e2d87-a2ce-569d-b44f-18dce18657c8",
      "id": "58ee4a10-573e-5a69-9454-60e3a75ac142",
      "contentful_id": "2ippHgTxmYW0aSK0OqOIU0",
      "createdAt": "2018-09-16T07:23:55.159Z",
      "updatedAt": "2018-09-30T07:44:54.740Z",
      "parent": "Card",
      "children": [
        "0c2e2d87-a2ce-569d-b44f-18dce18657c8"
      ],
      "internal": {
        "type": "ContentfulCard",
        "contentDigest": "c5e2011004b30cbb1a7bd6c529b61d19",
        "owner": "gatsby-source-contentful"
      },
      "node_locale": "en-US"
    },
    "4133f900-846b-521e-97e4-31a3d9a537c7": {
      "title": "CSS custom properties reading list",
      "type": "List",
      "publishDate": "2018-01-09T00:00+10:00",
      "color": "White",
      "size": "Tall",
      "description___NODE": "0b9cc435-f213-5f02-a13b-ada210048d1e",
      "id": "4133f900-846b-521e-97e4-31a3d9a537c7",
      "contentful_id": "3bHEuMHZyoqoQqy2WIK6Aq",
      "createdAt": "2018-09-16T07:24:48.093Z",
      "updatedAt": "2018-09-30T07:44:45.224Z",
      "parent": "Card",
      "children": [
        "0b9cc435-f213-5f02-a13b-ada210048d1e"
      ],
      "internal": {
        "type": "ContentfulCard",
        "contentDigest": "7f449cff7d1383d2c86bef2fbb5724ae",
        "owner": "gatsby-source-contentful"
      },
      "node_locale": "en-US"
    },
    "eb77b525-ec5f-5112-b956-4192df698374": {
      "title": "My best of 2017 reading list",
      "type": "List",
      "publishDate": "2017-01-01T00:00+10:00",
      "color": "White",
      "size": "Tall",
      "description___NODE": "ae744db3-b0fd-5eb0-ab23-5a68e523c210",
      "id": "eb77b525-ec5f-5112-b956-4192df698374",
      "contentful_id": "55KzPsNZigKwgCGaqGKaKy",
      "createdAt": "2018-09-16T04:06:17.467Z",
      "updatedAt": "2018-09-30T07:44:21.048Z",
      "parent": "Card",
      "children": [
        "ae744db3-b0fd-5eb0-ab23-5a68e523c210"
      ],
      "internal": {
        "type": "ContentfulCard",
        "contentDigest": "6380c3381a513500bea310ca42e49e7a",
        "owner": "gatsby-source-contentful"
      },
      "node_locale": "en-US"
    },
    "1989ac99-13a2-5760-9563-97992a034160": {
      "title": ".Concat() 2018",
      "type": "Video",
      "url": "https://www.youtube.com/watch?v=Zg8f0fNekp4",
      "publishDate": "2018-04-10T00:00+10:00",
      "color": "White",
      "size": "Default",
      "image___NODE": "1f79f607-139c-5e7f-8154-90b4c5414a31",
      "description___NODE": "4b43b077-20e6-5f99-8f1b-9a3a310423e5",
      "id": "1989ac99-13a2-5760-9563-97992a034160",
      "contentful_id": "3QQkGvo3skIUOG6QYyeWq0",
      "createdAt": "2018-09-16T07:20:06.690Z",
      "updatedAt": "2018-09-30T06:51:44.632Z",
      "parent": "Card",
      "children": [
        "4b43b077-20e6-5f99-8f1b-9a3a310423e5"
      ],
      "internal": {
        "type": "ContentfulCard",
        "contentDigest": "6f176fa78271b1d8e1ae819f9b7a8590",
        "owner": "gatsby-source-contentful"
      },
      "node_locale": "en-US"
    },
    "36bda957-c643-520e-8688-04cec10ed9f4": {
      "title": "Custom properties collection",
      "type": "Pen",
      "url": "https://codepen.io/collection/naJLrB/",
      "publishDate": "2018-05-20T00:00+10:00",
      "color": "White",
      "size": "Default",
      "description___NODE": "3805ff28-5c9a-5d5d-8df7-74bc59fff16f",
      "id": "36bda957-c643-520e-8688-04cec10ed9f4",
      "contentful_id": "5FR1uQWpSEgO4W8I4AMAWW",
      "createdAt": "2018-09-16T04:06:16.409Z",
      "updatedAt": "2018-09-30T06:21:49.399Z",
      "parent": "Card",
      "children": [
        "3805ff28-5c9a-5d5d-8df7-74bc59fff16f"
      ],
      "internal": {
        "type": "ContentfulCard",
        "contentDigest": "034e480bf1a5b4074cdc290bccc25421",
        "owner": "gatsby-source-contentful"
      },
      "node_locale": "en-US"
    },
    "073295b1-606b-5d41-a7ab-f55e1bf86564": {
      "title": "Fluid typography collection",
      "type": "Pen",
      "url": "https://codepen.io/collection/nLbRMZ/",
      "publishDate": "2017-06-15T00:00+10:00",
      "color": "White",
      "size": "Default",
      "description___NODE": "cdec7352-a10c-5151-87e6-7ed1944951cd",
      "id": "073295b1-606b-5d41-a7ab-f55e1bf86564",
      "contentful_id": "5IfNcftiakgsySIKoaCcyq",
      "createdAt": "2018-09-16T04:06:17.338Z",
      "updatedAt": "2018-09-30T06:21:38.758Z",
      "parent": "Card",
      "children": [
        "cdec7352-a10c-5151-87e6-7ed1944951cd"
      ],
      "internal": {
        "type": "ContentfulCard",
        "contentDigest": "c56f66dc76f417c2509eb8a0e4b0d8ac",
        "owner": "gatsby-source-contentful"
      },
      "node_locale": "en-US"
    },
    "995d7aad-5031-54b4-b808-245353aa9e5c": {
      "id": "995d7aad-5031-54b4-b808-245353aa9e5c",
      "parent": "b2b3f90a-ce0d-5853-8b4b-ab7b5281f614",
      "children": [
        "b1f09196-55a0-5b6c-83e7-555ec6006b12"
      ],
      "description": "A talk I gave at Smashing Conference in Freiburg 2017 about the changing role of media queries and alternative techniques for responsive design.",
      "internal": {
        "type": "contentfulCardDescriptionTextNode",
        "mediaType": "text/markdown",
        "content": "A talk I gave at Smashing Conference in Freiburg 2017 about the changing role of media queries and alternative techniques for responsive design.",
        "contentDigest": "b34837110e76d2fb07993f3bc3a76dc3",
        "owner": "gatsby-source-contentful"
      }
    },
    "23cdebc3-6994-58dc-aa58-16513593783e": {
      "id": "23cdebc3-6994-58dc-aa58-16513593783e",
      "parent": "727d5cf5-c96e-55d7-9a17-e19601ce5de0",
      "children": [
        "7ff93b7c-fa19-5835-9f80-fba76a467f5f"
      ],
      "description": "A talk I gave at Smashing Conference in San Francisco 2018 about the changing role of media queries and alternative techniques for responsive design.",
      "internal": {
        "type": "contentfulCardDescriptionTextNode",
        "mediaType": "text/markdown",
        "content": "A talk I gave at Smashing Conference in San Francisco 2018 about the changing role of media queries and alternative techniques for responsive design.",
        "contentDigest": "2ce4bc5b1d35ab1e729f9c82dc2c52c1",
        "owner": "gatsby-source-contentful"
      }
    },
    "0c2e2d87-a2ce-569d-b44f-18dce18657c8": {
      "id": "0c2e2d87-a2ce-569d-b44f-18dce18657c8",
      "parent": "58ee4a10-573e-5a69-9454-60e3a75ac142",
      "children": [
        "bd35813f-364f-5b26-af20-22409663f27c"
      ],
      "description": "* [CSS Grid Gotchas And Stumbling\n  Blocks](https://www.smashingmagazine.com/2017/09/css-grid-gotchas-stumbling-blocks/)\n\n  * [The Difference Between Explicit and Implicit\n  Grids](https://css-tricks.com/difference-explicit-implicit-grids/)\n\n  * [Breaking the Grid](http://daverupert.com/2017/09/breaking-the-grid/)\n\n  * [Naming Things In CSS Grid\n  Layout](https://www.smashingmagazine.com/2017/10/naming-things-css-grid-layout/)\n\n  * [Introduction to CSS Grid\n  Layout](https://mozilladevelopers.github.io/playground/css-grid/)\n\n  * [Grid Garden](http://cssgridgarden.com/)\n\n  * [Auto-Sizing Columns in CSS Grid: auto-fill vs auto-fit](https://css-tricks.com/auto-sizing-columns-css-grid-auto-fill-vs-auto-fit/)\n\n  * [Debugging CSS Grid Layouts With Firefox Grid Inspector](https://www.smashingmagazine.com/2017/12/grid-inspector/)\n\n  * [Using CSS Grid: Supporting Browsers Without Grid](https://www.smashingmagazine.com/2017/11/css-grid-supporting-browsers-without-grid/)\n\n  * [Faux Grid Tracks](http://alistapart.com/article/faux-grid-tracks)",
      "internal": {
        "type": "contentfulCardDescriptionTextNode",
        "mediaType": "text/markdown",
        "content": "* [CSS Grid Gotchas And Stumbling\n  Blocks](https://www.smashingmagazine.com/2017/09/css-grid-gotchas-stumbling-blocks/)\n\n  * [The Difference Between Explicit and Implicit\n  Grids](https://css-tricks.com/difference-explicit-implicit-grids/)\n\n  * [Breaking the Grid](http://daverupert.com/2017/09/breaking-the-grid/)\n\n  * [Naming Things In CSS Grid\n  Layout](https://www.smashingmagazine.com/2017/10/naming-things-css-grid-layout/)\n\n  * [Introduction to CSS Grid\n  Layout](https://mozilladevelopers.github.io/playground/css-grid/)\n\n  * [Grid Garden](http://cssgridgarden.com/)\n\n  * [Auto-Sizing Columns in CSS Grid: auto-fill vs auto-fit](https://css-tricks.com/auto-sizing-columns-css-grid-auto-fill-vs-auto-fit/)\n\n  * [Debugging CSS Grid Layouts With Firefox Grid Inspector](https://www.smashingmagazine.com/2017/12/grid-inspector/)\n\n  * [Using CSS Grid: Supporting Browsers Without Grid](https://www.smashingmagazine.com/2017/11/css-grid-supporting-browsers-without-grid/)\n\n  * [Faux Grid Tracks](http://alistapart.com/article/faux-grid-tracks)",
        "contentDigest": "77f9a4e902c2e7976445a7068f12f51a",
        "owner": "gatsby-source-contentful"
      }
    },
    "0b9cc435-f213-5f02-a13b-ada210048d1e": {
      "id": "0b9cc435-f213-5f02-a13b-ada210048d1e",
      "parent": "4133f900-846b-521e-97e4-31a3d9a537c7",
      "children": [
        "6bb9ecd1-8610-5bf9-a2ad-1b83da6d4729"
      ],
      "description": "* [Using CSS variables correctly](https://madebymike.com.au/writing/using-css-variables/)\n* [Unlocking the Benefits of CSS Variables](https://jonathan-harrell.com/unlocking-benefits-css-variables/)\n* [The CSS attr() function got nothin’ on custom properties](https://css-tricks.com/css-attr-function-got-nothin-custom-properties/)\n* [It's Time To Start Using CSS Custom Properties](https://www.smashingmagazine.com/2017/04/start-using-css-custom-properties/)\n* [Locally Scoped CSS Variables: What, How, and Why](https://una.im/local-css-vars/)\n* [Bridging CSS and JS with Custom Properties](https://sgom.es/posts/2017-02-10-bridging-css-and-js-with-custom-properties/)\n* [Control CSS loading with custom properties](https://jakearchibald.com/2016/css-loading-with-custom-props/)\n* [CSS Custom Properties and Theming](https://css-tricks.com/css-custom-properties-theming/)",
      "internal": {
        "type": "contentfulCardDescriptionTextNode",
        "mediaType": "text/markdown",
        "content": "* [Using CSS variables correctly](https://madebymike.com.au/writing/using-css-variables/)\n* [Unlocking the Benefits of CSS Variables](https://jonathan-harrell.com/unlocking-benefits-css-variables/)\n* [The CSS attr() function got nothin’ on custom properties](https://css-tricks.com/css-attr-function-got-nothin-custom-properties/)\n* [It's Time To Start Using CSS Custom Properties](https://www.smashingmagazine.com/2017/04/start-using-css-custom-properties/)\n* [Locally Scoped CSS Variables: What, How, and Why](https://una.im/local-css-vars/)\n* [Bridging CSS and JS with Custom Properties](https://sgom.es/posts/2017-02-10-bridging-css-and-js-with-custom-properties/)\n* [Control CSS loading with custom properties](https://jakearchibald.com/2016/css-loading-with-custom-props/)\n* [CSS Custom Properties and Theming](https://css-tricks.com/css-custom-properties-theming/)",
        "contentDigest": "dbac4cb71ccd2acaa6a1d6185945c168",
        "owner": "gatsby-source-contentful"
      }
    },
    "ae744db3-b0fd-5eb0-ab23-5a68e523c210": {
      "id": "ae744db3-b0fd-5eb0-ab23-5a68e523c210",
      "parent": "eb77b525-ec5f-5112-b956-4192df698374",
      "children": [
        "6186dd06-7b1c-5395-b68b-77ec11f5fd04"
      ],
      "description": "\n- [An Abridged Cartoon Introduction To WebAssembly](https://www.smashingmagazine.com/2017/05/abridged-cartoon-introduction-webassembly/)\n- [World Wide Web, Not Wealthy Western Web](https://www.smashingmagazine.com/2017/03/world-wide-web-not-wealthy-western-web-part-1/)\n- [AMPersand](https://ethanmarcotte.com/wrote/ampersand/)\n- [Migrating from Jekyll+Github Pages to Hugo+Netlify](https://www.sarasoueidan.com/blog/jekyll-ghpages-to-hugo-netlify/)\n- [Designing Tables to be Read, Not Looked At](http://alistapart.com/article/web-typography-tables)\n- [Yes, That Web Project Should Be a PWA](http://alistapart.com/article/yes-that-web-project-should-be-a-pwa)\n- [The Critical Request](https://medium.com/@benschwarz/the-critical-request-90bb47da5769)\n- [Most Hearted Pens of 2017](https://codepen.io/2017/popular/pens/#)\n- [A Unified Styling Language](https://medium.com/seek-blog/a-unified-styling-language-d0c208de2660)\n- [Building a Visual Language](https://airbnb.design/building-a-visual-language/)",
      "internal": {
        "type": "contentfulCardDescriptionTextNode",
        "mediaType": "text/markdown",
        "content": "\n- [An Abridged Cartoon Introduction To WebAssembly](https://www.smashingmagazine.com/2017/05/abridged-cartoon-introduction-webassembly/)\n- [World Wide Web, Not Wealthy Western Web](https://www.smashingmagazine.com/2017/03/world-wide-web-not-wealthy-western-web-part-1/)\n- [AMPersand](https://ethanmarcotte.com/wrote/ampersand/)\n- [Migrating from Jekyll+Github Pages to Hugo+Netlify](https://www.sarasoueidan.com/blog/jekyll-ghpages-to-hugo-netlify/)\n- [Designing Tables to be Read, Not Looked At](http://alistapart.com/article/web-typography-tables)\n- [Yes, That Web Project Should Be a PWA](http://alistapart.com/article/yes-that-web-project-should-be-a-pwa)\n- [The Critical Request](https://medium.com/@benschwarz/the-critical-request-90bb47da5769)\n- [Most Hearted Pens of 2017](https://codepen.io/2017/popular/pens/#)\n- [A Unified Styling Language](https://medium.com/seek-blog/a-unified-styling-language-d0c208de2660)\n- [Building a Visual Language](https://airbnb.design/building-a-visual-language/)",
        "contentDigest": "f8f0df02a3909202fde97be01d49bc2c",
        "owner": "gatsby-source-contentful"
      }
    },
    "4b43b077-20e6-5f99-8f1b-9a3a310423e5": {
      "id": "4b43b077-20e6-5f99-8f1b-9a3a310423e5",
      "parent": "1989ac99-13a2-5760-9563-97992a034160",
      "children": [
        "96591036-1a23-5f3e-bdc3-0da7e77a7614"
      ],
      "description": "In March 2018 I spoke about CSS custom properties at .concat(), a fantastic community run conference in Austria.",
      "internal": {
        "type": "contentfulCardDescriptionTextNode",
        "mediaType": "text/markdown",
        "content": "In March 2018 I spoke about CSS custom properties at .concat(), a fantastic community run conference in Austria.",
        "contentDigest": "70dde966537b20ad8df6ba18cfcaeefa",
        "owner": "gatsby-source-contentful"
      }
    },
    "3805ff28-5c9a-5d5d-8df7-74bc59fff16f": {
      "id": "3805ff28-5c9a-5d5d-8df7-74bc59fff16f",
      "parent": "36bda957-c643-520e-8688-04cec10ed9f4",
      "children": [
        "66fd2765-0ca6-59b8-926a-a9afe47fb853"
      ],
      "description": "A collection of examples using custom properties for theming and responsive design.",
      "internal": {
        "type": "contentfulCardDescriptionTextNode",
        "mediaType": "text/markdown",
        "content": "A collection of examples using custom properties for theming and responsive design.",
        "contentDigest": "693c62b1f0abbbd18171b47cc359b2b3",
        "owner": "gatsby-source-contentful"
      }
    },
    "cdec7352-a10c-5151-87e6-7ed1944951cd": {
      "id": "cdec7352-a10c-5151-87e6-7ed1944951cd",
      "parent": "073295b1-606b-5d41-a7ab-f55e1bf86564",
      "children": [
        "95f25e61-ae2c-58c8-b40a-e4b78f53f834"
      ],
      "description": "A collection of examples for using fluid responsive typography on the web.",
      "internal": {
        "type": "contentfulCardDescriptionTextNode",
        "mediaType": "text/markdown",
        "content": "A collection of examples for using fluid responsive typography on the web.",
        "contentDigest": "df76a0c6b2c284d41e8f6a572a345df0",
        "owner": "gatsby-source-contentful"
      }
    },
    "586798d2-7c44-5c87-afb3-d2675a637873": {
      "id": "586798d2-7c44-5c87-afb3-d2675a637873",
      "parent": null,
      "children": [],
      "name": "External Article",
      "displayField": "title",
      "description": "",
      "internal": {
        "type": "ContentfulContentType",
        "contentDigest": "8f10189fe2fdfd8e9d04706403fafe7b",
        "owner": "gatsby-source-contentful"
      }
    },
    "66a03dd5-9374-5176-969d-15fdd35932b4": {
      "title": "A Strategy Guide To CSS Custom Properties",
      "url": "https://www.smashingmagazine.com/2018/05/css-custom-properties-strategy-guide/",
      "color": "Gold",
      "size": "Default",
      "publishDate": "2018-05-14T00:00+10:00",
      "description___NODE": "5d1e67dd-cd7a-529d-84e9-09e2444c2a49",
      "id": "66a03dd5-9374-5176-969d-15fdd35932b4",
      "contentful_id": "55XQPxSiIEEKaeiSYC686o",
      "createdAt": "2018-09-30T06:11:10.826Z",
      "updatedAt": "2018-11-04T10:18:19.272Z",
      "parent": "External Article",
      "children": [
        "5d1e67dd-cd7a-529d-84e9-09e2444c2a49"
      ],
      "internal": {
        "type": "ContentfulExternalArticle",
        "contentDigest": "4ae9c9aa213b794e7414cd90c98bed29",
        "owner": "gatsby-source-contentful"
      },
      "node_locale": "en-US"
    },
    "5d1e67dd-cd7a-529d-84e9-09e2444c2a49": {
      "id": "5d1e67dd-cd7a-529d-84e9-09e2444c2a49",
      "parent": "66a03dd5-9374-5176-969d-15fdd35932b4",
      "children": [
        "ad791795-fd76-5ebb-92aa-c9740498ebf9"
      ],
      "description": "Custom properties provide opportunities for new creative ideas, but also the potential to add complexity to CSS. To get the most out of them, we might need a strategy for how we write and structure CSS with custom properties.",
      "internal": {
        "type": "contentfulExternalArticleDescriptionTextNode",
        "mediaType": "text/markdown",
        "content": "Custom properties provide opportunities for new creative ideas, but also the potential to add complexity to CSS. To get the most out of them, we might need a strategy for how we write and structure CSS with custom properties.",
        "contentDigest": "6ffb310d50b06bc40c5a7ad3b38449b8",
        "owner": "gatsby-source-contentful"
      }
    },
    "b961bb7b-f3b8-5f5b-82b1-39e57b223e82": {
      "contentful_id": "5d9fvupAkguQaCqAIkAIeY",
      "id": "b961bb7b-f3b8-5f5b-82b1-39e57b223e82",
      "parent": null,
      "children": [],
      "file": {
        "url": "//images.ctfassets.net/2cb7djx9f8kv/5d9fvupAkguQaCqAIkAIeY/fbc8b88a1eca000dba724401728e2dcb/custom-props.png",
        "details": {
          "size": 40382,
          "image": {
            "width": 1086,
            "height": 327
          }
        },
        "fileName": "custom-props.png",
        "contentType": "image/png"
      },
      "title": "custom-props",
      "description": "",
      "node_locale": "en-US",
      "internal": {
        "type": "ContentfulAsset",
        "contentDigest": "192d2adb1d9586c4aa6cd3c7967b6112",
        "owner": "gatsby-source-contentful"
      }
    },
    "edf8346c-99ed-5ecc-aff9-228fca50a022": {
      "contentful_id": "6ookaPEOSkUaEYqqCc4CAu",
      "id": "edf8346c-99ed-5ecc-aff9-228fca50a022",
      "parent": null,
      "children": [],
      "file": {
        "url": "//images.ctfassets.net/2cb7djx9f8kv/6ookaPEOSkUaEYqqCc4CAu/b8e7e3309c4a6dd979f67a2d4c1fb7f8/vitaly-and-me.jpg",
        "details": {
          "size": 130228,
          "image": {
            "width": 992,
            "height": 558
          }
        },
        "fileName": "vitaly-and-me.jpg",
        "contentType": "image/jpeg"
      },
      "title": "Vitaly and mike",
      "description": "Vitaly and mike",
      "node_locale": "en-US",
      "internal": {
        "type": "ContentfulAsset",
        "contentDigest": "d7f6332dcc98714fe784bb366a5ad3d4",
        "owner": "gatsby-source-contentful"
      }
    },
    "795b175f-c3b9-540c-a5bc-40938c774e17": {
      "contentful_id": "4QWrnDKzZK6eugwYS4ScSM",
      "id": "795b175f-c3b9-540c-a5bc-40938c774e17",
      "parent": null,
      "children": [],
      "file": {
        "url": "//images.ctfassets.net/2cb7djx9f8kv/4QWrnDKzZK6eugwYS4ScSM/2d97538e8b969ebdbf0362ee9874a1c5/mike.jpg",
        "details": {
          "size": 19853,
          "image": {
            "width": 300,
            "height": 300
          }
        },
        "fileName": "mike.jpg",
        "contentType": "image/jpeg"
      },
      "title": "mike",
      "description": "",
      "node_locale": "en-US",
      "internal": {
        "type": "ContentfulAsset",
        "contentDigest": "94ab80cb451ce0b4cc7d2c31313af67e",
        "owner": "gatsby-source-contentful"
      }
    },
    "1f79f607-139c-5e7f-8154-90b4c5414a31": {
      "contentful_id": "3PQzXZjPiEe6yC0CKUyAs4",
      "id": "1f79f607-139c-5e7f-8154-90b4c5414a31",
      "parent": null,
      "children": [],
      "file": {
        "url": "//images.ctfassets.net/2cb7djx9f8kv/3PQzXZjPiEe6yC0CKUyAs4/22e1fea3bca75a6dcc41a87817cd273a/concat.png",
        "details": {
          "size": 409483,
          "image": {
            "width": 909,
            "height": 612
          }
        },
        "fileName": "concat.png",
        "contentType": "image/png"
      },
      "title": ".Concat()",
      "description": "",
      "node_locale": "en-US",
      "internal": {
        "type": "ContentfulAsset",
        "contentDigest": "2111d70314712ae6959c029e3459e58e",
        "owner": "gatsby-source-contentful"
      }
    },
    "1dd64149-0c42-55c6-b6aa-c8b9f97e3d1a": {
      "contentful_id": "3pM3hv774QUIW4iqaSEYUO",
      "id": "1dd64149-0c42-55c6-b6aa-c8b9f97e3d1a",
      "parent": null,
      "children": [],
      "file": {
        "url": "//images.ctfassets.net/2cb7djx9f8kv/3pM3hv774QUIW4iqaSEYUO/915371b895f165975574fe0ce43375a1/smashing-sf.png",
        "details": {
          "size": 486461,
          "image": {
            "width": 962,
            "height": 538
          }
        },
        "fileName": "smashing-sf.png",
        "contentType": "image/png"
      },
      "title": "Smashing Conf San Fransisco",
      "description": "",
      "node_locale": "en-US",
      "internal": {
        "type": "ContentfulAsset",
        "contentDigest": "f70ebc5508be146d80fb592317fb0b4c",
        "owner": "gatsby-source-contentful"
      }
    },
    "e2d7dfd7-6e20-54c4-bce6-cc99d676e251": {
      "contentful_id": "2xnKc7EpficyegWm6EWO0S",
      "id": "e2d7dfd7-6e20-54c4-bce6-cc99d676e251",
      "parent": null,
      "children": [],
      "file": {
        "url": "//images.ctfassets.net/2cb7djx9f8kv/2xnKc7EpficyegWm6EWO0S/75d7a412d33836404784c6b53822559f/p.png",
        "details": {
          "size": 92536,
          "image": {
            "width": 820,
            "height": 310
          }
        },
        "fileName": "p.png",
        "contentType": "image/png"
      },
      "title": "Png",
      "description": "jkjljjl",
      "node_locale": "en-US",
      "internal": {
        "type": "ContentfulAsset",
        "contentDigest": "998184a403ca614c8a9f77cccab28536",
        "owner": "gatsby-source-contentful"
      }
    },
    "19c28b57-e9de-5728-9904-e60a0b29c5b1": {
      "contentful_id": "1TZOQ2sjk4eqWQEqSy8Uam",
      "id": "19c28b57-e9de-5728-9904-e60a0b29c5b1",
      "parent": null,
      "children": [],
      "file": {
        "url": "//assets.ctfassets.net/2cb7djx9f8kv/1TZOQ2sjk4eqWQEqSy8Uam/cf175f15bbe0b2622b9f9655ee34d42b/fluid-type-examples.css",
        "details": {
          "size": 1399
        },
        "fileName": "fluid-type-examples.css",
        "contentType": "text/css"
      },
      "title": "fluid-type-examples-css",
      "description": "",
      "node_locale": "en-US",
      "internal": {
        "type": "ContentfulAsset",
        "contentDigest": "e2751fb4ae62ff3b2480d87f3f5da923",
        "owner": "gatsby-source-contentful"
      }
    },
    "b5e6787d-7e68-58d3-ab18-432325ecd715": {
      "contentful_id": "1AFhK9MCA8eeqqcAOMKqOG",
      "id": "b5e6787d-7e68-58d3-ab18-432325ecd715",
      "parent": null,
      "children": [],
      "file": {
        "url": "//assets.ctfassets.net/2cb7djx9f8kv/1AFhK9MCA8eeqqcAOMKqOG/4fb7ad1a918067ac3490d1dbe77fc278/pattern-icons.css",
        "details": {
          "size": 2321
        },
        "fileName": "pattern-icons.css",
        "contentType": "text/css"
      },
      "title": "pattern-icons-css",
      "description": "",
      "node_locale": "en-US",
      "internal": {
        "type": "ContentfulAsset",
        "contentDigest": "3fcb1849f08ce550bc8e84f429115fe8",
        "owner": "gatsby-source-contentful"
      }
    },
    "ecbb9040-429a-5f61-a310-e1baf415c6f0": {
      "contentful_id": "3ikh4D7jlYQ4imGOouCuyg",
      "id": "ecbb9040-429a-5f61-a310-e1baf415c6f0",
      "parent": null,
      "children": [],
      "file": {
        "url": "//assets.ctfassets.net/2cb7djx9f8kv/3ikh4D7jlYQ4imGOouCuyg/1a4aad84eacea3c8d77a3cfe5da88bb9/responsive-type.css",
        "details": {
          "size": 905
        },
        "fileName": "responsive-type.css",
        "contentType": "text/css"
      },
      "title": "responsive-type-css",
      "description": "",
      "node_locale": "en-US",
      "internal": {
        "type": "ContentfulAsset",
        "contentDigest": "bf1a4e0bcd65273bef1d61cde40ae12d",
        "owner": "gatsby-source-contentful"
      }
    },
    "472177d7-84a3-5d4c-ac73-82053877b36b": {
      "contentful_id": "5Y7bpUkRawQG0IqYGeU8ia",
      "id": "472177d7-84a3-5d4c-ac73-82053877b36b",
      "parent": null,
      "children": [],
      "file": {
        "url": "//assets.ctfassets.net/2cb7djx9f8kv/5Y7bpUkRawQG0IqYGeU8ia/8f978fcc676048570bd7366f612f1afe/resize-image.js",
        "details": {
          "size": 1786
        },
        "fileName": "resize-image.js",
        "contentType": "application/x-javascript"
      },
      "title": "resize-image-js",
      "description": "",
      "node_locale": "en-US",
      "internal": {
        "type": "ContentfulAsset",
        "contentDigest": "33334e97b3dd148c2de3e8d94a763750",
        "owner": "gatsby-source-contentful"
      }
    },
    "c8a06606-0027-516e-9391-3ca5a86d1b02": {
      "contentful_id": "6Yp4y5k968EY2O6iuQK0uQ",
      "id": "c8a06606-0027-516e-9391-3ca5a86d1b02",
      "parent": null,
      "children": [],
      "file": {
        "url": "//assets.ctfassets.net/2cb7djx9f8kv/6Yp4y5k968EY2O6iuQK0uQ/3ee074063bf4574b80453e04352ebca5/resize-images.css",
        "details": {
          "size": 663
        },
        "fileName": "resize-images.css",
        "contentType": "text/css"
      },
      "title": "resize-images-css",
      "description": "",
      "node_locale": "en-US",
      "internal": {
        "type": "ContentfulAsset",
        "contentDigest": "d85b5edfef5a0fc084df73f0ef4ff1d4",
        "owner": "gatsby-source-contentful"
      }
    },
    "54fc6d41-fc84-586f-b70f-a3455882d736": {
      "contentful_id": "15cHn9ow2gSQ2o6uQQ2Aw2",
      "id": "54fc6d41-fc84-586f-b70f-a3455882d736",
      "parent": null,
      "children": [],
      "file": {
        "url": "//assets.ctfassets.net/2cb7djx9f8kv/15cHn9ow2gSQ2o6uQQ2Aw2/0dd7ffca19b920319e0b1205ab357afa/understanding-flex.css",
        "details": {
          "size": 839
        },
        "fileName": "understanding-flex.css",
        "contentType": "text/css"
      },
      "title": "understanding-flex",
      "description": "",
      "node_locale": "en-US",
      "internal": {
        "type": "ContentfulAsset",
        "contentDigest": "bb72e86c1dd34763b77b3e7fb90476cf",
        "owner": "gatsby-source-contentful"
      }
    },
    "65f897cf-dad1-5603-93a0-22a39e2c7a0f": {
      "contentful_id": "6Ej19dZzmo8EqicqIQAIii",
      "id": "65f897cf-dad1-5603-93a0-22a39e2c7a0f",
      "parent": null,
      "children": [],
      "file": {
        "url": "//assets.ctfassets.net/2cb7djx9f8kv/6Ej19dZzmo8EqicqIQAIii/359cfbdc927b9bf9187a65b89db926c7/zero-element.css",
        "details": {
          "size": 12396
        },
        "fileName": "zero-element.css",
        "contentType": "text/css"
      },
      "title": "zero-element",
      "description": "",
      "node_locale": "en-US",
      "internal": {
        "type": "ContentfulAsset",
        "contentDigest": "874612befde1224f39c998db42ce98e6",
        "owner": "gatsby-source-contentful"
      }
    },
    "4df63546-f3b6-5a5c-829f-715e5b304a9c": {
      "contentful_id": "5WvyZ1klLqUyAs80iGC8Q6",
      "id": "4df63546-f3b6-5a5c-829f-715e5b304a9c",
      "parent": null,
      "children": [],
      "file": {
        "url": "//images.ctfassets.net/2cb7djx9f8kv/5WvyZ1klLqUyAs80iGC8Q6/465b014ec59746d90ad0db5d50b0dc9d/image.jpg",
        "details": {
          "size": 146572,
          "image": {
            "width": 640,
            "height": 427
          }
        },
        "fileName": "The_Making_of_an_Image",
        "contentType": "image/jpeg"
      },
      "title": "The Making of an Image",
      "description": "",
      "node_locale": "en-US",
      "internal": {
        "type": "ContentfulAsset",
        "contentDigest": "74ca12aed4693bdf112fdac395576038",
        "owner": "gatsby-source-contentful"
      }
    },
    "afbd28fc-5821-5c13-91d4-259517b46bd3": {
      "contentful_id": "7xVFm3bD7q4uuKqAm8IAcc",
      "id": "afbd28fc-5821-5c13-91d4-259517b46bd3",
      "parent": null,
      "children": [],
      "file": {
        "url": "//images.ctfassets.net/2cb7djx9f8kv/7xVFm3bD7q4uuKqAm8IAcc/b4a4f8993562f8f12b01a1b2b0699f50/small_flower.jpg",
        "details": {
          "size": 108315,
          "image": {
            "width": 500,
            "height": 333
          }
        },
        "fileName": "Small_mountain_flower",
        "contentType": "image/jpeg"
      },
      "title": "Image",
      "description": "test image",
      "node_locale": "en-US",
      "internal": {
        "type": "ContentfulAsset",
        "contentDigest": "0b9e3ecabc5f8f257db6ba032c53bd1d",
        "owner": "gatsby-source-contentful"
      }
    },
    "45b493a8-9572-547c-a761-6c8dbf087248": {
      "contentful_id": "6Od9v3wzLOysiMum0Wkmme",
      "id": "45b493a8-9572-547c-a761-6c8dbf087248",
      "parent": null,
      "children": [],
      "file": {
        "url": "//images.ctfassets.net/2cb7djx9f8kv/6Od9v3wzLOysiMum0Wkmme/1f2dca1a3e19a688d2d777e92cacc2a3/cameron-kirby-88711.jpg",
        "details": {
          "size": 7316629,
          "image": {
            "width": 3000,
            "height": 2000
          }
        },
        "fileName": "cameron-kirby-88711.jpg",
        "contentType": "image/jpeg"
      },
      "title": "Woman with black hat",
      "description": "Woman wearing a black hat",
      "node_locale": "en-US",
      "internal": {
        "type": "ContentfulAsset",
        "contentDigest": "ab8d243136009b5021476ede6f5c7b3d",
        "owner": "gatsby-source-contentful"
      }
    },
    "6e5763ae-297d-55a4-85b5-7f7988b40f00": {
      "contentful_id": "4NzwDSDlGECGIiokKomsyI",
      "id": "6e5763ae-297d-55a4-85b5-7f7988b40f00",
      "parent": null,
      "children": [],
      "file": {
        "url": "//images.ctfassets.net/2cb7djx9f8kv/4NzwDSDlGECGIiokKomsyI/3087996f079695b750a9b17cd6e4ba7f/denys-nevozhai-100695.jpg",
        "details": {
          "size": 15736986,
          "image": {
            "width": 3992,
            "height": 2992
          }
        },
        "fileName": "denys-nevozhai-100695.jpg",
        "contentType": "image/jpeg"
      },
      "title": "City",
      "description": "City pictured from the sky",
      "node_locale": "en-US",
      "internal": {
        "type": "ContentfulAsset",
        "contentDigest": "4d66ffe478ff0084887f903293844bbe",
        "owner": "gatsby-source-contentful"
      }
    },
    "1859903a-c0c2-5584-b0ab-378bd2a65e53": {
      "contentful_id": "4shwYI3POEGkw0Eg6kcyaQ",
      "id": "1859903a-c0c2-5584-b0ab-378bd2a65e53",
      "parent": null,
      "children": [],
      "file": {
        "url": "//images.ctfassets.net/2cb7djx9f8kv/4shwYI3POEGkw0Eg6kcyaQ/e8e31e193e5d0ae24619e9b2d912fd9c/felix-russell-saw-112140.jpg",
        "details": {
          "size": 4539181,
          "image": {
            "width": 2500,
            "height": 1667
          }
        },
        "fileName": "felix-russell-saw-112140.jpg",
        "contentType": "image/jpeg"
      },
      "title": "Man in the fields",
      "description": "Tattooed man walking in a field",
      "node_locale": "en-US",
      "internal": {
        "type": "ContentfulAsset",
        "contentDigest": "126608a4c68748ad7121ce063cf0ab9d",
        "owner": "gatsby-source-contentful"
      }
    },
    "a2315d60-cf08-5788-91a7-ad6504672de3": {
      "contentful_id": "7orLdboQQowIUs22KAW4U",
      "id": "a2315d60-cf08-5788-91a7-ad6504672de3",
      "parent": null,
      "children": [],
      "file": {
        "url": "//images.ctfassets.net/2cb7djx9f8kv/7orLdboQQowIUs22KAW4U/6936e7d6017d588081ab972bd073c764/matt-palmer-254999.jpg",
        "details": {
          "size": 2293094,
          "image": {
            "width": 3000,
            "height": 2000
          }
        },
        "fileName": "matt-palmer-254999.jpg",
        "contentType": "image/jpeg"
      },
      "title": "Sparkler",
      "description": "John with Sparkler",
      "node_locale": "en-US",
      "internal": {
        "type": "ContentfulAsset",
        "contentDigest": "9103c08c9328e18b66f6ddd7f51289b1",
        "owner": "gatsby-source-contentful"
      }
    },
    "42d2ab12-f858-558a-b3e8-01809bbc9c87": {
      "id": "42d2ab12-f858-558a-b3e8-01809bbc9c87",
      "children": [],
      "parent": "199a7631-d10c-580d-a568-d1d310305a9f",
      "internal": {
        "content": "React has limitations when it comes to working with persistent stateful media objects. In this article I discuss techniques for working with media elements like canvas, video and third-party libraries in React.",
        "type": "MarkdownRemark",
        "contentDigest": "dd8d1f508014895f151d7ae459e35350",
        "owner": "gatsby-transformer-remark"
      },
      "frontmatter": {
        "title": ""
      },
      "excerpt": "",
      "rawMarkdownBody": "React has limitations when it comes to working with persistent stateful media objects. In this article I discuss techniques for working with media elements like canvas, video and third-party libraries in React."
    },
    "8541e5c9-619a-58e2-bb48-a09126320af5": {
      "id": "8541e5c9-619a-58e2-bb48-a09126320af5",
      "children": [],
      "parent": "25f0dc3b-b0ff-550d-851c-869c10a098ff",
      "internal": {
        "content": "One of the biggest advantages of React is that we need to worry less about managing updates to the UI. The presentation is defined once within the `render()` method of a component and it will update automatically when data changes.\n\nThe `render()` method returns elements via `JSX` that instruct React to update the DOM. This is the strength of React because it can manage updates to the DOM more efficiently than I would, and `JSX` provides a declarative means of describing a component structure, much like HTML.\n\nThere is however, one key assumption in all of this and that is that updating data should result in updates to the DOM. This assumption is central to the React component lifecycle, and in-fact the render method is the only required method of a React component. That's a pretty core assumption, and as a result accessing the DOM node of a React rendered element, is not always straight-forward.\n\nTypically DOM manipulation outside the render method is discouraged, but there are some elements in HTML that are not quite as descriptive when it comes to updates. Examples of these include elements like `<video>` and `<canvas>`. Updating these usually requires calling a native method to clear the canvas, or to pause video playback. To interact with these native methods we need to get a reference to the element in the DOM and for this React has refs. \n\n## Accessing the DOM in React\n\nRefs, as the name implies, provide us with a reference to an element in the DOM. We can access this only after React has rendered the element. \n\nMethods for creating and retrieving refs have changed between React versions with backward compatibility, so you might see other techniques used in the wild. Here I am using the `createRef()` method introduced in React 16.3. \n\n```javascript\nclass CanvasComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.myCanvas = React.createRef();\n  }\n  \n  componentDidMount() {\n    const ctx = this.myCanvas.current.getContext('2d');\n    ctx.fillRect(0, 0, 100, 100);\n  }\n  \n  render() {\n    return <canvas ref={this.myCanvas} width={100} height={100} />\n  }\n}\n```\nIn this example I create a ref named `myCanvas` in the `constructor()`, attact it to the component in the `render()` method, and then access it after the component has mounted, where I can finally draw to the HTML canvas.\n\nThis technique works well enough if I only need draw once, but for more complex examples, we're going to run into problems. React is calling the render method constantly, but because it is clever, it's recycling the DOM elements rather than re-building it each time. This is great because we want the canvas to be persistent. However changes to the surrounding HTML, and particularly higher up the document tree, can result in re-building parts of the DOM. If you'd like to know more about why and when React re-builds the DOM, I'd suggest reading the [React documentation on reconciliation](https://reactjs.org/docs/reconciliation.html).\n\n## Working with stateful media objects\n\nTake a look at this example of a random \"Rainbow Walker\": \n\n<div class=\"full-width\">\n<p data-height=\"350\" data-theme-id=\"light\" data-slug-hash=\"c795e7e7eb0a542a64739d7a1cb485a0\" data-default-tab=\"result\" data-user=\"MadeByMike\" data-pen-title=\"Rainbow walker\" data-preview=\"true\" class=\"codepen\">See the Pen <a href=\"https://codepen.io/MadeByMike/pen/c795e7e7eb0a542a64739d7a1cb485a0/\">Rainbow walker</a> by Mike (<a href=\"https://codepen.io/MadeByMike\">@MadeByMike</a>) on <a href=\"https://codepen.io\">CodePen</a>.</p>\n<script async src=\"https://static.codepen.io/assets/embed/ei.js\"></script>\n</div>\n\nIt looks great, but \"information\" is stored directly on the canvas. Each `tick` of the animation draws a new part of the line and the previous position and color information is lost. The cumulative result of this drawing procedure is stored on the canvas for as long as the canvas exists, but if React creates a new element, this information is lost forever. This is one of the challenges of working with persistent and stateful media objects in React.\n\nTake a look at this updated example and click the wrap\\unwrap button to see what happens: \n\n<div class=\"full-width\">\n<p data-height=\"400\" data-theme-id=\"light\" data-slug-hash=\"e8ec1be6a6c4cd28212473074e6b4607\" data-default-tab=\"result\" data-user=\"MadeByMike\" data-pen-title=\"Rainbow walker wrap\\unwrap\" data-preview=\"true\" class=\"codepen\">See the Pen <a href=\"https://codepen.io/MadeByMike/pen/e8ec1be6a6c4cd28212473074e6b4607/\">Rainbow walker wrap\\unwrap</a> by Mike (<a href=\"https://codepen.io/MadeByMike\">@MadeByMike</a>) on <a href=\"https://codepen.io\">CodePen</a>.</p>\n<script async src=\"https://static.codepen.io/assets/embed/ei.js\"></script>\n</div>\n\nAll the button does is change the `render()` method to wrap the `<canvas>` in an extra `<div>`. This is something that can happen frequently with larger applications and it's not always easy to avoid. Wrapping an element is one of many things that can cause parts of the DOM to be re-drawn.\n\nIt's worth noting that the current position of the walker is not reset when clicking the wrap\\unwrap button. That's because the component itself is not unmounted when its output changes. However, it's not always easy to avoid unmounting components either. Logically we try to split components into smaller chunks and once again the sorrounding layout can change. Take a look at this example of a canvas clock: \n\n<div class=\"full-width\">\n<p data-height=\"250\" data-theme-id=\"light\" data-slug-hash=\"5c3293dade22de7d823741c8241950b3\" data-default-tab=\"js,result\" data-user=\"MadeByMike\" data-pen-title=\"Clock\" data-preview=\"true\" class=\"codepen\">See the Pen <a href=\"https://codepen.io/MadeByMike/pen/5c3293dade22de7d823741c8241950b3/\">Clock</a> by Mike (<a href=\"https://codepen.io/MadeByMike\">@MadeByMike</a>) on <a href=\"https://codepen.io\">CodePen</a>.</p>\n<script async src=\"https://static.codepen.io/assets/embed/ei.js\"></script>\n</div>\n\nHere I've split the logic for the clock and the layout between two different components. When the layout surrounding the clock changes the component is re-mounted. In addition to a new `canvas`, data in state is lost and the counter is reset to 0. You will also see a noticeable flash as the canvas is re-initialised. For elements like `canvas` this is much more expensive than re-drawing a typical DOM node. This is especially true if we need to re-initialise a 3rd-party library as well.\n\n## Imperative & declarative APIs\n\nIt's not just `canvas`, these issues exist for `video` and other media, as well as 3rd-party libraries for things like data visualisation, mapping and charts. The problem is that libraries like D3.js, three.js, mapbox and whatever the hottest chart library is right now, have imperative APIs. This typically means that there is a single object that represents an entity on the page and we invoke actions directly on it. For example with Mapbox after creating a new map, we call methods like `flyTo()` to trigger actions. E.g.\n\n```\nvar map = new mapboxgl.Map(mapboxOptions);\nmap.flyTo({center: [0, 0], zoom: 9});\n```\n\nThis approach is very different from HTML or JSX that have a more declarative API. With a declarative API it's more descriptive. We update the description of the map with new properties and the library resolves these changes into a set of actions required to update the map.\n\nAnimations or any action that occurs over time can be difficult to describe using a declarative API. This is because declarative components don't typically have a persistent state. Think about how animations work in CSS. New animations can be triggered by the addition of a classname but these properties will reset the existing animation, causing it to start from its initial state. \n\nDespite this, I see numerous attempts to \"solve\" the challenges of working with stateful media in React by creating libraries convert imperative APIs into a set of declarative React components. They do this by wrapping another layer of abstraction around 3rd-party tools and native APIs. \n\nThe [react-map-gl](https://github.com/uber/react-map-gl) library has more than 4000 stars. This recreation of the HTML5 canvas API [react-konva](https://github.com/konvajs/react-konva) has more than 2000. The [react-d3-components](https://github.com/codesuki/react-d3-components) library has over 1400 and there are many more like these. \n\nTo me these are the jQuery plugins of this era. They all provide limited on-rails solutions that serves to comfort developers with a React mindset. Perhaps the only advantage is that the better-designed examples of these allow developers to continue splitting logic into smaller components. \n\n## Escaping React\n\nOften a `<canvas>`, `<video>`, or chart container will be the lowest level item in the DOM that React is aware of. Therefore the React component that mounts these can become bloated with all the custom methods, events and other logic that controls the embedded object.\n\nI don't think the solution is to try and envelope everything into React. Although declarative APIs can be amazingly succinct and performant they are not the solution to everything. I also think that trying to map an existing imperative API to a set of React components going to result in something less than the original.   \n\nMy solution is to get the heck out of React when I need to and find a way to make these things work together. Let's take a look at an example of an HTML `<video>` element and a solution that avoids:\n\n- clearing stateful data (such as the video source and play state) when React re-renders,\n- methods and actions restricted to a single component\n\n__Note:__ In this example, I'm using es6 imports to demonstrate how elements, functions and components can be shared between files. \n\nIn one file I create a component with a ref similar to the first example.\n\n```javascript\nimport React from \"react\";\n\nconst videoElement = document.createElement(\"video\");\n\nclass Video extends React.Component {\n  constructor(props) {\n    super(props);\n    this.myVideoContainer = React.createRef();\n  }\n\n  componentDidMount() {\n    this.myVideoContainer.current.appendChild(videoElement);\n  }\n\n  render() {\n    return <div ref={this.myVideoContainer} />;\n  }\n}\n\nexport { videoElement, Video };\n\n```\nInstead of attaching it to a canvas or video element, the ref is attached to an empty `<div>` container. The video element is a detached DOM node that exists outside the component. I append this to the container once the React component is mounted. \n\nBecause the video element exists outside a React component, even if React re-renders the container or unmounts the component, the video will be re-mounted without losing its source, play state, or any other data.\n\nWe're exporting the `videoElement` so we can access it in different components. I can now create a load button that applies a video source to the element:\n\n```javascript\nimport React from \"react\";\nimport { videoElement } from \"./video\";\n\nclass LoadButton extends React.Component {\n  render() {\n    return (\n      <button\n        onClick={function() {\n          //  Thank you MDN for the video source! \n          videoElement.src =\n            \"https://interactive-examples.mdn.mozilla.net/media/examples/flower.mp4\";\n        }}\n      >\n        Load\n      </button>\n    );\n  }\n}\n\nexport { LoadButton };\n```\n\nAs well as a play button: \n\n```javascript\nimport React from \"react\";\nimport { videoElement } from \"./video\";\n\nclass PlayButton extends React.Component {\n  render() {\n    return (\n      <button\n        onClick={function() {\n          videoElement.play();\n        }}\n      >\n        Play\n      </button>\n    );\n  }\n}\n\nexport { PlayButton };\n\n```\n\nI can even create custom functions that extend the native `<video>` element. Here I've added a method to inverts colours by toggling a classname:\n\n```javascript\nimport React from \"react\";\nimport { videoElement } from \"./video\";\n\nfunction invertVideo() {\n  videoElement.classList.toggle(\"invert\");\n}\n\nclass InvertButton extends React.Component {\n  render() {\n    return (\n      <button\n        onClick={function() {\n          invertVideo();\n        }}\n      >\n        Invert\n      </button>\n    );\n  }\n}\n\nexport { InvertButton };\n```\n\nIn a real application, functions like `invertVideo()` might not be tied to a single UI element such as in this example. A function that clears data on a map, for example, might be triggered by multiple UI actions. In cases like this, it makes more sense to import functions rather than co-locating them with the UI components.\n\nEither way, the ability to split this code and organise it in different ways is a huge win compared with a massive React component and some of the techniques used to pass imperative actions like that of a play button between independent components.\n\nYou can check out a full demo here:\n\n[![Edit react-html-video](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/n9zp6yry7p)\n\n__Note__: By importing the `videoElement` we're creating an implicit link between components. \n\nIdeally, React components are dumb and fully reusable. I wanted to show the simplest example first, but also practically speaking, I think this technique is sufficient for many applications. Most importantly it's not difficult to refactor if you need greater flexibility or multiple instances of components later. \n\n## Multiple instances\n\nThe examples above deal with a single instance of a media element. If we needed a 2nd video, we'd have to create a 2nd component along with a 2nd play button, load button etc...\n\nDespite its limitations, if you can get away with it, I think a single entity is a lot easier to work with, but there are problems when we have multiple instances. \n\nIf you pass the `videoElement` as a prop a lot of the problems can be solved. However, if we are going to re-structure components to be more reusable, rather than just passing the DOM element, it might help to organise some of the functions and exports into methods and properties within a class. \n\nThere are several different patterns you could use. What's best depends on your particular project. This is an example I created for the canvas clock: \n\n```javascript\nclass Counter {\n  constructor() {\n    this.element = document.createElement(\"canvas\");\n    this.ctx = this.element.getContext(\"2d\");\n\n    this.element.width = 100;\n    this.element.height = 100;\n    \n    this.ctx.font = \"40px Georgia, serif\";\n    this.ctx.textAlign = \"center\";\n    this.ctx.textBaseline = \"middle\";\n    \n    this.timer = false;\n    this.counter = 0;\n    \n    this.step = this.step.bind(this);\n  }\n\n  start() {\n    this.timer = setInterval(this.step, 100);\n  }\n\n  stop() {\n    clearInterval(this.timer);\n  }\n\n  step() {\n    this.counter = this.counter < 99 ? this.counter + 1 : 0;\n    this.ctx.fillStyle = \"black\";\n    this.ctx.fillRect(0, 0, 100, 100);\n    this.ctx.fillStyle = \"white\";\n    this.ctx.fillText(this.counter, 50, 50);\n  }\n}\n```\n\nWith this generic class, we create an instance of `Counter` for each clock, I then pass the instance as a parameter to the `<Clock/>` and `<StopButton/>` components.\n\n```javascript\nimport { Clock } from \"./clock\";\nimport { StopButton } from \"./stop-button\";\nimport { Counter } from './counter'\n\nconst clockA = new Counter();\nconst clockB = new Counter();\n\n<Clock counter={clockA} /> \n<StopButton counter={clockA} />\n<Clock counter={clockA} /> \n<StopButton counter={clockA} />\n```\n\nIn the `<Clock/>` and `<StopButton/>` components we can retrieve the DOM element and access methods via the `counter` prop:\n\n```javascript\nclass Clock extends React.Component {\n  constructor(props) {\n    super(props);\n    this.myClockContainer = React.createRef();\n  }\n\n  componentDidMount() {\n    this.myClockContainer.current.appendChild(this.props.counter.element);\n    this.props.counter.start();\n  }\n\n  render() {\n    return <div ref={this.myClockContainer} />;\n  }\n}\n```\n\nOnce again you can see a full example here: \n\n[![Edit react-many-clocks](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/y06pjpo0lx)\n\n## Sharing data\n\nThe final challenge we have is sharing data between React and the media elements. Many of these have internal state and retrieving this is often as easy as calling a method. For example to get the current play time of a video we can import the element and query the `currentTime` property: \n\n```javascript\nimport { videoElement } from './video' \nconst time = videoElement.currentTime\n```\n\nThis is adequate in many cases, but React is not going to re-render when the `currentTime` changes. We need to communicate relevant internal state changes to React. The video element has a `timeupdate` event. We can import the element and listen for `timeupdate`, then set state within React.\n\n```javascript\nimport React from \"react\";\nimport { videoElement } from \"./video\";\n\nclass VideoTimer extends React.Component {\n\n  constructor(props) {\n    super(props)\n    this.state = { time: 0 }\n    this.setTime = this.setTime.bind(this)\n  }\n\n  setTime() {\n    this.setState({ time: videoElement.currentTime })\n  }\n  \n  componentDidMount() {\n    videoElement.addEventListener(\"timeupdate\", this.setTime);\n  }\n  \n  componentWillUnmount() {\n    videoElement.removeEventListener(\"timeupdate\", this.setTime);\n  }\n\n  render() {\n    return (\n      <p>\n        {this.state.time}\n      </p>\n    );\n  }\n}\n```\n\nThere are situations where we want to keep large amounts of data in-sync. We can call imperative actions on media elements and listen for events within React components, and this is adequate for things like a video play button, a timer, or a simple `flyTo()` action on a map, but examples can easily become more complex than this. \n\nConsider a search and filtering interface that updates the application UI, then triggers a map to `zoomTo` and fit the bounds of filtered items. \n\nHere there are numerous state changes, computations and derived actions that need to be triggered on the map. It's not clear which component should be responsible for listening to updates and triggering imperative actions on the map. \n\nIn these situations, it helps to use some kind of store for state management. With this, we can share state between React and the media element. You can use [Redux](https://redux.js.org/introduction) if you are familiar with it, or if you want a recommendation I've been enjoying [Unistore](https://github.com/developit/unistore) recently. It doesn't matter what you use as long as you can subscribe to state changes and imperatively get the state from the store.\n\nThere are two different approaches we can use. With canvas animations, games, and libraries like Three.js or D3.js you might want to implement a render loop. A render loop will run periodically (usually several times a second) and we can fetch state from the store and call an update method.\n\nA very simple example of a render loop looks something like this:\n\n```javascript\nimport { store } from './store'\n\nfunction loop() {\n  const state = store.getState();\n  \n  // Do updates\n  \n  requestAnimationFrame(loop)\n}\n  \nrequestAnimationFrame(loop)\n```\n\nThis approach is constantly calling `loop()` using `requestAnimationFrame()`. It then gets state from the store and applies updates on every frame. \n\nThe other approach is to subscribe to the store and call update only when the store changes.\n\n```javascript\nimport { store } from './store'\n\nfunction update() { \n  const state = store.getState();\n  // Do updates\n}\n\nstore.subscribe(update)\n```\n\nWith both these examples, it is possible to call `store.setState()` or dispatch actions and have React components respond to data changes initiated by the media element.\n\nHere's an example of a map application that shares data between media elements, UI components within React: \n\n[![Edit react-map-unistore](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/2x6xwz6k2n)\n\nI really like this approach because we can have two highly separate applications that work largely independently yet share the same data source. In theory, it's not necessary to mount the map into a React application. It could just as easily be mounted by a different framework or plain onld JavaScript. This makes things much more portable and easy to test. \n\nIf you find working with canvas, video and 3rd-party libraries like D3.js, three.js, or mapbox difficult within React, I hope this has helped you understand some of the reasons, as well as some possible solutions. ",
        "type": "MarkdownRemark",
        "contentDigest": "5149dbe519d0bbdaf22dcf1459e8401e",
        "owner": "gatsby-transformer-remark"
      },
      "frontmatter": {
        "title": ""
      },
      "excerpt": "",
      "rawMarkdownBody": "One of the biggest advantages of React is that we need to worry less about managing updates to the UI. The presentation is defined once within the `render()` method of a component and it will update automatically when data changes.\n\nThe `render()` method returns elements via `JSX` that instruct React to update the DOM. This is the strength of React because it can manage updates to the DOM more efficiently than I would, and `JSX` provides a declarative means of describing a component structure, much like HTML.\n\nThere is however, one key assumption in all of this and that is that updating data should result in updates to the DOM. This assumption is central to the React component lifecycle, and in-fact the render method is the only required method of a React component. That's a pretty core assumption, and as a result accessing the DOM node of a React rendered element, is not always straight-forward.\n\nTypically DOM manipulation outside the render method is discouraged, but there are some elements in HTML that are not quite as descriptive when it comes to updates. Examples of these include elements like `<video>` and `<canvas>`. Updating these usually requires calling a native method to clear the canvas, or to pause video playback. To interact with these native methods we need to get a reference to the element in the DOM and for this React has refs. \n\n## Accessing the DOM in React\n\nRefs, as the name implies, provide us with a reference to an element in the DOM. We can access this only after React has rendered the element. \n\nMethods for creating and retrieving refs have changed between React versions with backward compatibility, so you might see other techniques used in the wild. Here I am using the `createRef()` method introduced in React 16.3. \n\n```javascript\nclass CanvasComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.myCanvas = React.createRef();\n  }\n  \n  componentDidMount() {\n    const ctx = this.myCanvas.current.getContext('2d');\n    ctx.fillRect(0, 0, 100, 100);\n  }\n  \n  render() {\n    return <canvas ref={this.myCanvas} width={100} height={100} />\n  }\n}\n```\nIn this example I create a ref named `myCanvas` in the `constructor()`, attact it to the component in the `render()` method, and then access it after the component has mounted, where I can finally draw to the HTML canvas.\n\nThis technique works well enough if I only need draw once, but for more complex examples, we're going to run into problems. React is calling the render method constantly, but because it is clever, it's recycling the DOM elements rather than re-building it each time. This is great because we want the canvas to be persistent. However changes to the surrounding HTML, and particularly higher up the document tree, can result in re-building parts of the DOM. If you'd like to know more about why and when React re-builds the DOM, I'd suggest reading the [React documentation on reconciliation](https://reactjs.org/docs/reconciliation.html).\n\n## Working with stateful media objects\n\nTake a look at this example of a random \"Rainbow Walker\": \n\n<div class=\"full-width\">\n<p data-height=\"350\" data-theme-id=\"light\" data-slug-hash=\"c795e7e7eb0a542a64739d7a1cb485a0\" data-default-tab=\"result\" data-user=\"MadeByMike\" data-pen-title=\"Rainbow walker\" data-preview=\"true\" class=\"codepen\">See the Pen <a href=\"https://codepen.io/MadeByMike/pen/c795e7e7eb0a542a64739d7a1cb485a0/\">Rainbow walker</a> by Mike (<a href=\"https://codepen.io/MadeByMike\">@MadeByMike</a>) on <a href=\"https://codepen.io\">CodePen</a>.</p>\n<script async src=\"https://static.codepen.io/assets/embed/ei.js\"></script>\n</div>\n\nIt looks great, but \"information\" is stored directly on the canvas. Each `tick` of the animation draws a new part of the line and the previous position and color information is lost. The cumulative result of this drawing procedure is stored on the canvas for as long as the canvas exists, but if React creates a new element, this information is lost forever. This is one of the challenges of working with persistent and stateful media objects in React.\n\nTake a look at this updated example and click the wrap\\unwrap button to see what happens: \n\n<div class=\"full-width\">\n<p data-height=\"400\" data-theme-id=\"light\" data-slug-hash=\"e8ec1be6a6c4cd28212473074e6b4607\" data-default-tab=\"result\" data-user=\"MadeByMike\" data-pen-title=\"Rainbow walker wrap\\unwrap\" data-preview=\"true\" class=\"codepen\">See the Pen <a href=\"https://codepen.io/MadeByMike/pen/e8ec1be6a6c4cd28212473074e6b4607/\">Rainbow walker wrap\\unwrap</a> by Mike (<a href=\"https://codepen.io/MadeByMike\">@MadeByMike</a>) on <a href=\"https://codepen.io\">CodePen</a>.</p>\n<script async src=\"https://static.codepen.io/assets/embed/ei.js\"></script>\n</div>\n\nAll the button does is change the `render()` method to wrap the `<canvas>` in an extra `<div>`. This is something that can happen frequently with larger applications and it's not always easy to avoid. Wrapping an element is one of many things that can cause parts of the DOM to be re-drawn.\n\nIt's worth noting that the current position of the walker is not reset when clicking the wrap\\unwrap button. That's because the component itself is not unmounted when its output changes. However, it's not always easy to avoid unmounting components either. Logically we try to split components into smaller chunks and once again the sorrounding layout can change. Take a look at this example of a canvas clock: \n\n<div class=\"full-width\">\n<p data-height=\"250\" data-theme-id=\"light\" data-slug-hash=\"5c3293dade22de7d823741c8241950b3\" data-default-tab=\"js,result\" data-user=\"MadeByMike\" data-pen-title=\"Clock\" data-preview=\"true\" class=\"codepen\">See the Pen <a href=\"https://codepen.io/MadeByMike/pen/5c3293dade22de7d823741c8241950b3/\">Clock</a> by Mike (<a href=\"https://codepen.io/MadeByMike\">@MadeByMike</a>) on <a href=\"https://codepen.io\">CodePen</a>.</p>\n<script async src=\"https://static.codepen.io/assets/embed/ei.js\"></script>\n</div>\n\nHere I've split the logic for the clock and the layout between two different components. When the layout surrounding the clock changes the component is re-mounted. In addition to a new `canvas`, data in state is lost and the counter is reset to 0. You will also see a noticeable flash as the canvas is re-initialised. For elements like `canvas` this is much more expensive than re-drawing a typical DOM node. This is especially true if we need to re-initialise a 3rd-party library as well.\n\n## Imperative & declarative APIs\n\nIt's not just `canvas`, these issues exist for `video` and other media, as well as 3rd-party libraries for things like data visualisation, mapping and charts. The problem is that libraries like D3.js, three.js, mapbox and whatever the hottest chart library is right now, have imperative APIs. This typically means that there is a single object that represents an entity on the page and we invoke actions directly on it. For example with Mapbox after creating a new map, we call methods like `flyTo()` to trigger actions. E.g.\n\n```\nvar map = new mapboxgl.Map(mapboxOptions);\nmap.flyTo({center: [0, 0], zoom: 9});\n```\n\nThis approach is very different from HTML or JSX that have a more declarative API. With a declarative API it's more descriptive. We update the description of the map with new properties and the library resolves these changes into a set of actions required to update the map.\n\nAnimations or any action that occurs over time can be difficult to describe using a declarative API. This is because declarative components don't typically have a persistent state. Think about how animations work in CSS. New animations can be triggered by the addition of a classname but these properties will reset the existing animation, causing it to start from its initial state. \n\nDespite this, I see numerous attempts to \"solve\" the challenges of working with stateful media in React by creating libraries convert imperative APIs into a set of declarative React components. They do this by wrapping another layer of abstraction around 3rd-party tools and native APIs. \n\nThe [react-map-gl](https://github.com/uber/react-map-gl) library has more than 4000 stars. This recreation of the HTML5 canvas API [react-konva](https://github.com/konvajs/react-konva) has more than 2000. The [react-d3-components](https://github.com/codesuki/react-d3-components) library has over 1400 and there are many more like these. \n\nTo me these are the jQuery plugins of this era. They all provide limited on-rails solutions that serves to comfort developers with a React mindset. Perhaps the only advantage is that the better-designed examples of these allow developers to continue splitting logic into smaller components. \n\n## Escaping React\n\nOften a `<canvas>`, `<video>`, or chart container will be the lowest level item in the DOM that React is aware of. Therefore the React component that mounts these can become bloated with all the custom methods, events and other logic that controls the embedded object.\n\nI don't think the solution is to try and envelope everything into React. Although declarative APIs can be amazingly succinct and performant they are not the solution to everything. I also think that trying to map an existing imperative API to a set of React components going to result in something less than the original.   \n\nMy solution is to get the heck out of React when I need to and find a way to make these things work together. Let's take a look at an example of an HTML `<video>` element and a solution that avoids:\n\n- clearing stateful data (such as the video source and play state) when React re-renders,\n- methods and actions restricted to a single component\n\n__Note:__ In this example, I'm using es6 imports to demonstrate how elements, functions and components can be shared between files. \n\nIn one file I create a component with a ref similar to the first example.\n\n```javascript\nimport React from \"react\";\n\nconst videoElement = document.createElement(\"video\");\n\nclass Video extends React.Component {\n  constructor(props) {\n    super(props);\n    this.myVideoContainer = React.createRef();\n  }\n\n  componentDidMount() {\n    this.myVideoContainer.current.appendChild(videoElement);\n  }\n\n  render() {\n    return <div ref={this.myVideoContainer} />;\n  }\n}\n\nexport { videoElement, Video };\n\n```\nInstead of attaching it to a canvas or video element, the ref is attached to an empty `<div>` container. The video element is a detached DOM node that exists outside the component. I append this to the container once the React component is mounted. \n\nBecause the video element exists outside a React component, even if React re-renders the container or unmounts the component, the video will be re-mounted without losing its source, play state, or any other data.\n\nWe're exporting the `videoElement` so we can access it in different components. I can now create a load button that applies a video source to the element:\n\n```javascript\nimport React from \"react\";\nimport { videoElement } from \"./video\";\n\nclass LoadButton extends React.Component {\n  render() {\n    return (\n      <button\n        onClick={function() {\n          //  Thank you MDN for the video source! \n          videoElement.src =\n            \"https://interactive-examples.mdn.mozilla.net/media/examples/flower.mp4\";\n        }}\n      >\n        Load\n      </button>\n    );\n  }\n}\n\nexport { LoadButton };\n```\n\nAs well as a play button: \n\n```javascript\nimport React from \"react\";\nimport { videoElement } from \"./video\";\n\nclass PlayButton extends React.Component {\n  render() {\n    return (\n      <button\n        onClick={function() {\n          videoElement.play();\n        }}\n      >\n        Play\n      </button>\n    );\n  }\n}\n\nexport { PlayButton };\n\n```\n\nI can even create custom functions that extend the native `<video>` element. Here I've added a method to inverts colours by toggling a classname:\n\n```javascript\nimport React from \"react\";\nimport { videoElement } from \"./video\";\n\nfunction invertVideo() {\n  videoElement.classList.toggle(\"invert\");\n}\n\nclass InvertButton extends React.Component {\n  render() {\n    return (\n      <button\n        onClick={function() {\n          invertVideo();\n        }}\n      >\n        Invert\n      </button>\n    );\n  }\n}\n\nexport { InvertButton };\n```\n\nIn a real application, functions like `invertVideo()` might not be tied to a single UI element such as in this example. A function that clears data on a map, for example, might be triggered by multiple UI actions. In cases like this, it makes more sense to import functions rather than co-locating them with the UI components.\n\nEither way, the ability to split this code and organise it in different ways is a huge win compared with a massive React component and some of the techniques used to pass imperative actions like that of a play button between independent components.\n\nYou can check out a full demo here:\n\n[![Edit react-html-video](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/n9zp6yry7p)\n\n__Note__: By importing the `videoElement` we're creating an implicit link between components. \n\nIdeally, React components are dumb and fully reusable. I wanted to show the simplest example first, but also practically speaking, I think this technique is sufficient for many applications. Most importantly it's not difficult to refactor if you need greater flexibility or multiple instances of components later. \n\n## Multiple instances\n\nThe examples above deal with a single instance of a media element. If we needed a 2nd video, we'd have to create a 2nd component along with a 2nd play button, load button etc...\n\nDespite its limitations, if you can get away with it, I think a single entity is a lot easier to work with, but there are problems when we have multiple instances. \n\nIf you pass the `videoElement` as a prop a lot of the problems can be solved. However, if we are going to re-structure components to be more reusable, rather than just passing the DOM element, it might help to organise some of the functions and exports into methods and properties within a class. \n\nThere are several different patterns you could use. What's best depends on your particular project. This is an example I created for the canvas clock: \n\n```javascript\nclass Counter {\n  constructor() {\n    this.element = document.createElement(\"canvas\");\n    this.ctx = this.element.getContext(\"2d\");\n\n    this.element.width = 100;\n    this.element.height = 100;\n    \n    this.ctx.font = \"40px Georgia, serif\";\n    this.ctx.textAlign = \"center\";\n    this.ctx.textBaseline = \"middle\";\n    \n    this.timer = false;\n    this.counter = 0;\n    \n    this.step = this.step.bind(this);\n  }\n\n  start() {\n    this.timer = setInterval(this.step, 100);\n  }\n\n  stop() {\n    clearInterval(this.timer);\n  }\n\n  step() {\n    this.counter = this.counter < 99 ? this.counter + 1 : 0;\n    this.ctx.fillStyle = \"black\";\n    this.ctx.fillRect(0, 0, 100, 100);\n    this.ctx.fillStyle = \"white\";\n    this.ctx.fillText(this.counter, 50, 50);\n  }\n}\n```\n\nWith this generic class, we create an instance of `Counter` for each clock, I then pass the instance as a parameter to the `<Clock/>` and `<StopButton/>` components.\n\n```javascript\nimport { Clock } from \"./clock\";\nimport { StopButton } from \"./stop-button\";\nimport { Counter } from './counter'\n\nconst clockA = new Counter();\nconst clockB = new Counter();\n\n<Clock counter={clockA} /> \n<StopButton counter={clockA} />\n<Clock counter={clockA} /> \n<StopButton counter={clockA} />\n```\n\nIn the `<Clock/>` and `<StopButton/>` components we can retrieve the DOM element and access methods via the `counter` prop:\n\n```javascript\nclass Clock extends React.Component {\n  constructor(props) {\n    super(props);\n    this.myClockContainer = React.createRef();\n  }\n\n  componentDidMount() {\n    this.myClockContainer.current.appendChild(this.props.counter.element);\n    this.props.counter.start();\n  }\n\n  render() {\n    return <div ref={this.myClockContainer} />;\n  }\n}\n```\n\nOnce again you can see a full example here: \n\n[![Edit react-many-clocks](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/y06pjpo0lx)\n\n## Sharing data\n\nThe final challenge we have is sharing data between React and the media elements. Many of these have internal state and retrieving this is often as easy as calling a method. For example to get the current play time of a video we can import the element and query the `currentTime` property: \n\n```javascript\nimport { videoElement } from './video' \nconst time = videoElement.currentTime\n```\n\nThis is adequate in many cases, but React is not going to re-render when the `currentTime` changes. We need to communicate relevant internal state changes to React. The video element has a `timeupdate` event. We can import the element and listen for `timeupdate`, then set state within React.\n\n```javascript\nimport React from \"react\";\nimport { videoElement } from \"./video\";\n\nclass VideoTimer extends React.Component {\n\n  constructor(props) {\n    super(props)\n    this.state = { time: 0 }\n    this.setTime = this.setTime.bind(this)\n  }\n\n  setTime() {\n    this.setState({ time: videoElement.currentTime })\n  }\n  \n  componentDidMount() {\n    videoElement.addEventListener(\"timeupdate\", this.setTime);\n  }\n  \n  componentWillUnmount() {\n    videoElement.removeEventListener(\"timeupdate\", this.setTime);\n  }\n\n  render() {\n    return (\n      <p>\n        {this.state.time}\n      </p>\n    );\n  }\n}\n```\n\nThere are situations where we want to keep large amounts of data in-sync. We can call imperative actions on media elements and listen for events within React components, and this is adequate for things like a video play button, a timer, or a simple `flyTo()` action on a map, but examples can easily become more complex than this. \n\nConsider a search and filtering interface that updates the application UI, then triggers a map to `zoomTo` and fit the bounds of filtered items. \n\nHere there are numerous state changes, computations and derived actions that need to be triggered on the map. It's not clear which component should be responsible for listening to updates and triggering imperative actions on the map. \n\nIn these situations, it helps to use some kind of store for state management. With this, we can share state between React and the media element. You can use [Redux](https://redux.js.org/introduction) if you are familiar with it, or if you want a recommendation I've been enjoying [Unistore](https://github.com/developit/unistore) recently. It doesn't matter what you use as long as you can subscribe to state changes and imperatively get the state from the store.\n\nThere are two different approaches we can use. With canvas animations, games, and libraries like Three.js or D3.js you might want to implement a render loop. A render loop will run periodically (usually several times a second) and we can fetch state from the store and call an update method.\n\nA very simple example of a render loop looks something like this:\n\n```javascript\nimport { store } from './store'\n\nfunction loop() {\n  const state = store.getState();\n  \n  // Do updates\n  \n  requestAnimationFrame(loop)\n}\n  \nrequestAnimationFrame(loop)\n```\n\nThis approach is constantly calling `loop()` using `requestAnimationFrame()`. It then gets state from the store and applies updates on every frame. \n\nThe other approach is to subscribe to the store and call update only when the store changes.\n\n```javascript\nimport { store } from './store'\n\nfunction update() { \n  const state = store.getState();\n  // Do updates\n}\n\nstore.subscribe(update)\n```\n\nWith both these examples, it is possible to call `store.setState()` or dispatch actions and have React components respond to data changes initiated by the media element.\n\nHere's an example of a map application that shares data between media elements, UI components within React: \n\n[![Edit react-map-unistore](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/2x6xwz6k2n)\n\nI really like this approach because we can have two highly separate applications that work largely independently yet share the same data source. In theory, it's not necessary to mount the map into a React application. It could just as easily be mounted by a different framework or plain onld JavaScript. This makes things much more portable and easy to test. \n\nIf you find working with canvas, video and 3rd-party libraries like D3.js, three.js, or mapbox difficult within React, I hope this has helped you understand some of the reasons, as well as some possible solutions. "
    },
    "01f51edb-62ef-5f06-99b9-f328701e5682": {
      "id": "01f51edb-62ef-5f06-99b9-f328701e5682",
      "children": [],
      "parent": "f88193a9-2b71-517f-8473-a856ee592d6a",
      "internal": {
        "content": "Me thinking about component-based architecture for CSS in 2014, before I knew what to call it.",
        "type": "MarkdownRemark",
        "contentDigest": "66c8cbf2fd3d645efea83a3ffa1740a8",
        "owner": "gatsby-transformer-remark"
      },
      "frontmatter": {
        "title": ""
      },
      "excerpt": "",
      "rawMarkdownBody": "Me thinking about component-based architecture for CSS in 2014, before I knew what to call it."
    },
    "6c6773dc-5d26-542b-bd2e-82c9524c8ec9": {
      "id": "6c6773dc-5d26-542b-bd2e-82c9524c8ec9",
      "children": [],
      "parent": "ce8a8962-f0a6-5d17-a5e6-d807af493943",
      "internal": {
        "content": "Typically when we begin a new web project we start by creating a number of directories for CSS, JavaScript and other resources. This task hasn't changed much and it's a typical step for most developers. In many cases, this structure is a non-optional part of the workflow enforced by scaffolding tools like [yeoman](http://yeoman.io/), an MVC framework or a [boilerplate](http://html5boilerplate.com/).\n\nReasons behind it relate to the well-established principle <a href=\"http://en.wikipedia.org/wiki/Separation_of_concerns\">separation of concerns</a>. In web development we get separation of concerns for free. It is built into the difference between HTML, CSS and JavaScript, each relating to content, presentation, and behaviour respectively.\n\nDespite the importance of this principal, I've found that simple separation of CSS, JavaScript and resources within a project folder, is increasingly inadequate - especially for larger projects, and I'm starting to think there might be a better way.\n\n\nThis change of thinking started with [object oriented CSS](https://github.com/stubbornella/oocss/wiki), and [BEM](http://bem.info/) methodologies. These ideas changed the way I think about different components on the screen and Brad Frost's concept of [Atomic](http://bradfrostweb.com/blog/post/atomic-web-design/) [Design](http://patternlab.io/about.html), perfectly articulates the evolution of this thinking.\n\nThese ideas changed the way I structure my CSS, but it wasn't until I started using build tools in my front-end development workflow to generate API references and documentation, that I started to realise some limitations of the typical project structure. I suspect that these limitations may become even more apparent with the take-up of [web components](http://css-tricks.com/modular-future-web-components).\n\n\nOne of the problems I see is that components we think of are not really isolated. If you need to remove something you need to find the scripts, the styles, each of the resources, remove import statements if you are using a CSS pre compiler and perhaps update your build script. You often still don’t know if any of the resources are shared between components.\n\nHow we structure our projects is now often at odds with our thinking and how we set out API references, style guides, pattern libraries and other documentation. You have all of those right?\n\nI’m starting to suspect (and I reserve the right to be wrong) that with modern build tools we have today, we can structure projects to better reflect our modular thinking.\n\nI'm not suggesting that separation of concerns is no longer relevant, not at all, but separation can exist at a component level and while the end result might look much like a traditional project, this doesn't have to be the case for development.\n\nRecently I’ve been experimenting with having each of the styles, scripts and resources inside a unique folder per component.\n\nSo far this approach has worked well for any project that involves developing a component library, which means most websites.\n\nDoing it this way you can keep better track of resources related to the component I'm working on. You can keep examples and documentation in the same folder and update them whenever you work on that component. You can even keep test libraries and other files close to the source. However the biggest advantage is you can easily and confidently remove a component simply by removing the folder.\n\nOf course, there are some limitations -it’s not always obvious what represents a component. Smaller components must be grouped together and things like mixins and resets might also represent unique components in this structure. It’s always not easy to follow a rule, sometimes just decide what works best.\n\nIf including 3rd party libraries, you may have to refactor them or make exceptions when they don't fit the structure you're using -although this can be the case in any project.\n\nAdvantages of projects structured around components:\n\n* It's easy to update and remove components\n* Components become more portable between projects\n* It encourages modular thinking and development practise\n* It's easy for outsiders and non-technical people to understand\n* Faster\n\nDisadvantages of projects structured around components:\n\n* More complicated build scripts\n* Components must be largely independent of each other\n* 3rd party libraries are sometimes difficult to include\n",
        "type": "MarkdownRemark",
        "contentDigest": "a36572b95adc417841c8a3934223f0b1",
        "owner": "gatsby-transformer-remark"
      },
      "frontmatter": {
        "title": ""
      },
      "excerpt": "",
      "rawMarkdownBody": "Typically when we begin a new web project we start by creating a number of directories for CSS, JavaScript and other resources. This task hasn't changed much and it's a typical step for most developers. In many cases, this structure is a non-optional part of the workflow enforced by scaffolding tools like [yeoman](http://yeoman.io/), an MVC framework or a [boilerplate](http://html5boilerplate.com/).\n\nReasons behind it relate to the well-established principle <a href=\"http://en.wikipedia.org/wiki/Separation_of_concerns\">separation of concerns</a>. In web development we get separation of concerns for free. It is built into the difference between HTML, CSS and JavaScript, each relating to content, presentation, and behaviour respectively.\n\nDespite the importance of this principal, I've found that simple separation of CSS, JavaScript and resources within a project folder, is increasingly inadequate - especially for larger projects, and I'm starting to think there might be a better way.\n\n\nThis change of thinking started with [object oriented CSS](https://github.com/stubbornella/oocss/wiki), and [BEM](http://bem.info/) methodologies. These ideas changed the way I think about different components on the screen and Brad Frost's concept of [Atomic](http://bradfrostweb.com/blog/post/atomic-web-design/) [Design](http://patternlab.io/about.html), perfectly articulates the evolution of this thinking.\n\nThese ideas changed the way I structure my CSS, but it wasn't until I started using build tools in my front-end development workflow to generate API references and documentation, that I started to realise some limitations of the typical project structure. I suspect that these limitations may become even more apparent with the take-up of [web components](http://css-tricks.com/modular-future-web-components).\n\n\nOne of the problems I see is that components we think of are not really isolated. If you need to remove something you need to find the scripts, the styles, each of the resources, remove import statements if you are using a CSS pre compiler and perhaps update your build script. You often still don’t know if any of the resources are shared between components.\n\nHow we structure our projects is now often at odds with our thinking and how we set out API references, style guides, pattern libraries and other documentation. You have all of those right?\n\nI’m starting to suspect (and I reserve the right to be wrong) that with modern build tools we have today, we can structure projects to better reflect our modular thinking.\n\nI'm not suggesting that separation of concerns is no longer relevant, not at all, but separation can exist at a component level and while the end result might look much like a traditional project, this doesn't have to be the case for development.\n\nRecently I’ve been experimenting with having each of the styles, scripts and resources inside a unique folder per component.\n\nSo far this approach has worked well for any project that involves developing a component library, which means most websites.\n\nDoing it this way you can keep better track of resources related to the component I'm working on. You can keep examples and documentation in the same folder and update them whenever you work on that component. You can even keep test libraries and other files close to the source. However the biggest advantage is you can easily and confidently remove a component simply by removing the folder.\n\nOf course, there are some limitations -it’s not always obvious what represents a component. Smaller components must be grouped together and things like mixins and resets might also represent unique components in this structure. It’s always not easy to follow a rule, sometimes just decide what works best.\n\nIf including 3rd party libraries, you may have to refactor them or make exceptions when they don't fit the structure you're using -although this can be the case in any project.\n\nAdvantages of projects structured around components:\n\n* It's easy to update and remove components\n* Components become more portable between projects\n* It encourages modular thinking and development practise\n* It's easy for outsiders and non-technical people to understand\n* Faster\n\nDisadvantages of projects structured around components:\n\n* More complicated build scripts\n* Components must be largely independent of each other\n* 3rd party libraries are sometimes difficult to include\n"
    },
    "780e2dc2-67c9-5443-9cfc-47610b7ecd36": {
      "id": "780e2dc2-67c9-5443-9cfc-47610b7ecd36",
      "children": [],
      "parent": "2874f855-f45b-5dd2-a1b8-8851a376ffb7",
      "internal": {
        "content": "There are some interesting differences between how currentColor and custom properties work. Both are examples of dynamic properties in CSS but how they are resolved differs in some very important ways. I recently came across an example of this that had me scratching my head for a while.",
        "type": "MarkdownRemark",
        "contentDigest": "0b99115f70eb845952df307b168aff6b",
        "owner": "gatsby-transformer-remark"
      },
      "frontmatter": {
        "title": ""
      },
      "excerpt": "",
      "rawMarkdownBody": "There are some interesting differences between how currentColor and custom properties work. Both are examples of dynamic properties in CSS but how they are resolved differs in some very important ways. I recently came across an example of this that had me scratching my head for a while."
    },
    "5e891d27-8efe-5e28-9b51-3f210c33daee": {
      "id": "5e891d27-8efe-5e28-9b51-3f210c33daee",
      "children": [],
      "parent": "1df335a7-d623-5e24-8a29-5c438e0b1e5f",
      "internal": {
        "content": "A friend was trying to set a theme on a container and have it apply a color to the border of a heading, and the body text. Something like this:\n![A black heading with a blue border and blue paragraphs below](//images.ctfassets.net/2cb7djx9f8kv/5d9fvupAkguQaCqAIkAIeY/fbc8b88a1eca000dba724401728e2dcb/custom-props.png)\n\nShe wanted to keep it simple with minimal CSS and ideally set the theme by applying just a single class in the HTML.\n \nSince we wanted to change the color of more than just paragraphs in the body text, it made sense to start by setting the `color` property on a container element. This would allow all elements inside the container to inherit the theme color and we could just set the headings back to black.\n\nSince we wanted to set the color in just one place, I suggested we set the value of `border-color` on the headings to inherit. This would cause the heading element to have the same value for `border-color` as its parent element. To my initial surprise the color of the border was black.\n\nMy CSS was something like this:\n\n```css\n.theme {\n  color: #2378a3;\n}\n\n.theme-heading {\n  color: black;\n  border-color: inherit;\n}\n```\n\nSince there is no `border-color` set on the `.theme` class, the default value is used. The default for `border-color` is `currentColor`, and in the context of `.theme`, the value of `currentColor` in this example is `#2378a3`.  This is the value I expected `.theme-heading` to inherit. \n\nYou might be wondering, as I was, what exactly is happening? The answer is, it’s not a bug, and it’s still inheriting from the parent element. It turns out, when we inherit `currentColor` we are not retrieving the resolved value of that property from the parent. Instead we are inheriting the keyword itself, and the computed value will be resolved in the local context. And, therefore in this example the border color will be black.\n\nThe solution is of course to set the value of the `border-color` as well as `color` in the `.theme` selector:\n\n```css\n\n.theme {\n  color: #2378a3;\n  border-color: #2378a3;\n}\n\n.theme-heading {\n  color: black;\n  border-color: inherit;\n}\n```\n\nNow we are no longer inheriting a dynamic property and the border color will be `#2378a3` as expected. And we are still setting the color values only on the `.theme` class.\n\nMaybe this is what you expected. Perhaps the reason I didn’t, is that I’ve been working with custom properties a lot recently, and although they are both dynamic, custom properties will not work like `currentColor` in the same situation.\n\nAn equivalent example with custom properties would look something like this:\n\n```css\n.theme {\n  --theme-color: #2378a3;\n  color: var(--theme-color);\n  border-color: var(--theme-color);\n}\n\n.theme-heading {\n  --theme-color: black;\n  color: var(--theme-color);\n  border-color: inherit; \n}\n```\n\nIn this situation the `border-color` of `.theme-heading` is inheriting the `--theme-color` custom property from the parent element. Yet even though the value of `--theme-color` is set locally to black, its border-color will not use this local value in the same way `currentColor` did.\n\nInheriting a value set by a custom property will always match the resolved value from the parent.\n\n__Note__: The `color` property in this example will take the local value, because it is not inherited.\n\nThe key difference here is: The `currentColor` keyword is not resolved at computed-value time, but is a reference to the used value of the local `color` property.\n\nSince learning about custom properties, I'd started to think of `currentColor` as a dynamic property in a very similar to custom properties. It turns out there are some fundamental differences that have real implications that we should be aware of. And again, this example highlights how different custom properties are from variables in preprocessors.\n\n\n\n",
        "type": "MarkdownRemark",
        "contentDigest": "6c575f518b90f743b353d04cc8d41fb1",
        "owner": "gatsby-transformer-remark"
      },
      "frontmatter": {
        "title": ""
      },
      "excerpt": "",
      "rawMarkdownBody": "A friend was trying to set a theme on a container and have it apply a color to the border of a heading, and the body text. Something like this:\n![A black heading with a blue border and blue paragraphs below](//images.ctfassets.net/2cb7djx9f8kv/5d9fvupAkguQaCqAIkAIeY/fbc8b88a1eca000dba724401728e2dcb/custom-props.png)\n\nShe wanted to keep it simple with minimal CSS and ideally set the theme by applying just a single class in the HTML.\n \nSince we wanted to change the color of more than just paragraphs in the body text, it made sense to start by setting the `color` property on a container element. This would allow all elements inside the container to inherit the theme color and we could just set the headings back to black.\n\nSince we wanted to set the color in just one place, I suggested we set the value of `border-color` on the headings to inherit. This would cause the heading element to have the same value for `border-color` as its parent element. To my initial surprise the color of the border was black.\n\nMy CSS was something like this:\n\n```css\n.theme {\n  color: #2378a3;\n}\n\n.theme-heading {\n  color: black;\n  border-color: inherit;\n}\n```\n\nSince there is no `border-color` set on the `.theme` class, the default value is used. The default for `border-color` is `currentColor`, and in the context of `.theme`, the value of `currentColor` in this example is `#2378a3`.  This is the value I expected `.theme-heading` to inherit. \n\nYou might be wondering, as I was, what exactly is happening? The answer is, it’s not a bug, and it’s still inheriting from the parent element. It turns out, when we inherit `currentColor` we are not retrieving the resolved value of that property from the parent. Instead we are inheriting the keyword itself, and the computed value will be resolved in the local context. And, therefore in this example the border color will be black.\n\nThe solution is of course to set the value of the `border-color` as well as `color` in the `.theme` selector:\n\n```css\n\n.theme {\n  color: #2378a3;\n  border-color: #2378a3;\n}\n\n.theme-heading {\n  color: black;\n  border-color: inherit;\n}\n```\n\nNow we are no longer inheriting a dynamic property and the border color will be `#2378a3` as expected. And we are still setting the color values only on the `.theme` class.\n\nMaybe this is what you expected. Perhaps the reason I didn’t, is that I’ve been working with custom properties a lot recently, and although they are both dynamic, custom properties will not work like `currentColor` in the same situation.\n\nAn equivalent example with custom properties would look something like this:\n\n```css\n.theme {\n  --theme-color: #2378a3;\n  color: var(--theme-color);\n  border-color: var(--theme-color);\n}\n\n.theme-heading {\n  --theme-color: black;\n  color: var(--theme-color);\n  border-color: inherit; \n}\n```\n\nIn this situation the `border-color` of `.theme-heading` is inheriting the `--theme-color` custom property from the parent element. Yet even though the value of `--theme-color` is set locally to black, its border-color will not use this local value in the same way `currentColor` did.\n\nInheriting a value set by a custom property will always match the resolved value from the parent.\n\n__Note__: The `color` property in this example will take the local value, because it is not inherited.\n\nThe key difference here is: The `currentColor` keyword is not resolved at computed-value time, but is a reference to the used value of the local `color` property.\n\nSince learning about custom properties, I'd started to think of `currentColor` as a dynamic property in a very similar to custom properties. It turns out there are some fundamental differences that have real implications that we should be aware of. And again, this example highlights how different custom properties are from variables in preprocessors.\n\n\n\n"
    },
    "ad6bcb86-a31e-540b-a741-b9881c11a73a": {
      "id": "ad6bcb86-a31e-540b-a741-b9881c11a73a",
      "children": [],
      "parent": "0932c157-ca35-5676-af96-da8aafc3554d",
      "internal": {
        "content": "My attempt at a very basic explanation of the 'this' keyword in JavaScript.",
        "type": "MarkdownRemark",
        "contentDigest": "8285cdd4e346204a5029cd56462b8ff4",
        "owner": "gatsby-transformer-remark"
      },
      "frontmatter": {
        "title": ""
      },
      "excerpt": "",
      "rawMarkdownBody": "My attempt at a very basic explanation of the 'this' keyword in JavaScript."
    },
    "479da221-e984-5c18-853d-a5d8edff3717": {
      "id": "479da221-e984-5c18-853d-a5d8edff3717",
      "children": [],
      "parent": "2f5acfad-2a61-502c-a61e-7c5d127b4c54",
      "internal": {
        "content": "Like many things, the `this` keyword in JavaScript is something I learned to work with and around, long before I gained any proper understanding of how it works. Recently I was asked to describe it and found despite my experience I still strugled to find simple terms. So I thought I'd write down my best attempt.\n\nThere is a special keyword in JavaScript called `this`. It is a reference to an object. This reference is sometimes called a `binding` because it ties the value of `this` to a specific object. What object, and the value of `this`, depends on how and where the function is called.\n\nThe default value of `this` is the `window` object in browsers or `undefined` when in strict mode. \n\nWe can explicitly set what `this` points by executing functions with methods like `call`, `bind` and `apply`. \n\n```javascript\nfunction myFunc() {\n  return this;\n}\n\nmyFunc() // window\nvar myBinding = myFunc.bind('hello'); // .bind() returns a new function with a different binding\nmyBinding(); // 'hello'\nmyFunc.call('hello'); // 'hello'\nmyFunc.apply('hello'); // 'hello'\n```\n\nWhat confuses me sometimes is JavaScript will implicity bind `this` if the function is called within an context owning object. This means when a function is a property of a context owning object, the value of `this` will be the object itself. In the example below the owning object, and therfore value of `this` is `myObject`:  \n\n```javascript\nfunction myFunc() {\n  return this.greeting;\n}\n\nvar myObject = {\n\tgreeting: 'hello',\n  function: myFunc\n}\n\nconsole.log(myObject.function()); // 'hello'\n```\n\nCalling a function with the keyword `new` will result in a new empty object bound to `this`. \n\n```javascript\nfunction myFunc(something) {\n\tthis.thing = something;\n\treturn this.thing;\n}\n\nconsole.log(new myFunc('something'));\n```\n\nThis has been a very short introduction that covers only basic information. If you want to know more I was inspired to attempt my own explaination after reading Willian Martins, [Taming this In JavaScript With Bind Operator](https://www.smashingmagazine.com/2018/10/taming-this-javascript-bind-operator/) . I could also not write about `this` without recommending Kyle Simpson's explaination in [You Don't Know JavaScript](https://github.com/getify/You-Dont-Know-JS/blob/master/this%20%26%20object%20prototypes/ch2.md), especially the [TLDR](https://github.com/getify/You-Dont-Know-JS/blob/master/this%20%26%20object%20prototypes/ch2.md#review-tldr).\n\n",
        "type": "MarkdownRemark",
        "contentDigest": "f46758c16334889c28e4ff22c203da1e",
        "owner": "gatsby-transformer-remark"
      },
      "frontmatter": {
        "title": ""
      },
      "excerpt": "",
      "rawMarkdownBody": "Like many things, the `this` keyword in JavaScript is something I learned to work with and around, long before I gained any proper understanding of how it works. Recently I was asked to describe it and found despite my experience I still strugled to find simple terms. So I thought I'd write down my best attempt.\n\nThere is a special keyword in JavaScript called `this`. It is a reference to an object. This reference is sometimes called a `binding` because it ties the value of `this` to a specific object. What object, and the value of `this`, depends on how and where the function is called.\n\nThe default value of `this` is the `window` object in browsers or `undefined` when in strict mode. \n\nWe can explicitly set what `this` points by executing functions with methods like `call`, `bind` and `apply`. \n\n```javascript\nfunction myFunc() {\n  return this;\n}\n\nmyFunc() // window\nvar myBinding = myFunc.bind('hello'); // .bind() returns a new function with a different binding\nmyBinding(); // 'hello'\nmyFunc.call('hello'); // 'hello'\nmyFunc.apply('hello'); // 'hello'\n```\n\nWhat confuses me sometimes is JavaScript will implicity bind `this` if the function is called within an context owning object. This means when a function is a property of a context owning object, the value of `this` will be the object itself. In the example below the owning object, and therfore value of `this` is `myObject`:  \n\n```javascript\nfunction myFunc() {\n  return this.greeting;\n}\n\nvar myObject = {\n\tgreeting: 'hello',\n  function: myFunc\n}\n\nconsole.log(myObject.function()); // 'hello'\n```\n\nCalling a function with the keyword `new` will result in a new empty object bound to `this`. \n\n```javascript\nfunction myFunc(something) {\n\tthis.thing = something;\n\treturn this.thing;\n}\n\nconsole.log(new myFunc('something'));\n```\n\nThis has been a very short introduction that covers only basic information. If you want to know more I was inspired to attempt my own explaination after reading Willian Martins, [Taming this In JavaScript With Bind Operator](https://www.smashingmagazine.com/2018/10/taming-this-javascript-bind-operator/) . I could also not write about `this` without recommending Kyle Simpson's explaination in [You Don't Know JavaScript](https://github.com/getify/You-Dont-Know-JS/blob/master/this%20%26%20object%20prototypes/ch2.md), especially the [TLDR](https://github.com/getify/You-Dont-Know-JS/blob/master/this%20%26%20object%20prototypes/ch2.md#review-tldr).\n\n"
    },
    "356913e5-6f2d-5cb4-a897-f1a3eb269adf": {
      "id": "356913e5-6f2d-5cb4-a897-f1a3eb269adf",
      "children": [],
      "parent": "70e1f972-b4fb-5bc5-a537-7dd452c62767",
      "internal": {
        "content": "A bunch of interesting techniques for using SVG to make unique responsive components.",
        "type": "MarkdownRemark",
        "contentDigest": "6781f5ac043f17780c97319f3ba569a3",
        "owner": "gatsby-transformer-remark"
      },
      "frontmatter": {
        "title": ""
      },
      "excerpt": "",
      "rawMarkdownBody": "A bunch of interesting techniques for using SVG to make unique responsive components."
    },
    "a922708e-f857-56ad-826b-f41c58cc739e": {
      "id": "a922708e-f857-56ad-826b-f41c58cc739e",
      "children": [],
      "parent": "c48f80ac-3145-53fd-8f4b-f7a2cb05de16",
      "internal": {
        "content": "I think many of us are not using SVG to its full potential. I often see SVG used as an alternative image format or as a simple solution for icons, and whilst it's great for these things, it's also a lot more than that. SVG can solve problems that HTML and CSS alone can't. It has responsive properties that go beyond vector scaling, such as control over aspect ratio, embedded CSS and a unique co-ordinate system. I rarely see all the features of SVG used together to create unique responsive solutions.\n\nPerhaps the full potential of SVG on the web remains untapped because to get the most out of it, you need care a little more about the mark-up. I'm not advocating writing SVG by hand, but the level of control that most graphics applications give us is not adequate for implementing anything more than basic techniques.\n\nHow we overcome this I'm not sure, unlike HTML we need a graphical interface for producing SVG images, but SVG is also a mark-up language, and there are good reasons why we use text editors for HTML. Perhaps SVG will always need both designers and developers to get the most out of it.\n\nWith that in mind, let's take some things you can do with SVG that you might not have seen, and perhaps not even considered possible.\n\n## Complex positioning\n\nSVG has a complex positioning and coordinate system that is entirely different from the box model that you are (hopefully) familiar with. To gain a full understanding of it, I recommend reading Sara Soueidan's excellent articles on [Understanding SVG Coordinate Systems and Transformations](https://sarasoueidan.com/blog/svg-coordinate-systems/) as well as Amelia Bellamy-Royd's, [How to Scale SVG](https://css-tricks.com/scale-svg/). I couldn't match the detail provided in these articles, so I choose not to try.\n\nIf you think of SVG like any other image format, to be responsive, it should stretch and scale to fill the available space. You should not be surprised to learn that \"Scalable Vector Graphics\" are great at this. Amelia's article demonstrated that, depending on the `viewBox` and `preserveAspectRatio` attributes, we can exercise more precise control over how SVG images scale.\n\nTake a look at this example of an ornate border and try to imaging how you might do this with only CSS and HTML.\n\n\n<div class=\"js-resizable\">\n  <img class=\"js-resizable-image\" src=\"/demos/svg/simple-border.svg\">\n</div>\n\n\nDig into the SVG source and you will see we're taking advantage of symbols, masks, transformations and other goodness that HTML and CSS have only ever dreamt of. It works great, but it is by no means the extent of the responsive capabilities of SVG.\n\nOne interesting and little known fact about SVG is that the `viewBox` is an optional attribute. Did you also know that you can nest SVG elements and establish a new coordinate system on nested SVG and symbol elements, by applying a new `viewBox`?\n\nWith that in mind, imaging for a minute that this is not an image on the web. How might a traditional artist adapt this design for a different sized page? They would probably not just uniformly scale the design. More likely, the corner flourishes and diamond would remain roughly same size and the length of the line connecting them would be reduced.\n\n<div class=\"js-resizable\">\n  <img class=\"js-resizable-image\" src=\"/demos/svg/complex-border.svg\">\n</div>\n\nWe can do this with SVG! Compare this to the prior example, the difference is particularly notable on smaller screens.\n\nThis type of responsive design is particularly suited to SVG and with a little understanding of the SVG coordinates system you can break out of the limitations of the box model.\n\n## Art directed responsive images with SVG\n\nAlthough the [picture element](http://caniuse.com/#feat=picture) and [srcset](http://caniuse.com/#feat=srcset) are now widely supported (with the exception of Internet Explorer), did you know you can create responsive art-directed images using SVG?\n\n<div class=\"js-resizable\">\n  <img class=\"js-resizable-image\" src=\"/demos/svg/ad-main.svg\" >\n</div>\n\nResize your window to see how it works.\n\nYou may recognise the image from an [influential blog post](http://cloudinary.com/blog/automatically_art_directed_responsive_images) and [example by Eric Portis](https://ericportis.com/etc/cloudinary/). Although it looks the same, this example is achieved using only SVG and CSS.\n\nTo achieve this technique I'm loading an SVG as the `src` attribute for an image. The SVG itself has an image element and embedded CSS that resizes and reframes the image using media queries.\n\nThe image element inside the SVG, has a base64 encoded dataURI. I'm using a dataURI because when loading external SVG files in an image element, such as via `<image src=\"image.svg\" >` they will not load additional linked resources. This is perhaps to prevent recursive references or for network performance reasons. Either way, to get around this limitation I'm using a dataURI.\n\n**Note:** Thanks to Amelia Bellamy-Royds for letting me know that external resources will load in SVG files referenced via an `object` or `iframe` element.\n\nCSS is global, so when embedding SVG in HTML (inline SVG), any CSS in the HTML document can also style SVG elements. Likewise `<style>` tags embedded in the SVG, when used inline, will not be scoped to the SVG element. They will be treated just like any other `<style>` tag found in the HTML body, that is, applied globally.\n\nDevelopers often take advantage of this, using SVG sprites and CSS to change the colour of icons. Some developers complain that they cannot use CSS to style SVG elements that are not used inline.\n\nI agree that this would be handy in some cases, but if you think about it the other way around many people are failing to take advantage of the fact that a referenced SVG (not inline) has its own document context.\n\nTherefore, CSS in referenced SVG files, is scoped. This includes media queries! I can take advantage of that fact to create a responsive image that is aware of its own width and adjusts display accordingly. The size of the page doesn't matter, it's responsiveness is relative to the size of the image itself. This works the same for backgrounds and other methods of referencing external SVG.\n\nOne disadvantage this technique has over `srcset` or the `picture` element is that everything in the SVG will be loaded, there is no opportunity to prioritise loading only required assets first, depending on the user agent.\n\nOn the flip side, this technique works anywhere SVG does including in IE and offers the opportunity for customisation beyond just supplying a different source image. For example you could apply different filters for particular image sizes or anything else you can do with CSS and SVG.\n\nDepending on the situation, this technique will not necessarily result in a larger download. So be clever and creative; use this technique where it makes sense.\n\n## Adaptive images\n\nWe've learnt that media queries in referenced SVG will be bound to the width of the image or element they are used on. This sounds a lot like [container queries](https://alistapart.com/article/container-queries-once-more-unto-the-breach), one of the most requested browser features over the last few years, and in many ways (although not all), it works now in SVG.\n\nI've seen very few examples that take advantage of this, the icon library [iconic](https://useiconic.com/) is one that comes to mind. But I don't think I've seen anyone use it to its full potential yet.\n\nHow about something that's not an icon? Let's update my ornate border example to resize and even remove the corner flourishes, in response to the available width.\n\n<div class=\"js-resizable\">\n  <img class=\"js-resizable-image\" src=\"/demos/svg/adaptive-border.svg\" >\n</div>\n\nThere is no way that I know of to achieve this with just CSS and HTML. Why aren't we doing much more of this on the web?!\n\n## Container queries?\n\nHow far can we push this? Pretty far is the answer! But as always, with some caveats and limitations.\n\nLet's try and reproduce another influential example. Remember Mat Marquis' article [Container Queries: Once More Unto the Breach](https://alistapart.com/article/container-queries-once-more-unto-the-breach)? Do you think we can do that with SVG?\n\n<div class=\"js-resizable\" style=\"min-width: 450px !important;\">\n  <img class=\"js-resizable-image\" src=\"/demos/svg/cq-main.svg\">\n</div>\n\n**Note**: Sorry this demo is a little buggy in Firefox &amp; IE.\n\n### Caveats and limitations\n\nNow that you are hopefully excited, I'm sorry to say this example is intended to demonstrate some limitations. It is obviously not the type of content you would normally use an image for, and this technique does not change that. It is definitely not accessible. On top of that, I've detailed some further technical limitations below.\n\n#### Setting X & Y attributes with CSS\n\nFor the most part setting and changing X and Y attributes of SVG elements with CSS will not work. Although this will be fully possible in SVG 2.0, for now there is an exception to this rule in Chrome with regard  to `<image>` elements. It is sometimes possible to use CSS transforms to manipulate positioning, but you will find this has limitations as well.\n\n#### External sources in embedded SVG\n\nAs I mentioned in the earlier example of responsive art directed images, external SVG files loaded as an `img` source, will not load additional link references in the SVG source. Other limitations require that I use images, so I've used base64 encoded dataURIs.\n\nIn this case I'm encoding additional SVG files as the image source. Each has their own CSS and the ability to be responsive based on their own width. This can get complicated quickly, but it can also be a powerful technique.\n\n#### Changing the height\n\nThe final limitation and the one I could not get around is that setting or changing the height of an SVG with CSS doesn't work! Even if it did, the image in the HTML sets its height based on the SVG attribute value only. I doubt the image would resize when an internal media query changes the height of the resource. It's like the SVG would have to reach up into the parent context and notify it of a change in height. This is the same for other methods of embedding external SVG.\n\nThere's still plenty you can do, given these limitations.\n\n## Time of discovery\n\nEvery new technology has limitations, and the web has many. Because of this, I think we often give ourselves perceived limitations, based on our past experience. In this case it's easy to approach SVG with the same mindset as HTML and CSS, because \"I know how images work on the web\".\n\nWhen we do this it's easy to miss opportunities to explore new and creative techniques. The examples I've demonstrated, probably only scratch the surface of unique possibilities with SVG. I hope I've got you thinking and I would love to see more examples.\n\nOne final though, it's important to be wary of perceived limitations, not just with SVG. This is especially true at the moment with a wealth of new layout features landing in browsers soon. It will require new perspectives to take advantage of new opportunities. Practice this now, there's never been a better time in the history of the web for creativity and discovery.\n",
        "type": "MarkdownRemark",
        "contentDigest": "a114cb3d6e06249779281171103e5ad4",
        "owner": "gatsby-transformer-remark"
      },
      "frontmatter": {
        "title": ""
      },
      "excerpt": "",
      "rawMarkdownBody": "I think many of us are not using SVG to its full potential. I often see SVG used as an alternative image format or as a simple solution for icons, and whilst it's great for these things, it's also a lot more than that. SVG can solve problems that HTML and CSS alone can't. It has responsive properties that go beyond vector scaling, such as control over aspect ratio, embedded CSS and a unique co-ordinate system. I rarely see all the features of SVG used together to create unique responsive solutions.\n\nPerhaps the full potential of SVG on the web remains untapped because to get the most out of it, you need care a little more about the mark-up. I'm not advocating writing SVG by hand, but the level of control that most graphics applications give us is not adequate for implementing anything more than basic techniques.\n\nHow we overcome this I'm not sure, unlike HTML we need a graphical interface for producing SVG images, but SVG is also a mark-up language, and there are good reasons why we use text editors for HTML. Perhaps SVG will always need both designers and developers to get the most out of it.\n\nWith that in mind, let's take some things you can do with SVG that you might not have seen, and perhaps not even considered possible.\n\n## Complex positioning\n\nSVG has a complex positioning and coordinate system that is entirely different from the box model that you are (hopefully) familiar with. To gain a full understanding of it, I recommend reading Sara Soueidan's excellent articles on [Understanding SVG Coordinate Systems and Transformations](https://sarasoueidan.com/blog/svg-coordinate-systems/) as well as Amelia Bellamy-Royd's, [How to Scale SVG](https://css-tricks.com/scale-svg/). I couldn't match the detail provided in these articles, so I choose not to try.\n\nIf you think of SVG like any other image format, to be responsive, it should stretch and scale to fill the available space. You should not be surprised to learn that \"Scalable Vector Graphics\" are great at this. Amelia's article demonstrated that, depending on the `viewBox` and `preserveAspectRatio` attributes, we can exercise more precise control over how SVG images scale.\n\nTake a look at this example of an ornate border and try to imaging how you might do this with only CSS and HTML.\n\n\n<div class=\"js-resizable\">\n  <img class=\"js-resizable-image\" src=\"/demos/svg/simple-border.svg\">\n</div>\n\n\nDig into the SVG source and you will see we're taking advantage of symbols, masks, transformations and other goodness that HTML and CSS have only ever dreamt of. It works great, but it is by no means the extent of the responsive capabilities of SVG.\n\nOne interesting and little known fact about SVG is that the `viewBox` is an optional attribute. Did you also know that you can nest SVG elements and establish a new coordinate system on nested SVG and symbol elements, by applying a new `viewBox`?\n\nWith that in mind, imaging for a minute that this is not an image on the web. How might a traditional artist adapt this design for a different sized page? They would probably not just uniformly scale the design. More likely, the corner flourishes and diamond would remain roughly same size and the length of the line connecting them would be reduced.\n\n<div class=\"js-resizable\">\n  <img class=\"js-resizable-image\" src=\"/demos/svg/complex-border.svg\">\n</div>\n\nWe can do this with SVG! Compare this to the prior example, the difference is particularly notable on smaller screens.\n\nThis type of responsive design is particularly suited to SVG and with a little understanding of the SVG coordinates system you can break out of the limitations of the box model.\n\n## Art directed responsive images with SVG\n\nAlthough the [picture element](http://caniuse.com/#feat=picture) and [srcset](http://caniuse.com/#feat=srcset) are now widely supported (with the exception of Internet Explorer), did you know you can create responsive art-directed images using SVG?\n\n<div class=\"js-resizable\">\n  <img class=\"js-resizable-image\" src=\"/demos/svg/ad-main.svg\" >\n</div>\n\nResize your window to see how it works.\n\nYou may recognise the image from an [influential blog post](http://cloudinary.com/blog/automatically_art_directed_responsive_images) and [example by Eric Portis](https://ericportis.com/etc/cloudinary/). Although it looks the same, this example is achieved using only SVG and CSS.\n\nTo achieve this technique I'm loading an SVG as the `src` attribute for an image. The SVG itself has an image element and embedded CSS that resizes and reframes the image using media queries.\n\nThe image element inside the SVG, has a base64 encoded dataURI. I'm using a dataURI because when loading external SVG files in an image element, such as via `<image src=\"image.svg\" >` they will not load additional linked resources. This is perhaps to prevent recursive references or for network performance reasons. Either way, to get around this limitation I'm using a dataURI.\n\n**Note:** Thanks to Amelia Bellamy-Royds for letting me know that external resources will load in SVG files referenced via an `object` or `iframe` element.\n\nCSS is global, so when embedding SVG in HTML (inline SVG), any CSS in the HTML document can also style SVG elements. Likewise `<style>` tags embedded in the SVG, when used inline, will not be scoped to the SVG element. They will be treated just like any other `<style>` tag found in the HTML body, that is, applied globally.\n\nDevelopers often take advantage of this, using SVG sprites and CSS to change the colour of icons. Some developers complain that they cannot use CSS to style SVG elements that are not used inline.\n\nI agree that this would be handy in some cases, but if you think about it the other way around many people are failing to take advantage of the fact that a referenced SVG (not inline) has its own document context.\n\nTherefore, CSS in referenced SVG files, is scoped. This includes media queries! I can take advantage of that fact to create a responsive image that is aware of its own width and adjusts display accordingly. The size of the page doesn't matter, it's responsiveness is relative to the size of the image itself. This works the same for backgrounds and other methods of referencing external SVG.\n\nOne disadvantage this technique has over `srcset` or the `picture` element is that everything in the SVG will be loaded, there is no opportunity to prioritise loading only required assets first, depending on the user agent.\n\nOn the flip side, this technique works anywhere SVG does including in IE and offers the opportunity for customisation beyond just supplying a different source image. For example you could apply different filters for particular image sizes or anything else you can do with CSS and SVG.\n\nDepending on the situation, this technique will not necessarily result in a larger download. So be clever and creative; use this technique where it makes sense.\n\n## Adaptive images\n\nWe've learnt that media queries in referenced SVG will be bound to the width of the image or element they are used on. This sounds a lot like [container queries](https://alistapart.com/article/container-queries-once-more-unto-the-breach), one of the most requested browser features over the last few years, and in many ways (although not all), it works now in SVG.\n\nI've seen very few examples that take advantage of this, the icon library [iconic](https://useiconic.com/) is one that comes to mind. But I don't think I've seen anyone use it to its full potential yet.\n\nHow about something that's not an icon? Let's update my ornate border example to resize and even remove the corner flourishes, in response to the available width.\n\n<div class=\"js-resizable\">\n  <img class=\"js-resizable-image\" src=\"/demos/svg/adaptive-border.svg\" >\n</div>\n\nThere is no way that I know of to achieve this with just CSS and HTML. Why aren't we doing much more of this on the web?!\n\n## Container queries?\n\nHow far can we push this? Pretty far is the answer! But as always, with some caveats and limitations.\n\nLet's try and reproduce another influential example. Remember Mat Marquis' article [Container Queries: Once More Unto the Breach](https://alistapart.com/article/container-queries-once-more-unto-the-breach)? Do you think we can do that with SVG?\n\n<div class=\"js-resizable\" style=\"min-width: 450px !important;\">\n  <img class=\"js-resizable-image\" src=\"/demos/svg/cq-main.svg\">\n</div>\n\n**Note**: Sorry this demo is a little buggy in Firefox &amp; IE.\n\n### Caveats and limitations\n\nNow that you are hopefully excited, I'm sorry to say this example is intended to demonstrate some limitations. It is obviously not the type of content you would normally use an image for, and this technique does not change that. It is definitely not accessible. On top of that, I've detailed some further technical limitations below.\n\n#### Setting X & Y attributes with CSS\n\nFor the most part setting and changing X and Y attributes of SVG elements with CSS will not work. Although this will be fully possible in SVG 2.0, for now there is an exception to this rule in Chrome with regard  to `<image>` elements. It is sometimes possible to use CSS transforms to manipulate positioning, but you will find this has limitations as well.\n\n#### External sources in embedded SVG\n\nAs I mentioned in the earlier example of responsive art directed images, external SVG files loaded as an `img` source, will not load additional link references in the SVG source. Other limitations require that I use images, so I've used base64 encoded dataURIs.\n\nIn this case I'm encoding additional SVG files as the image source. Each has their own CSS and the ability to be responsive based on their own width. This can get complicated quickly, but it can also be a powerful technique.\n\n#### Changing the height\n\nThe final limitation and the one I could not get around is that setting or changing the height of an SVG with CSS doesn't work! Even if it did, the image in the HTML sets its height based on the SVG attribute value only. I doubt the image would resize when an internal media query changes the height of the resource. It's like the SVG would have to reach up into the parent context and notify it of a change in height. This is the same for other methods of embedding external SVG.\n\nThere's still plenty you can do, given these limitations.\n\n## Time of discovery\n\nEvery new technology has limitations, and the web has many. Because of this, I think we often give ourselves perceived limitations, based on our past experience. In this case it's easy to approach SVG with the same mindset as HTML and CSS, because \"I know how images work on the web\".\n\nWhen we do this it's easy to miss opportunities to explore new and creative techniques. The examples I've demonstrated, probably only scratch the surface of unique possibilities with SVG. I hope I've got you thinking and I would love to see more examples.\n\nOne final though, it's important to be wary of perceived limitations, not just with SVG. This is especially true at the moment with a wealth of new layout features landing in browsers soon. It will require new perspectives to take advantage of new opportunities. Practice this now, there's never been a better time in the history of the web for creativity and discovery.\n"
    },
    "a24bbccc-aea3-5b6a-8abe-684134d709f1": {
      "id": "a24bbccc-aea3-5b6a-8abe-684134d709f1",
      "children": [],
      "parent": "08c74e4a-4ddb-5ff1-a4a9-3e038bde1a0f",
      "internal": {
        "content": "New design, content and some new CSS tricks on my website.",
        "type": "MarkdownRemark",
        "contentDigest": "dbc7308cc402d0daf3bff5a3a03f5700",
        "owner": "gatsby-transformer-remark"
      },
      "frontmatter": {
        "title": ""
      },
      "excerpt": "",
      "rawMarkdownBody": "New design, content and some new CSS tricks on my website."
    },
    "a90a4e74-2696-551b-883f-de669a903acd": {
      "id": "a90a4e74-2696-551b-883f-de669a903acd",
      "children": [],
      "parent": "7e6d88cf-aae1-584d-9159-208ff5a8e1b9",
      "internal": {
        "content": "Like many people, I decided to redesign my website for 2018. In addition to updating the visual design, I changed the way I publish content. I want to share more than just long-form blog post, so expect to see CodePen collections, short lists, videos and links to content I've published elsewhere. \n\nOne of the things I am really excited about is the chance to share content and resources created by friends in the community. That's why I created the \"Not Ads\" section I want to post new stuff here every couple of weeks so if you have something you want me to share [email me](mailto:mike@madebymike.com.au), but remember they are \"not ads\". \n\nI've also made some technical updates. The site is now making extensive use of CSS Grid and Custom Properties and I want to share a few tricks I've learnt during the development process.\n\n## Tricks with CSS Grid\n\nI've used a number of a number of different grids on the site, but by far the most complicated is the list of cards on the homepage. Although it looks relatively simple, it's actually quite a complicated layout problem. \n\nI wanted to auto-fill a region of the grid while having a full height item in the left-hand column that spans all the rows.\n\n<img data-src=\"/img/grid-trick.png\" alt=\"A CSS grid trick\">\n\nMy first idea was to make a narrow container for the left column and a wide container for the right columns placing different grids in each of these containers. This could have worked, except my cards have variable widths and the number of columns on the right-hand side is variable depending on the space available. This means the number of rows is also variable.\n\nI also wanted all columns to have the same width and I quickly realised to achieve this with variable widths, the left column had to be part of the same grid.\n\nLet's look at the requirements for the grid: There can be any number of cards in the grid, the cards can be different sizes and might span multiple columns or rows. Columns also have a minimum width and the number of columns varies depending on the space available. \n\nTo create a responsive grid like this, we can use the `grid-template-columns` along with the `repeat()`, `minmax()` and the `auto-fit` keyword. It might look something like this:\n\n```css\n.card-grid {\n  grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));\n  grid-gap: 10px;\n}\n.card-wide {\n  grid-column: span 2;\n}\n.card-tall {\n  grid-row: span 2;\n}\n.card-large {\n  grid-row: span 2;\n  grid-column: span 2;\n}\n```\n\nThe first item in the grid is now the left column. This special item is both a grid-item and a grid-container. It has a grid with a single column that can contain other grid items. The mark-up looks something like this:\n\n```html\n<div class=\"grid\">\n   <div class=\"grid-item special-item\">\n    <div class=\"grid-item other-item\"></div>\n    <div class=\"grid-item other-item\"></div>\n   </div>\n   <div class=\"grid-item\"></div>\n   <div class=\"grid-item\"></div>\n   <div class=\"grid-item\"></div>\n</div>\n```\n\nBy default the left column with take up a single grid cell in the grid. Just like any other item, it spans a single row and other items in the gird can be placed beside and beneath this item.\n\nWith the tall and large cards we created earlier, we already know how to make grid items span multiple columns and rows. We could make the left column span the full height using: `grid-row: span 5;`, but this grid is responsive. When the number of columns is reduced, the number of rows increases. \n\nThis is when I thought what if I make the item span 999 rows? This meant 999 rows were added to the grid. Rows without content have a height of 0, but the `grid-gap` meant I had 9,990 pixels of whitespace beneath the grid. I like a little whitespace but not that much.\n\nLuckily margins collapse so I swapped the `grid-gap` for margins on individual grid-items. I did the old trick of adding a negative left and right margin on the grid container, equal to the margin on the grid-items. This means everything in the grid will align with other content on the page. The final result is something like this:\n\n```css\n.card-grid {\n  grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));\n}\n.card {\n  margin: 10px;\n}\n.left-col {\n  display: grid;\n  grid-row-start: 1;\n  grid-row-end: 999;\n  order: 0;\n  align-items: start;\n}\n```\n\nI added a few media queries and adjusted the `grid-template-columns` slightly for different layout on smaller screens. I added `order: 0;` to the left column because this meant I could change the DOM order and move it underneath the main content on mobile. This also makes sense for screen-readers as it's secondary content.\n\nI've isolated a simple demo in a CodePen so you can experiment with or copy this technique. \n\n<p data-height=\"495\" data-theme-id=\"light\" data-slug-hash=\"ppwPBo\" data-default-tab=\"html,result\" data-user=\"MadeByMike\" data-embed-version=\"2\" data-pen-title=\"A CSS grid trick\" class=\"codepen\">See the Pen <a href=\"https://codepen.io/MadeByMike/pen/ppwPBo/\">A CSS grid trick</a> by Mike (<a href=\"https://codepen.io/MadeByMike\">@MadeByMike</a>) on <a href=\"https://codepen.io\">CodePen</a>.</p>\n<script async src=\"https://production-assets.codepen.io/assets/embed/ei.js\"></script> \n\nIn the end, I was very happy with this result. It's definitely a bit of a hack but it's a nice one.\n\n## Visited link checklists\n\nYou might have noticed that some of the lists I've published have checkboxes next to them. They are not interactive but if you visit one of the pages on the list you will see the item become checked.\n\n<img data-src=\"/img/check-list.png\">\n\nThis is a nifty little design feature that I am very happy with. It's just an elaborate visited `:visited` style, but the technique is far from simple. \n\nMy idea was to create a checkbox style with CSS, then toggle the opacity of the tick depending on the :visited state. But visited styles are extremely restrictive. MDN does a great job of [explaining these restrictions](https://developer.mozilla.org/en-US/docs/Web/CSS/%3Avisited). In short, you can only style color values, but this includes SVG `fill` and `stroke`.\n\nMy idea became to use an inline SVG. Did you know that you can set a `fill` property on an HTML element and that an inline SVG can inherit this color?\n\n```css\na {\n  fill: rgba(0,0,0,0);\n}\n\na:visited {\n  fill: rgba(0,0,0,1);\n}\n```\n\n```html\n<li>\n  <a href=\"...\">\n    <svg>\n      <use xlink:href=\"#icon-tick\"></use>\n    </svg>\n    Check Link</a>\n</li>\n```\n\nI knew I couldn't change the display or the opacity so my plan was to change the fill on the tick mark from `rgba(0,0,0,0)` to `rgba(0,0,0,1)`. This should work because I am only changing the color right? I was wrong! CSS was not going take any of my nonsense.\n\nAnother interesting restriction on styling `:visited` links is that the color and fill will retain the original alpha value. If you are interested in the reason behind these restrictions [read the MDN explaination](https://developer.mozilla.org/en-US/docs/Web/CSS/Privacy_and_the_:visited_selector).\n\nOk, plan C. What if I make the fill of the tick, match the background color? The only problem with this approach was that the tick would be visible over the top of the box resulting in this: <img alt=\"check-mark with broken border\" data-src=\"/img/check.png\">\n\nThat's far from the end of the world, but the broken borders on the box were going to annoy me and the solution was simple. When visible the tick is almost the same color as the border, so I can place the box over the top of the tick symbol. Even though the border will be drawn on the top, it won't be visible.\n\nThe final result looks something like this:\n\n<p data-height=\"279\" data-theme-id=\"light\" data-slug-hash=\"XVEoOX\" data-default-tab=\"html,result\" data-user=\"MadeByMike\" data-embed-version=\"2\" data-pen-title=\"CSS :visited checklist\" class=\"codepen\">See the Pen <a href=\"https://codepen.io/MadeByMike/pen/XVEoOX/\">CSS :visited checklist</a> by Mike (<a href=\"https://codepen.io/MadeByMike\">@MadeByMike</a>) on <a href=\"https://codepen.io\">CodePen</a>.</p>\n<script async src=\"https://production-assets.codepen.io/assets/embed/ei.js\"></script>\n\nIt takes a little effort to get nice visited styles but I think it can be a helpful little bit of UX.",
        "type": "MarkdownRemark",
        "contentDigest": "a0f3ba8de4ef4c0be23e2fc816789f5f",
        "owner": "gatsby-transformer-remark"
      },
      "frontmatter": {
        "title": ""
      },
      "excerpt": "",
      "rawMarkdownBody": "Like many people, I decided to redesign my website for 2018. In addition to updating the visual design, I changed the way I publish content. I want to share more than just long-form blog post, so expect to see CodePen collections, short lists, videos and links to content I've published elsewhere. \n\nOne of the things I am really excited about is the chance to share content and resources created by friends in the community. That's why I created the \"Not Ads\" section I want to post new stuff here every couple of weeks so if you have something you want me to share [email me](mailto:mike@madebymike.com.au), but remember they are \"not ads\". \n\nI've also made some technical updates. The site is now making extensive use of CSS Grid and Custom Properties and I want to share a few tricks I've learnt during the development process.\n\n## Tricks with CSS Grid\n\nI've used a number of a number of different grids on the site, but by far the most complicated is the list of cards on the homepage. Although it looks relatively simple, it's actually quite a complicated layout problem. \n\nI wanted to auto-fill a region of the grid while having a full height item in the left-hand column that spans all the rows.\n\n<img data-src=\"/img/grid-trick.png\" alt=\"A CSS grid trick\">\n\nMy first idea was to make a narrow container for the left column and a wide container for the right columns placing different grids in each of these containers. This could have worked, except my cards have variable widths and the number of columns on the right-hand side is variable depending on the space available. This means the number of rows is also variable.\n\nI also wanted all columns to have the same width and I quickly realised to achieve this with variable widths, the left column had to be part of the same grid.\n\nLet's look at the requirements for the grid: There can be any number of cards in the grid, the cards can be different sizes and might span multiple columns or rows. Columns also have a minimum width and the number of columns varies depending on the space available. \n\nTo create a responsive grid like this, we can use the `grid-template-columns` along with the `repeat()`, `minmax()` and the `auto-fit` keyword. It might look something like this:\n\n```css\n.card-grid {\n  grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));\n  grid-gap: 10px;\n}\n.card-wide {\n  grid-column: span 2;\n}\n.card-tall {\n  grid-row: span 2;\n}\n.card-large {\n  grid-row: span 2;\n  grid-column: span 2;\n}\n```\n\nThe first item in the grid is now the left column. This special item is both a grid-item and a grid-container. It has a grid with a single column that can contain other grid items. The mark-up looks something like this:\n\n```html\n<div class=\"grid\">\n   <div class=\"grid-item special-item\">\n    <div class=\"grid-item other-item\"></div>\n    <div class=\"grid-item other-item\"></div>\n   </div>\n   <div class=\"grid-item\"></div>\n   <div class=\"grid-item\"></div>\n   <div class=\"grid-item\"></div>\n</div>\n```\n\nBy default the left column with take up a single grid cell in the grid. Just like any other item, it spans a single row and other items in the gird can be placed beside and beneath this item.\n\nWith the tall and large cards we created earlier, we already know how to make grid items span multiple columns and rows. We could make the left column span the full height using: `grid-row: span 5;`, but this grid is responsive. When the number of columns is reduced, the number of rows increases. \n\nThis is when I thought what if I make the item span 999 rows? This meant 999 rows were added to the grid. Rows without content have a height of 0, but the `grid-gap` meant I had 9,990 pixels of whitespace beneath the grid. I like a little whitespace but not that much.\n\nLuckily margins collapse so I swapped the `grid-gap` for margins on individual grid-items. I did the old trick of adding a negative left and right margin on the grid container, equal to the margin on the grid-items. This means everything in the grid will align with other content on the page. The final result is something like this:\n\n```css\n.card-grid {\n  grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));\n}\n.card {\n  margin: 10px;\n}\n.left-col {\n  display: grid;\n  grid-row-start: 1;\n  grid-row-end: 999;\n  order: 0;\n  align-items: start;\n}\n```\n\nI added a few media queries and adjusted the `grid-template-columns` slightly for different layout on smaller screens. I added `order: 0;` to the left column because this meant I could change the DOM order and move it underneath the main content on mobile. This also makes sense for screen-readers as it's secondary content.\n\nI've isolated a simple demo in a CodePen so you can experiment with or copy this technique. \n\n<p data-height=\"495\" data-theme-id=\"light\" data-slug-hash=\"ppwPBo\" data-default-tab=\"html,result\" data-user=\"MadeByMike\" data-embed-version=\"2\" data-pen-title=\"A CSS grid trick\" class=\"codepen\">See the Pen <a href=\"https://codepen.io/MadeByMike/pen/ppwPBo/\">A CSS grid trick</a> by Mike (<a href=\"https://codepen.io/MadeByMike\">@MadeByMike</a>) on <a href=\"https://codepen.io\">CodePen</a>.</p>\n<script async src=\"https://production-assets.codepen.io/assets/embed/ei.js\"></script> \n\nIn the end, I was very happy with this result. It's definitely a bit of a hack but it's a nice one.\n\n## Visited link checklists\n\nYou might have noticed that some of the lists I've published have checkboxes next to them. They are not interactive but if you visit one of the pages on the list you will see the item become checked.\n\n<img data-src=\"/img/check-list.png\">\n\nThis is a nifty little design feature that I am very happy with. It's just an elaborate visited `:visited` style, but the technique is far from simple. \n\nMy idea was to create a checkbox style with CSS, then toggle the opacity of the tick depending on the :visited state. But visited styles are extremely restrictive. MDN does a great job of [explaining these restrictions](https://developer.mozilla.org/en-US/docs/Web/CSS/%3Avisited). In short, you can only style color values, but this includes SVG `fill` and `stroke`.\n\nMy idea became to use an inline SVG. Did you know that you can set a `fill` property on an HTML element and that an inline SVG can inherit this color?\n\n```css\na {\n  fill: rgba(0,0,0,0);\n}\n\na:visited {\n  fill: rgba(0,0,0,1);\n}\n```\n\n```html\n<li>\n  <a href=\"...\">\n    <svg>\n      <use xlink:href=\"#icon-tick\"></use>\n    </svg>\n    Check Link</a>\n</li>\n```\n\nI knew I couldn't change the display or the opacity so my plan was to change the fill on the tick mark from `rgba(0,0,0,0)` to `rgba(0,0,0,1)`. This should work because I am only changing the color right? I was wrong! CSS was not going take any of my nonsense.\n\nAnother interesting restriction on styling `:visited` links is that the color and fill will retain the original alpha value. If you are interested in the reason behind these restrictions [read the MDN explaination](https://developer.mozilla.org/en-US/docs/Web/CSS/Privacy_and_the_:visited_selector).\n\nOk, plan C. What if I make the fill of the tick, match the background color? The only problem with this approach was that the tick would be visible over the top of the box resulting in this: <img alt=\"check-mark with broken border\" data-src=\"/img/check.png\">\n\nThat's far from the end of the world, but the broken borders on the box were going to annoy me and the solution was simple. When visible the tick is almost the same color as the border, so I can place the box over the top of the tick symbol. Even though the border will be drawn on the top, it won't be visible.\n\nThe final result looks something like this:\n\n<p data-height=\"279\" data-theme-id=\"light\" data-slug-hash=\"XVEoOX\" data-default-tab=\"html,result\" data-user=\"MadeByMike\" data-embed-version=\"2\" data-pen-title=\"CSS :visited checklist\" class=\"codepen\">See the Pen <a href=\"https://codepen.io/MadeByMike/pen/XVEoOX/\">CSS :visited checklist</a> by Mike (<a href=\"https://codepen.io/MadeByMike\">@MadeByMike</a>) on <a href=\"https://codepen.io\">CodePen</a>.</p>\n<script async src=\"https://production-assets.codepen.io/assets/embed/ei.js\"></script>\n\nIt takes a little effort to get nice visited styles but I think it can be a helpful little bit of UX."
    },
    "bfe81f4d-ec12-55fe-981c-b8606f1d245e": {
      "id": "bfe81f4d-ec12-55fe-981c-b8606f1d245e",
      "children": [],
      "parent": "bc9bf393-6e61-5355-a730-0b2e0916ea12",
      "internal": {
        "content": "Custom Properties have the potential to change how we write and think about CSS.",
        "type": "MarkdownRemark",
        "contentDigest": "ba575789df94cf4945f4dfafe6c0dd5c",
        "owner": "gatsby-transformer-remark"
      },
      "frontmatter": {
        "title": ""
      },
      "excerpt": "",
      "rawMarkdownBody": "Custom Properties have the potential to change how we write and think about CSS."
    },
    "e58a4175-933b-5247-9c96-09ee2cf67200": {
      "id": "e58a4175-933b-5247-9c96-09ee2cf67200",
      "children": [],
      "parent": "62b3e0c8-638d-5b7c-adaf-0a3adbfab453",
      "internal": {
        "content": "CSS Variables (also known as Custom Properties) are now supported in all modern browsers and people are starting to use them in production. This is great but they're different from variables in preprocessors and I've already seen some examples of people using them without considering the advantage they offer.\n\nThey have the potential to change how we write and think about CSS. I thought I'd do a few quick demos that show some good and bad ways to use CSS variables, and how their differences from preprocessors might change how we structure CSS.\n\n## How do they differ?\n\nFirstly how do they differ? The main difference is CSS variables can change. This might not sound surprising, variables typically do change. You might not have thought about it, but variables in preprocessors like Sass are static. Sure, you can update the value of a variable at different points in the compilation process, but when it's rendered to CSS the values are always static.\n\nThis makes variables in preprocessors a great tool for writing DRY (Don't Repeat Yourself) code and manageable CSS. CSS variables on the other hand, can respond to context within the page.\n\nWe can refer to variables as statically or dynamically scoped and CSS variables as dynamically scoped.\n\nIn this instance, dynamically scoped means they are subject to inheritance and the cascade. This is great because you can change the value of a CSS variable inside a media query or when an element matches a CSS selector. Using the same variable we can have different values in different places on the page. You can even read and manipulate CSS variables with JavaScript.\n\nIf you haven't thought of a ton of uses for CSS Variables already you will have by the end of this article. But first let me demonstrate how not to use CSS variables.\n\n## Modular Scale with CSS variables\n\nI'm going to use modular scales as an example. A modular scale is a mathematical scale that can be used as a basis for choosing heading sizes. I like to do this, and I like to choose different scales for small and large screens.\n\nI'm going to use a scale 1.2 for smalls screens and 1.33 for large screens. I don't like maths so I got these values from [modularscale.com](http://www.modularscale.com/) and these are my heading sizes:\n\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">1.2</th>\n<th style=\"text-align:center\">1.33</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">2.488rem</td>\n<td style=\"text-align:center\">4.209rem</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">2.074rem</td>\n<td style=\"text-align:center\">3.157rem</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">1.728rem</td>\n<td style=\"text-align:center\">2.369rem</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">1.44rem</td>\n<td style=\"text-align:center\">1.777rem</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">1.2rem</td>\n<td style=\"text-align:center\">1.333rem</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">1rem</td>\n<td style=\"text-align:center\">1rem</td>\n</tr>\n</tbody>\n</table>\n\n## Not like this...\n\nThis is a perfect situation to use CSS variables. The way I would have approached this with Sass, and how I've seen most people use CSS variables so far, is something like this:\n\n```css\n:root {\n  /* scale for 1.2 */\n  --ms-small-1: 1rem;\n  --ms-small-2: 1.2rem;\n  --ms-small-3: 1.44rem;\n  --ms-small-4: 1.728rem;\n  --ms-small-5: 2.074rem;\n  --ms-small-6: 2.488rem;\n\n  /* scale for 1.33 */\n  --ms-large-1: 1rem;\n  --ms-large-2: 1.333rem;\n  --ms-large-3: 1.777rem;\n  --ms-large-4: 2.369rem;\n  --ms-large-5: 3.157rem;\n  --ms-large-6: 4.209rem;\n}\n```\n\nThis seems fairly logical, We've defined variables for each of the values in each of the different scales. Next I'd expect to see this:\n\n```css\n/* Small scale for small screens: */\nh1 {\n  font-size: var(--ms-small-6);\n}\nh2 {\n  font-size: var(--ms-small-5);\n}\nh3 {\n  font-size: var(--ms-small-4);\n}\nh4 {\n  font-size: var(--ms-small-3);\n}\nh5 {\n  font-size: var(--ms-small-2);\n}\nh6 {\n  font-size: var(--ms-small-1);\n}\n\n/* And large scale for larger screens */\n@media screen and (min-width: 800px) {\n  h1 {\n    font-size: var(--ms-large-6);\n  }\n  h2 {\n    font-size: var(--ms-large-5);\n  }\n  h3 {\n    font-size: var(--ms-large-4);\n  }\n  h4 {\n    font-size: var(--ms-large-3);\n  }\n  h5 {\n    font-size: var(--ms-large-2);\n  }\n  h6 {\n    font-size: var(--ms-large-1);\n  }\n}\n```\n\n<a target=\"_blank\" href=\"https://codepen.io/MadeByMike/pen/dRoLpJ\">This works!</a> More than that, if I want to change any of these values I can do it in one place. That's an even bigger advantage if I'm using variables elsewhere in my CSS.\n\nThis is DRY like Sass and I guess that's better than regular CSS. But we can do better.\n\n## More like this...\n\nThe example above might seem like the most logical way to do things but it's not taking advantage of how CSS variables work. Let's try again, remembering that CSS variables are scoped to the DOM therefore subject to inheritance and the cascade.\n\n```css\n:root {\n  /* scale for 1.2 */\n  --font-size-1: 1rem;\n  --font-size-2: 1.2rem;\n  --font-size-3: 1.44rem;\n  --font-size-4: 1.728rem;\n  --font-size-5: 2.074rem;\n  --font-size-6: 2.488rem;\n}\n\n@media screen and (min-width: 800px) {\n  :root {\n    /* scale for 1.33 */\n    --font-size-1: 1rem;\n    --font-size-2: 1.333rem;\n    --font-size-3: 1.777rem;\n    --font-size-4: 2.369rem;\n    --font-size-5: 3.157rem;\n    --font-size-6: 4.209rem;\n  }\n}\n```\n\nNotice that I have only one set of variables now and not one for each scale. I change the value of the variable depending on the screen size. This indirectly results in two things:\n\n1. I'm forced to name the variables differently (not small or large anymore)\n\n1. There is no need for media queries elsewhere in my CSS\n\nI can now use variables directly in my property declarations knowing they will change as required. All the responsive logic is in the variable. The rest of my CSS looks like this:\n\n```css\nh1 {\n  font-size: var(--font-size-6);\n}\nh2 {\n  font-size: var(--font-size-5);\n}\nh3 {\n  font-size: var(--font-size-4);\n}\nh4 {\n  font-size: var(--font-size-3);\n}\nh5 {\n  font-size: var(--font-size-2);\n}\nh6 {\n  font-size: var(--font-size-1);\n}\n```\n\nThe example above demonstrates a better way of writing CSS with variables. Now let's see if we can define some of these techniques in more detail.\n\n## Techniques for organising code with CSS variables\n\nVariables have the potential to change how we organise and structure CSS, especially in relation to responsive design.\n\n### Separate logic from design\n\nThe main advantage is we now have the ability to fully separate logic from design. Effectively this means separating variable declarations from property declarations.\n\n```css\n/* This is a variable declaration */\n.thing {\n  --my-var: red;\n}\n/* This is a property declaration */\n.thing {\n  background: var(--my-var);\n}\n```\n\nMy view is you should probably keep variable declarations and property declaration separate. Separating variables from the rest of the declarations is considered good practice when working with preprocessors. This shouldn't change when working with CSS variables.\n\n### Change the value not the variable\n\nIn most cases, **I'd now consider it code smell if a media query or CSS selector swaps one variable for another**. Rather than swapping variables it's better to define one variable, set its initial value and change it with a selector or media query.\n\n### If it changes it's a variable\n\n**I'm convinced that in almost all cases, responsive design logic should now be contained in variables**. There is a strong argument too, that when changing any value, whether in a media query or an element scope, it belongs in a variable. If it changes, it is by definition a variable and this logic should be separated from design.\n\n### Fewer media queries\n\nIt makes sense for all the logic related to variables to be at the top of the document. It's easier to maintain because you can change it in one place and it's easier to read because you can see what is changing without reading the entire stylesheet.\n\nWe couldn't do this with media queries because it fragmented the rules for styling an element across different parts the stylesheet. This was not practical or maintainable, so it made sense group media queries with declarations relating to the sames selectors they changed.\n\nVariables now provide a link between the logic and the implementation of design. **This means in most cases media queries should not be required except for changing CSS variables** and they belong at the top of the document with variable declarations. Above the 'logic fold'.\n\n### Simplify selectors\n\nEffectively separating logic from design also keeps the complexity out of the main property declarations to the point that you can combine selectors.\n\nIn this example I have an aside and a main element with different font-sizes. The aside has a dark background and the main element has a light background.\n\n```css\n/* Default values */\n:root {\n  --font-size: 1.2rem;\n  --background-color: #fff;\n  --text-color: #222;\n}\n/* Values in aside */\naside {\n  --font-size: 1rem;\n  --background-color: #222;\n  --text-color: #fafafa;\n}\n\n/* Same property declarations */\nmain,\naside {\n  font-size: var(--font-size);\n  color: var(--text-color);\n  background-color: var(--background-color);\n}\n```\n\nTry it out: \n\n<p data-height=\"360\" data-theme-id=\"light\" data-slug-hash=\"YQNVox\" data-default-tab=\"css,result\" data-user=\"MadeByMike\" data-embed-version=\"2\" data-pen-title=\"Organising code with CSS Variables\" data-editable=\"true\" class=\"codepen\" data-preview=\"true\">See the Pen <a href=\"https://codepen.io/MadeByMike/pen/YQNVox/\">Organising code with CSS Variables</a> by Mike (<a href=\"https://codepen.io/MadeByMike\">@MadeByMike</a>) on <a href=\"https://codepen.io\">CodePen</a>.</p>\n<script async src=\"https://production-assets.codepen.io/assets/embed/ei.js\"></script>\n\nDespite having a completely different appearance these two elements have exactly the same property declarations.\n\n### Less generic variables\n\nA quick warning about combining selectors with overly generic variables. You might think it's a fun idea to have a universal selector and let variables handle all the logic:\n\n```css\n/* Don't do this. */\n* {\n  display: var(--display);\n  width: var(--width);\n  height: var(--height);\n  border: var(--border);\n  background: var(--background);\n  ...\n}\n```\n\nAlthough fun, we should be careful about reusing variables and combining selectors. CSS variables are subject to the cascade. With the above example, when setting a border on a class `.container` like this:\n\n```css\n.container {\n  --border: solid 2px tomato;\n}\n```\n\nEverything inside that container will inherit the same border. Pretty soon you will be overriding variables on everything, and you don't need a universal `*` selector to fall into this trap.\n\n### Use preprocessors for static variables\n\nDo CSS variables replace preprocessors? No. Using preprocessors still makes sense. It's a good idea to keep all your static variables in Sass (or whatever preprocessor you use).\n\n```scss\n// Static variables:\n$breakpoint-small: 600px;\n$theme-color: rebeccapurple;\n\n// Dynamic variables\n@media screen and (min-width: $breakpoint-small) {\n  body {\n    --background: $theme-color;\n  }\n}\n```\n\nNot only does this denote static variables from dynamic variables in your code, but CSS variables can only be used for property declarations. In other words they can't be used in media queries.\n\nPreprocessor also have color functions, mixins and allows us to keep styles related to different components in different files. All of this stuff still makes sense.\n\n## New approach to responsive design\n\nI think CSS variables offer a completely new approach to responsive design and will challenge some techniques and thinking we've developed over many years. These tips are just a few of the obvious things we need to consider.\n\nI made a <a target=\"_blank\" href=\"https://codepen.io/MadeByMike/pen/dRNqNw/\">detailed example</a> of a simple responsive site that demonstrates some of the techniques and suggestions outlined in this article.\n\n<p data-height=\"510\" data-theme-id=\"light\" data-slug-hash=\"dRNqNw\" data-default-tab=\"css,result\" data-user=\"MadeByMike\" data-embed-version=\"2\" data-pen-title=\"Responsive design with CSS variables\" data-editable=\"true\" class=\"codepen\" data-preview=\"true\">See the Pen <a href=\"https://codepen.io/MadeByMike/pen/dRNqNw/\">Responsive design with CSS variables</a> by Mike (<a href=\"https://codepen.io/MadeByMike\">@MadeByMike</a>) on <a href=\"https://codepen.io\">CodePen</a>.</p>\n<script async src=\"https://production-assets.codepen.io/assets/embed/ei.js\"></script>\n\n<a target=\"_blank\" href=\"https://codepen.io/MadeByMike/pen/dRNqNw/\">Open this demo in CodePen</a> to see how it responds to different viewport sizes.\n\nIf you have any thoughts about how CSS variables might change how we think about, manage and structure CSS please [let me know on Twitter](https://twitter.com/MikeRiethmuller).\n",
        "type": "MarkdownRemark",
        "contentDigest": "a00bcb2e87b73a3e7c9edca17ed1f859",
        "owner": "gatsby-transformer-remark"
      },
      "frontmatter": {
        "title": ""
      },
      "excerpt": "",
      "rawMarkdownBody": "CSS Variables (also known as Custom Properties) are now supported in all modern browsers and people are starting to use them in production. This is great but they're different from variables in preprocessors and I've already seen some examples of people using them without considering the advantage they offer.\n\nThey have the potential to change how we write and think about CSS. I thought I'd do a few quick demos that show some good and bad ways to use CSS variables, and how their differences from preprocessors might change how we structure CSS.\n\n## How do they differ?\n\nFirstly how do they differ? The main difference is CSS variables can change. This might not sound surprising, variables typically do change. You might not have thought about it, but variables in preprocessors like Sass are static. Sure, you can update the value of a variable at different points in the compilation process, but when it's rendered to CSS the values are always static.\n\nThis makes variables in preprocessors a great tool for writing DRY (Don't Repeat Yourself) code and manageable CSS. CSS variables on the other hand, can respond to context within the page.\n\nWe can refer to variables as statically or dynamically scoped and CSS variables as dynamically scoped.\n\nIn this instance, dynamically scoped means they are subject to inheritance and the cascade. This is great because you can change the value of a CSS variable inside a media query or when an element matches a CSS selector. Using the same variable we can have different values in different places on the page. You can even read and manipulate CSS variables with JavaScript.\n\nIf you haven't thought of a ton of uses for CSS Variables already you will have by the end of this article. But first let me demonstrate how not to use CSS variables.\n\n## Modular Scale with CSS variables\n\nI'm going to use modular scales as an example. A modular scale is a mathematical scale that can be used as a basis for choosing heading sizes. I like to do this, and I like to choose different scales for small and large screens.\n\nI'm going to use a scale 1.2 for smalls screens and 1.33 for large screens. I don't like maths so I got these values from [modularscale.com](http://www.modularscale.com/) and these are my heading sizes:\n\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">1.2</th>\n<th style=\"text-align:center\">1.33</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">2.488rem</td>\n<td style=\"text-align:center\">4.209rem</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">2.074rem</td>\n<td style=\"text-align:center\">3.157rem</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">1.728rem</td>\n<td style=\"text-align:center\">2.369rem</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">1.44rem</td>\n<td style=\"text-align:center\">1.777rem</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">1.2rem</td>\n<td style=\"text-align:center\">1.333rem</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">1rem</td>\n<td style=\"text-align:center\">1rem</td>\n</tr>\n</tbody>\n</table>\n\n## Not like this...\n\nThis is a perfect situation to use CSS variables. The way I would have approached this with Sass, and how I've seen most people use CSS variables so far, is something like this:\n\n```css\n:root {\n  /* scale for 1.2 */\n  --ms-small-1: 1rem;\n  --ms-small-2: 1.2rem;\n  --ms-small-3: 1.44rem;\n  --ms-small-4: 1.728rem;\n  --ms-small-5: 2.074rem;\n  --ms-small-6: 2.488rem;\n\n  /* scale for 1.33 */\n  --ms-large-1: 1rem;\n  --ms-large-2: 1.333rem;\n  --ms-large-3: 1.777rem;\n  --ms-large-4: 2.369rem;\n  --ms-large-5: 3.157rem;\n  --ms-large-6: 4.209rem;\n}\n```\n\nThis seems fairly logical, We've defined variables for each of the values in each of the different scales. Next I'd expect to see this:\n\n```css\n/* Small scale for small screens: */\nh1 {\n  font-size: var(--ms-small-6);\n}\nh2 {\n  font-size: var(--ms-small-5);\n}\nh3 {\n  font-size: var(--ms-small-4);\n}\nh4 {\n  font-size: var(--ms-small-3);\n}\nh5 {\n  font-size: var(--ms-small-2);\n}\nh6 {\n  font-size: var(--ms-small-1);\n}\n\n/* And large scale for larger screens */\n@media screen and (min-width: 800px) {\n  h1 {\n    font-size: var(--ms-large-6);\n  }\n  h2 {\n    font-size: var(--ms-large-5);\n  }\n  h3 {\n    font-size: var(--ms-large-4);\n  }\n  h4 {\n    font-size: var(--ms-large-3);\n  }\n  h5 {\n    font-size: var(--ms-large-2);\n  }\n  h6 {\n    font-size: var(--ms-large-1);\n  }\n}\n```\n\n<a target=\"_blank\" href=\"https://codepen.io/MadeByMike/pen/dRoLpJ\">This works!</a> More than that, if I want to change any of these values I can do it in one place. That's an even bigger advantage if I'm using variables elsewhere in my CSS.\n\nThis is DRY like Sass and I guess that's better than regular CSS. But we can do better.\n\n## More like this...\n\nThe example above might seem like the most logical way to do things but it's not taking advantage of how CSS variables work. Let's try again, remembering that CSS variables are scoped to the DOM therefore subject to inheritance and the cascade.\n\n```css\n:root {\n  /* scale for 1.2 */\n  --font-size-1: 1rem;\n  --font-size-2: 1.2rem;\n  --font-size-3: 1.44rem;\n  --font-size-4: 1.728rem;\n  --font-size-5: 2.074rem;\n  --font-size-6: 2.488rem;\n}\n\n@media screen and (min-width: 800px) {\n  :root {\n    /* scale for 1.33 */\n    --font-size-1: 1rem;\n    --font-size-2: 1.333rem;\n    --font-size-3: 1.777rem;\n    --font-size-4: 2.369rem;\n    --font-size-5: 3.157rem;\n    --font-size-6: 4.209rem;\n  }\n}\n```\n\nNotice that I have only one set of variables now and not one for each scale. I change the value of the variable depending on the screen size. This indirectly results in two things:\n\n1. I'm forced to name the variables differently (not small or large anymore)\n\n1. There is no need for media queries elsewhere in my CSS\n\nI can now use variables directly in my property declarations knowing they will change as required. All the responsive logic is in the variable. The rest of my CSS looks like this:\n\n```css\nh1 {\n  font-size: var(--font-size-6);\n}\nh2 {\n  font-size: var(--font-size-5);\n}\nh3 {\n  font-size: var(--font-size-4);\n}\nh4 {\n  font-size: var(--font-size-3);\n}\nh5 {\n  font-size: var(--font-size-2);\n}\nh6 {\n  font-size: var(--font-size-1);\n}\n```\n\nThe example above demonstrates a better way of writing CSS with variables. Now let's see if we can define some of these techniques in more detail.\n\n## Techniques for organising code with CSS variables\n\nVariables have the potential to change how we organise and structure CSS, especially in relation to responsive design.\n\n### Separate logic from design\n\nThe main advantage is we now have the ability to fully separate logic from design. Effectively this means separating variable declarations from property declarations.\n\n```css\n/* This is a variable declaration */\n.thing {\n  --my-var: red;\n}\n/* This is a property declaration */\n.thing {\n  background: var(--my-var);\n}\n```\n\nMy view is you should probably keep variable declarations and property declaration separate. Separating variables from the rest of the declarations is considered good practice when working with preprocessors. This shouldn't change when working with CSS variables.\n\n### Change the value not the variable\n\nIn most cases, **I'd now consider it code smell if a media query or CSS selector swaps one variable for another**. Rather than swapping variables it's better to define one variable, set its initial value and change it with a selector or media query.\n\n### If it changes it's a variable\n\n**I'm convinced that in almost all cases, responsive design logic should now be contained in variables**. There is a strong argument too, that when changing any value, whether in a media query or an element scope, it belongs in a variable. If it changes, it is by definition a variable and this logic should be separated from design.\n\n### Fewer media queries\n\nIt makes sense for all the logic related to variables to be at the top of the document. It's easier to maintain because you can change it in one place and it's easier to read because you can see what is changing without reading the entire stylesheet.\n\nWe couldn't do this with media queries because it fragmented the rules for styling an element across different parts the stylesheet. This was not practical or maintainable, so it made sense group media queries with declarations relating to the sames selectors they changed.\n\nVariables now provide a link between the logic and the implementation of design. **This means in most cases media queries should not be required except for changing CSS variables** and they belong at the top of the document with variable declarations. Above the 'logic fold'.\n\n### Simplify selectors\n\nEffectively separating logic from design also keeps the complexity out of the main property declarations to the point that you can combine selectors.\n\nIn this example I have an aside and a main element with different font-sizes. The aside has a dark background and the main element has a light background.\n\n```css\n/* Default values */\n:root {\n  --font-size: 1.2rem;\n  --background-color: #fff;\n  --text-color: #222;\n}\n/* Values in aside */\naside {\n  --font-size: 1rem;\n  --background-color: #222;\n  --text-color: #fafafa;\n}\n\n/* Same property declarations */\nmain,\naside {\n  font-size: var(--font-size);\n  color: var(--text-color);\n  background-color: var(--background-color);\n}\n```\n\nTry it out: \n\n<p data-height=\"360\" data-theme-id=\"light\" data-slug-hash=\"YQNVox\" data-default-tab=\"css,result\" data-user=\"MadeByMike\" data-embed-version=\"2\" data-pen-title=\"Organising code with CSS Variables\" data-editable=\"true\" class=\"codepen\" data-preview=\"true\">See the Pen <a href=\"https://codepen.io/MadeByMike/pen/YQNVox/\">Organising code with CSS Variables</a> by Mike (<a href=\"https://codepen.io/MadeByMike\">@MadeByMike</a>) on <a href=\"https://codepen.io\">CodePen</a>.</p>\n<script async src=\"https://production-assets.codepen.io/assets/embed/ei.js\"></script>\n\nDespite having a completely different appearance these two elements have exactly the same property declarations.\n\n### Less generic variables\n\nA quick warning about combining selectors with overly generic variables. You might think it's a fun idea to have a universal selector and let variables handle all the logic:\n\n```css\n/* Don't do this. */\n* {\n  display: var(--display);\n  width: var(--width);\n  height: var(--height);\n  border: var(--border);\n  background: var(--background);\n  ...\n}\n```\n\nAlthough fun, we should be careful about reusing variables and combining selectors. CSS variables are subject to the cascade. With the above example, when setting a border on a class `.container` like this:\n\n```css\n.container {\n  --border: solid 2px tomato;\n}\n```\n\nEverything inside that container will inherit the same border. Pretty soon you will be overriding variables on everything, and you don't need a universal `*` selector to fall into this trap.\n\n### Use preprocessors for static variables\n\nDo CSS variables replace preprocessors? No. Using preprocessors still makes sense. It's a good idea to keep all your static variables in Sass (or whatever preprocessor you use).\n\n```scss\n// Static variables:\n$breakpoint-small: 600px;\n$theme-color: rebeccapurple;\n\n// Dynamic variables\n@media screen and (min-width: $breakpoint-small) {\n  body {\n    --background: $theme-color;\n  }\n}\n```\n\nNot only does this denote static variables from dynamic variables in your code, but CSS variables can only be used for property declarations. In other words they can't be used in media queries.\n\nPreprocessor also have color functions, mixins and allows us to keep styles related to different components in different files. All of this stuff still makes sense.\n\n## New approach to responsive design\n\nI think CSS variables offer a completely new approach to responsive design and will challenge some techniques and thinking we've developed over many years. These tips are just a few of the obvious things we need to consider.\n\nI made a <a target=\"_blank\" href=\"https://codepen.io/MadeByMike/pen/dRNqNw/\">detailed example</a> of a simple responsive site that demonstrates some of the techniques and suggestions outlined in this article.\n\n<p data-height=\"510\" data-theme-id=\"light\" data-slug-hash=\"dRNqNw\" data-default-tab=\"css,result\" data-user=\"MadeByMike\" data-embed-version=\"2\" data-pen-title=\"Responsive design with CSS variables\" data-editable=\"true\" class=\"codepen\" data-preview=\"true\">See the Pen <a href=\"https://codepen.io/MadeByMike/pen/dRNqNw/\">Responsive design with CSS variables</a> by Mike (<a href=\"https://codepen.io/MadeByMike\">@MadeByMike</a>) on <a href=\"https://codepen.io\">CodePen</a>.</p>\n<script async src=\"https://production-assets.codepen.io/assets/embed/ei.js\"></script>\n\n<a target=\"_blank\" href=\"https://codepen.io/MadeByMike/pen/dRNqNw/\">Open this demo in CodePen</a> to see how it responds to different viewport sizes.\n\nIf you have any thoughts about how CSS variables might change how we think about, manage and structure CSS please [let me know on Twitter](https://twitter.com/MikeRiethmuller).\n"
    },
    "057e26cd-5d7c-5cdf-b999-b57cb83a3905": {
      "id": "057e26cd-5d7c-5cdf-b999-b57cb83a3905",
      "children": [],
      "parent": "282a38a2-4762-570d-93f5-c47b1e332254",
      "internal": {
        "content": "Contrast is a critical factor in web design, it’s important to get right because it has a strong influence on the visual aesthetic, but it’s especially important for readability and accessibility of text on the page. It’s not a revolutionary idea to suggest that we use Less or Sass to help choose an appropriate text color for a particular background. There are plenty of examples of this, but what is the best way? ",
        "type": "MarkdownRemark",
        "contentDigest": "70226268a8cb0bf0f22d779f38c0981f",
        "owner": "gatsby-transformer-remark"
      },
      "frontmatter": {
        "title": ""
      },
      "excerpt": "",
      "rawMarkdownBody": "Contrast is a critical factor in web design, it’s important to get right because it has a strong influence on the visual aesthetic, but it’s especially important for readability and accessibility of text on the page. It’s not a revolutionary idea to suggest that we use Less or Sass to help choose an appropriate text color for a particular background. There are plenty of examples of this, but what is the best way? "
    },
    "091d4edf-e7c9-5d1b-9ba6-0c6d800249d3": {
      "id": "091d4edf-e7c9-5d1b-9ba6-0c6d800249d3",
      "children": [],
      "parent": "d7f66d94-46ad-5006-b1c3-8d470a427940",
      "internal": {
        "content": "Contrast is a critical factor in web design, it's important to get right because it has a strong influence on the visual aesthetic, but it's especially important for readability and accessibility of text on the page.\n\nIt's not a revolutionary idea to suggest that we use Less or Sass to help choose an appropriate text color for a particular background. There are plenty of examples of this, but what is the best way?\n\nMost examples I've seen work on the general principle that, if a background color is \"brighter\" than 50% give me black text, otherwise give me white text.\n\nBut what does \"brighter\" mean? It depends on the implementation. There are different ways to measure the brightness of a color. Common methods include:\n\n- Lightness - the lightness channel of the HSL color space.\n- Value - the value channel of the HSV color space.\n- Luminance - the perceptual brightness of a color.\n\nRecently I've been experimenting with different implementations of text contrast mixins using Less and Sass. I've created examples for each method and evaluated them on their ability to meet required WCAG2 contrast ratios.\n\nI found none of the simple methods give a guaranteed accessible result, but it is possible using only Less or Sass to create a mixin that will give desired contrast ratios including WCAG2 AA or AAA level.\n\n## HSL based measurement\nUnfortunately it seems **the most common implementation** which is based on lightness, **is the worst visual performer**. In the demo below `#7CFC00` is a particularly good example of where the HSL method fails.\n\n<p data-height=\"266\" data-theme-id=\"6646\" data-slug-hash=\"qjlpF\" data-default-tab=\"result\" class='codepen'>See the Pen <a href='http://codepen.io/MadeByMike/pen/qjlpF/'>Contrast black\\white - lightness (Sass)</a> by Mike (<a href='http://codepen.io/MadeByMike'>@MadeByMike</a>) on <a href='http://codepen.io'>CodePen</a>.</p>\n\n<script async src=\"//codepen.io/assets/embed/ei.js\"></script>\n\nThis example uses Sass, do you prefer Less? [Got you covered](http://codepen.io/MadeByMike/pen/qjlpF)!\n\n## HSV based measurement\nMy feeling is that HSV provides slightly better results than HSL, but it is still far from perfect. In this demo #0000CD and #8B0000 are two good examples of where HSV measurement fails.\n\n<p data-height=\"266\" data-theme-id=\"6646\" data-slug-hash=\"hqvod\" data-default-tab=\"result\" class='codepen'>See the Pen <a href='http://codepen.io/MadeByMike/pen/hqvod/'>Contrast black\\white - value (Less)</a> by Mike (<a href='http://codepen.io/MadeByMike'>@MadeByMike</a>) on <a href='http://codepen.io'>CodePen</a>.</p>\n<script async src=\"//codepen.io/assets/embed/ei.js\"></script>\nSorry Sass people, Sass has no HSV functions :(\n\n## Luminance based measurement\nLuminance is the perceived brightness of a color and as expected it was the best performer of the three methods tested.\n\nIn general I'd say  these results are reasonably good. The correct color is usually picked and the text is generally readable. But closer scrutiny shows that they often don't meet [WCAG 2.0 requirements](http://www.w3.org/TR/WCAG20/#visual-audio-contrast-contrast) for text contrast.\n\n<p data-height=\"266\" data-theme-id=\"6646\" data-slug-hash=\"jJFqI\" data-default-tab=\"result\" class=\"codepen\" data-preview=\"true\">See the Pen <a href='http://codepen.io/MadeByMike/pen/jJFqI/'>Contrast black\\white - luma (Less)</a> by Mike (<a href='http://codepen.io/MadeByMike'>@MadeByMike</a>) on <a href='http://codepen.io'>CodePen</a>.</p>\n\n<script async src=\"//codepen.io/assets/embed/ei.js\"></script>\n\nThis examples uses Less, is Sass more your thing? [Got you covered](http://codepen.io/MadeByMike/pen/FoBjq)!\n\nLess has built-in luminance functions but Sass requires a little extra help.\n\n<p>Calculating luminance in Sass using the <a href=\"http://www.w3.org/TR/2008/REC-WCAG20-20081211/#relativeluminancedef\">w3c formula for relative luminance</a> requires the <code>pow</code> function, which is available only with <a href=\"http://compass-style.org/\">compass</a>.</p>\n\nI'm not sure exactly how Less calculates luminance but in my tests there was only one difference I could find (#9ACD32).\n\n## Measured contrast ratios\n\nSo none of the simple methods work and using only black and white text is somewhat limiting anyway. What if we could measure the contrast ratios and progressively increase the lightness and darkness until a desired contrast ratio is met?\n\nWait, we can do that! In this demo the acceptable contrast ratio is set to 4.5 (WCAG AA compliance). If the desired contrast ratio can not be met, either black or white is returned using the luminance method.\n\nI believe this method is by far the most useful. It can take a little time to compile, although in most situations you probably won't notice and if you're after guaranteed contrast ratios, this is the only option. No more <code>text-color</code> variables!\n\n<p data-height=\"266\" data-theme-id=\"6646\" data-slug-hash=\"sDpxg\" data-default-tab=\"result\" class='codepen'>See the Pen <a href='http://codepen.io/MadeByMike/pen/sDpxg/'> Contrast - WCAG compliant (Sass)</a> by Mike (<a href='http://codepen.io/MadeByMike'>@MadeByMike</a>) on <a href='http://codepen.io'>CodePen</a>.</p>\n<script async src=\"//codepen.io/assets/embed/ei.js\"></script>\n\n<p>Prefer Less? <s>Sorry :( I think I may have finally found something I can do with Sass that I can't do with Less, although I haven't given up yet!</s></p>\n\nIt turns out this is possible to do with Less although I can't say I like the method. Consider this [proof of concept](http://codepen.io/MadeByMike/pen/rguCF) only.\n\n## Contrast ratios with any color scheme\n\nBy default when you pass only one color to the mixin the results are in the same tonal range as the background color. This produces a monochromatic color scheme, however the function accepts a 2nd parameter, allowing a different starting point for the text color.\n\nYou can produce a range of [mathamatically determined color schemes](http://codepen.io/MadeByMike/pen/dqxCB) or you could just pick any color and let anarchy rule.\n\n## Usage\n\n<div class=\"special-attention\">\n<p>Again we're calculating luminance in Sass which requires the <code>pow</code> function, so you will need <a href=\"http://compass-style.org/\">compass</a>.</p>\n</div>\n\nDrop the following functions into your Sass stylesheets.\n\n```scss\n  @function luma($color){  \n    // Thanks voxpelli for a very concise implementation of luminance measure in sass\n    // Adapted from: https://gist.github.com/voxpelli/6304812\n    $rgba: red($color), green($color), blue($color);\n    $rgba2: ();\n    @for $i from 1 through 3 {\n      $rgb: nth($rgba, $i);\n      $rgb: $rgb / 255;\n      $rgb: if($rgb < .03928, $rgb / 12.92, pow(($rgb + .055) / 1.055, 2.4));\n      $rgba2: append($rgba2, $rgb);\n    }\n    @return (.2126 * nth($rgba2, 1) + .7152 * nth($rgba2, 2) + 0.0722 * nth($rgba2, 3))*100;\n  }\n\n  @function contrast_ratio($color1, $color2) {\n    $luma1: luma($color1) + 5;\n    $luma2: luma($color2) + 5;\n    $ratio: $luma1 / $luma2;\n    @if $luma1 < $luma2 {\n      $ratio: 1 / $ratio;\n    }\n    @return $ratio;\n  }\n\n  @function text-contrast($color, $bgcolor: $color) {\n    $threshold: 4.5; // 4.5 = WCAG AA,7= WCAG AAA\n    $list: 20 30 40 50 60 70 80 90 100;\n    @each $percent in $list {\n      $lighter: lighten($bgcolor, $percent);\n      $darker: darken($bgcolor, $percent);\n      $darker-ratio: contrast_ratio($color, $darker);\n      $lighter-ratio: contrast_ratio($color, $lighter);\n      @if($lighter-ratio > $darker-ratio){\n        @if ($lighter-ratio > $threshold){\n          @return $lighter;\n        }\n      }\n      @if($darker-ratio > $lighter-ratio){\n        @if ($darker-ratio > $threshold){\n          @return $darker;\n        }\n      }\n    }\n    @return if(lightness($color) < 51, #FFF, #000)\n  }\n```\n\nCall the `text-contrast()` function and pass it the background color:\n\n```scss\n  .my-element {\n\tbackground: $backgroud-color;\n    color: text-contrast($backgroud-color);\n  }\n```\nOptionally, pass a second parameter to control the text color:\n\n```scss\n  .my-element {\n\tbackground: $backgroud-color;\n    color: text-contrast($backgroud-color, DarkSalmon);\n  }\n```\n\n### Alternatives to compass\n\nNeed an alternative to compass? Voxpelli has a [pure sass alternative]( https://gist.github.com/voxpelli/6304812#file-_math-scss) for the `pow` function.\n\nThe w3c also has an alternative [formula for measuring brightness](http://www.w3.org/WAI/ER/WD-AERT/#color-contrast). My [experiments with this method](http://codepen.io/MadeByMike/pen/fwrhD) found it is not adequate for measured contrast ratios, but the results were often reasonable.\n",
        "type": "MarkdownRemark",
        "contentDigest": "979b43b79b9c720cab4a3039dcdcae3f",
        "owner": "gatsby-transformer-remark"
      },
      "frontmatter": {
        "title": ""
      },
      "excerpt": "",
      "rawMarkdownBody": "Contrast is a critical factor in web design, it's important to get right because it has a strong influence on the visual aesthetic, but it's especially important for readability and accessibility of text on the page.\n\nIt's not a revolutionary idea to suggest that we use Less or Sass to help choose an appropriate text color for a particular background. There are plenty of examples of this, but what is the best way?\n\nMost examples I've seen work on the general principle that, if a background color is \"brighter\" than 50% give me black text, otherwise give me white text.\n\nBut what does \"brighter\" mean? It depends on the implementation. There are different ways to measure the brightness of a color. Common methods include:\n\n- Lightness - the lightness channel of the HSL color space.\n- Value - the value channel of the HSV color space.\n- Luminance - the perceptual brightness of a color.\n\nRecently I've been experimenting with different implementations of text contrast mixins using Less and Sass. I've created examples for each method and evaluated them on their ability to meet required WCAG2 contrast ratios.\n\nI found none of the simple methods give a guaranteed accessible result, but it is possible using only Less or Sass to create a mixin that will give desired contrast ratios including WCAG2 AA or AAA level.\n\n## HSL based measurement\nUnfortunately it seems **the most common implementation** which is based on lightness, **is the worst visual performer**. In the demo below `#7CFC00` is a particularly good example of where the HSL method fails.\n\n<p data-height=\"266\" data-theme-id=\"6646\" data-slug-hash=\"qjlpF\" data-default-tab=\"result\" class='codepen'>See the Pen <a href='http://codepen.io/MadeByMike/pen/qjlpF/'>Contrast black\\white - lightness (Sass)</a> by Mike (<a href='http://codepen.io/MadeByMike'>@MadeByMike</a>) on <a href='http://codepen.io'>CodePen</a>.</p>\n\n<script async src=\"//codepen.io/assets/embed/ei.js\"></script>\n\nThis example uses Sass, do you prefer Less? [Got you covered](http://codepen.io/MadeByMike/pen/qjlpF)!\n\n## HSV based measurement\nMy feeling is that HSV provides slightly better results than HSL, but it is still far from perfect. In this demo #0000CD and #8B0000 are two good examples of where HSV measurement fails.\n\n<p data-height=\"266\" data-theme-id=\"6646\" data-slug-hash=\"hqvod\" data-default-tab=\"result\" class='codepen'>See the Pen <a href='http://codepen.io/MadeByMike/pen/hqvod/'>Contrast black\\white - value (Less)</a> by Mike (<a href='http://codepen.io/MadeByMike'>@MadeByMike</a>) on <a href='http://codepen.io'>CodePen</a>.</p>\n<script async src=\"//codepen.io/assets/embed/ei.js\"></script>\nSorry Sass people, Sass has no HSV functions :(\n\n## Luminance based measurement\nLuminance is the perceived brightness of a color and as expected it was the best performer of the three methods tested.\n\nIn general I'd say  these results are reasonably good. The correct color is usually picked and the text is generally readable. But closer scrutiny shows that they often don't meet [WCAG 2.0 requirements](http://www.w3.org/TR/WCAG20/#visual-audio-contrast-contrast) for text contrast.\n\n<p data-height=\"266\" data-theme-id=\"6646\" data-slug-hash=\"jJFqI\" data-default-tab=\"result\" class=\"codepen\" data-preview=\"true\">See the Pen <a href='http://codepen.io/MadeByMike/pen/jJFqI/'>Contrast black\\white - luma (Less)</a> by Mike (<a href='http://codepen.io/MadeByMike'>@MadeByMike</a>) on <a href='http://codepen.io'>CodePen</a>.</p>\n\n<script async src=\"//codepen.io/assets/embed/ei.js\"></script>\n\nThis examples uses Less, is Sass more your thing? [Got you covered](http://codepen.io/MadeByMike/pen/FoBjq)!\n\nLess has built-in luminance functions but Sass requires a little extra help.\n\n<p>Calculating luminance in Sass using the <a href=\"http://www.w3.org/TR/2008/REC-WCAG20-20081211/#relativeluminancedef\">w3c formula for relative luminance</a> requires the <code>pow</code> function, which is available only with <a href=\"http://compass-style.org/\">compass</a>.</p>\n\nI'm not sure exactly how Less calculates luminance but in my tests there was only one difference I could find (#9ACD32).\n\n## Measured contrast ratios\n\nSo none of the simple methods work and using only black and white text is somewhat limiting anyway. What if we could measure the contrast ratios and progressively increase the lightness and darkness until a desired contrast ratio is met?\n\nWait, we can do that! In this demo the acceptable contrast ratio is set to 4.5 (WCAG AA compliance). If the desired contrast ratio can not be met, either black or white is returned using the luminance method.\n\nI believe this method is by far the most useful. It can take a little time to compile, although in most situations you probably won't notice and if you're after guaranteed contrast ratios, this is the only option. No more <code>text-color</code> variables!\n\n<p data-height=\"266\" data-theme-id=\"6646\" data-slug-hash=\"sDpxg\" data-default-tab=\"result\" class='codepen'>See the Pen <a href='http://codepen.io/MadeByMike/pen/sDpxg/'> Contrast - WCAG compliant (Sass)</a> by Mike (<a href='http://codepen.io/MadeByMike'>@MadeByMike</a>) on <a href='http://codepen.io'>CodePen</a>.</p>\n<script async src=\"//codepen.io/assets/embed/ei.js\"></script>\n\n<p>Prefer Less? <s>Sorry :( I think I may have finally found something I can do with Sass that I can't do with Less, although I haven't given up yet!</s></p>\n\nIt turns out this is possible to do with Less although I can't say I like the method. Consider this [proof of concept](http://codepen.io/MadeByMike/pen/rguCF) only.\n\n## Contrast ratios with any color scheme\n\nBy default when you pass only one color to the mixin the results are in the same tonal range as the background color. This produces a monochromatic color scheme, however the function accepts a 2nd parameter, allowing a different starting point for the text color.\n\nYou can produce a range of [mathamatically determined color schemes](http://codepen.io/MadeByMike/pen/dqxCB) or you could just pick any color and let anarchy rule.\n\n## Usage\n\n<div class=\"special-attention\">\n<p>Again we're calculating luminance in Sass which requires the <code>pow</code> function, so you will need <a href=\"http://compass-style.org/\">compass</a>.</p>\n</div>\n\nDrop the following functions into your Sass stylesheets.\n\n```scss\n  @function luma($color){  \n    // Thanks voxpelli for a very concise implementation of luminance measure in sass\n    // Adapted from: https://gist.github.com/voxpelli/6304812\n    $rgba: red($color), green($color), blue($color);\n    $rgba2: ();\n    @for $i from 1 through 3 {\n      $rgb: nth($rgba, $i);\n      $rgb: $rgb / 255;\n      $rgb: if($rgb < .03928, $rgb / 12.92, pow(($rgb + .055) / 1.055, 2.4));\n      $rgba2: append($rgba2, $rgb);\n    }\n    @return (.2126 * nth($rgba2, 1) + .7152 * nth($rgba2, 2) + 0.0722 * nth($rgba2, 3))*100;\n  }\n\n  @function contrast_ratio($color1, $color2) {\n    $luma1: luma($color1) + 5;\n    $luma2: luma($color2) + 5;\n    $ratio: $luma1 / $luma2;\n    @if $luma1 < $luma2 {\n      $ratio: 1 / $ratio;\n    }\n    @return $ratio;\n  }\n\n  @function text-contrast($color, $bgcolor: $color) {\n    $threshold: 4.5; // 4.5 = WCAG AA,7= WCAG AAA\n    $list: 20 30 40 50 60 70 80 90 100;\n    @each $percent in $list {\n      $lighter: lighten($bgcolor, $percent);\n      $darker: darken($bgcolor, $percent);\n      $darker-ratio: contrast_ratio($color, $darker);\n      $lighter-ratio: contrast_ratio($color, $lighter);\n      @if($lighter-ratio > $darker-ratio){\n        @if ($lighter-ratio > $threshold){\n          @return $lighter;\n        }\n      }\n      @if($darker-ratio > $lighter-ratio){\n        @if ($darker-ratio > $threshold){\n          @return $darker;\n        }\n      }\n    }\n    @return if(lightness($color) < 51, #FFF, #000)\n  }\n```\n\nCall the `text-contrast()` function and pass it the background color:\n\n```scss\n  .my-element {\n\tbackground: $backgroud-color;\n    color: text-contrast($backgroud-color);\n  }\n```\nOptionally, pass a second parameter to control the text color:\n\n```scss\n  .my-element {\n\tbackground: $backgroud-color;\n    color: text-contrast($backgroud-color, DarkSalmon);\n  }\n```\n\n### Alternatives to compass\n\nNeed an alternative to compass? Voxpelli has a [pure sass alternative]( https://gist.github.com/voxpelli/6304812#file-_math-scss) for the `pow` function.\n\nThe w3c also has an alternative [formula for measuring brightness](http://www.w3.org/WAI/ER/WD-AERT/#color-contrast). My [experiments with this method](http://codepen.io/MadeByMike/pen/fwrhD) found it is not adequate for measured contrast ratios, but the results were often reasonable.\n"
    },
    "a8c8ae21-7ead-5519-988b-b4d3bd671b18": {
      "id": "a8c8ae21-7ead-5519-988b-b4d3bd671b18",
      "children": [],
      "parent": "9a47d419-9186-55bf-b1f9-e58855d46859",
      "internal": {
        "content": "A short tutorial on different techniques for manipulating pixel data with the canvas element.",
        "type": "MarkdownRemark",
        "contentDigest": "4d971be553d3a72c2602e6b5c072391a",
        "owner": "gatsby-transformer-remark"
      },
      "frontmatter": {
        "title": ""
      },
      "excerpt": "",
      "rawMarkdownBody": "A short tutorial on different techniques for manipulating pixel data with the canvas element."
    },
    "898a56f5-55ef-5513-9e63-cea1c09c8e48": {
      "id": "898a56f5-55ef-5513-9e63-cea1c09c8e48",
      "children": [],
      "parent": "134e8913-076c-599f-aa35-5754ac4805ce",
      "internal": {
        "content": "Canvas is a really interesting piece of our web development toolkit, but it is often overlooked or misunderstood. It is, as the name suggests, very much a blank canvas; not providing much in the way of prebaked solutions. It is up to us as developers to ensure what we make with canvas, is accessible and performant.\n\nCanvas has no DOM, so when compared to working with HTML and CSS it may be less intuitive, and more work. For example if we want to interact with elements on a canvas we need to define our own object model and events. Why would we want to do this if we can find a solution where things like events, layout and rendering are already taken care of by the browser?\n\nThe problem is also the answer. We can take direct control over things like layout and rendering. This means we can effectively bypass many layers of abstraction (albeit often useful abstractions) put in place by the browser, and create very streamlined, purpose-built solutions.\n\nIn this article I’m going to use the example of applying image an effect with canvas. I chose this example because it is simple enough, and there are directly comparable methods using CSS and SVG. The aim is not to argue that canvas is in any way better than CSS or SVG for this task. In fact the results and usage cases are slightly different. I want to demonstrate these differences and approaches to solving the problem with canvas.\n\n## Why use canvas?\n\nRecently my friend Una Kravets wrote an excellent article for Smashing Magazine, [Web Image Effects Performance Showdown](https://www.smashingmagazine.com/2016/05/web-image-effects-performance-showdown/). In the article Una compared the ease of implementation and performance of HTML Canvas, SVG filters, CSS filters and CSS blend modes. One of Una’s conclusions was that we should not use Canvas for image effects and I’m inclined to agree with her conclusion, especially on the basis of simplicity.\n\nUna knows a lot when it comes to applying image effects in the browser. You should checkout some of her other work including her A List Apart article, [Finessing feColorMatrix](http://alistapart.com/article/finessing-fecolormatrix) and [CSSgram](https://una.im/CSSgram/) which implements Instagram style filters using only CSS!\n\nThat’s amazing right? But it leaves the question; why would we ever want to use Canvas?\n\n**The answer is when we want to do more than just apply image effects.**\n\nFilters and blend modes don’t change images directly. Instead they are applied like mask layers in Photoshop where the source image is not modified. This means that if a user tries to save the image, they will get the original image without any effects. This might be exactly what you want, but for the average web user it’s probably a little confusing. That’s why I think CSS filters and blend modes work best for subtle effects and on background images, but not so much for applications where you want to make use of the end result.\n\nFor purely aesthetic purposes and in probably the vast majority of cases, CSS filters are exactly what you need but if you want to do something more involved, you probably need to start thinking about canvas. If you want to save an image or programmatically access the pixel data after an image effect is applied with CSS, you can’t. In the future [Houdini](https://www.smashingmagazine.com/2016/03/houdini-maybe-the-most-exciting-development-in-css-youve-never-heard-of/) may allow access the rendered output of CSS filters, but for now and in the immediate future, this stuff is locked away by the browser.\n\n## Using canvas for image effects\n\nOk, you need to apply an image effect and do something with the result? You will need to use canvas. Hopefully you’ve now read Una’s article and seen the performance of canvas compared with CSS filters and blend modes. You’re probably wondering, what is the best way to apply image effects with canvas, and can I get better performance? You can get great performance from canvas. I’m going to step through a few different techniques for applying image effects with canvas. Each technique has different levels of complexity and performance factors. As always, the best solution will depend on your specific needs and appetite for complexity.\n\n## Basic pixel manipulation with canvas\n\nIt makes sense that at its most basic Canvas is slower than other image manipulation techniques. We’re accessing the image data and manipulating it pixel by pixel then rendering the result back onto the Canvas. This means that we are doing a lot of extra work, rather than leveraging the built-in rendering capabilities of the browser. As well as this, because canvas can do a lot more than just apply image effects, we need to give explicit instructions, that would otherwise be assumed when using CSS filters and blend modes.\n\nDespite these drawbacks the most basic technique is still useful to learn and we will build upon it in the following examples. Let’s start with an image and apply a desaturation effect using Canvas and JavaScript.\n\nThe HTML might look like this:\n\n```html\n<img id=\"image\" src=\"image.jpg\">\n```\n\nWe need to make sure the image has fully loaded before we access the image data and because, web browsers, there are some inconsistencies in how the load event is triggered; especially when the image is loading from the cache. I’ve found the following method works well in browsers I tested.\n\n```javascript\nvar image = document.getElementById('image');\n\nif(image.complete){ // From cache\n  desaturateImage(image);\n} else { // On load\n  image.addEventListener('load', function() {\n      desaturateImage(image);\n  });\n}\n```\n\nNow let’s write the desaturateImage function. First we replace the image element with a canvas element:\n\n```javascript\nfunction desaturateImage(image){\n  var canvas = document.createElement('canvas');\n  image.parentNode.insertBefore(canvas, image);\n  canvas.width  = image.width;\n  canvas.height = image.height;\n  image.parentNode.removeChild(image);\n  ...\n}\n```\nNext we get a 2D rendering context, draw the image onto the canvas and get the pixel data using the <code>getImageData</code> method.\n\n```javascript\nvar ctx = canvas.getContext(\"2d\");\nctx.drawImage(image, 0, 0);\nvar imgData = ctx.getImageData(0, 0, canvas.width, canvas.height);\nvar data = imgData.data;\n```\n\nNow that we have the image data we want to apply an effect and write it back onto the canvas. Each pixel has 4 pieces of color information, one for each rgb value and an alpha value. Because of this you might expect <code>getImageData</code> to return some kind of structured data, instead—for reasons that become clear in the next example—it returns a simple unstructured array. The first four values in the array represent the first pixel and so on. This means we have to loop over it in chunks of four. We can do this like so:\n\n```javascript\nfor (var i = 0; i < data.length; i += 4) {\n  ...\n}\n```\n\nTo desaturate the image I’m using the following technique <code>grey = (red * 0.2126 + green * 0.7152 + blue * 0.0722)</code>. There are numerous [greyscale conversion algorithms](http://www.tannerhelland.com/3643/grayscale-image-algorithm-vb6/) with subtly different results, which I found an interesting and distracting side topic. One thing I like about Canvas is you have fine-grained control over any technique you apply.\n\nNext, inside the loop, assign the grey to the next four values in the <code>imgData</code> array, leaving the alpha value unchanged.\n\n```javascript\nfor (var i = 0; i < data.length; i += 4) {\n  var grey = (0.2126 * data[i]) + (0.7152 * data[i + 1]) + (0.0722 * data[i + 2]);\n  data[i] = grey;\n  data[i + 1] = grey;\n  data[i + 2] = grey;\n}\n```\n\nFinally, outside the loop, let’s write the modified pixel data back onto the canvas.\n\n```javascript\nctx.putImageData(imgData, image.width, image.height);\n```\n\nWe did it! We applied a simple image effect with canvas. If you’d like to see this technique in action here is the code and a working example of [basic pixel manipulation with canvas](/demos/image-effects/basic.html). It’s not as simple as a CSS filter, but it’s not overly complicated either. You can use this technique in moderation for small images, where performance is not critical.\n\n## 32bit pixel manipulation\n\nCanvas is very flexible and there are many ways we can optomise our code to ensure that performance is comparable, or in some cases even better than CSS and SVG filters. With canvas unfortunately the trade-off for better performance is often an increase in code complexity.\n\nOne of the biggest overheads in the first example was writing to the <code>imgData</code> array. Write operations are always expensive and although individually insignificant, we needed to write three values to the image data array for every pixel in the image. That’s a lot! Using 32bit pixel manipulation we will be able to write to the array once for each rgba value and reduce the number write operations in our example by a factor of three. This obviously comes with significant performance gains.\n\nIn addition to using getImageData, we’re going to create some array buffers that will give a different “view” for accessing the pixel data.\n\n```javascript\nvar imgData = ctx.getImageData(0, 0, canvas.width, canvas.height);\nvar buf = new ArrayBuffer(imgData.data.length);\nvar buf8 = new Uint8ClampedArray(buf);\nvar data = new Uint32Array(buf);\n```\n\nWe can then replace our loop with the following:\n\n```javascript\nvar j=0;\nfor (var i = 0; i < data.length; i += 4) {\n  var grey = (0.2126 * imgData.data[i]) + (0.7152 * imgData.data[i + 1]) + (0.0722 * imgData.data[i + 2]);\n  data[j] =\n      (255  << 24) |    // alpha\n      (grey << 16) |    // blue\n      (grey <<  8) |    // green\n       grey;            // red\n  j++; // Advance current the increment\n}\n```\n\nThere are a few things going on in the example above that you might not be familiar with, including [array buffers](Typed Arrays: Binary Data in the Browser) and [Bitwise shift operations](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators#Left_shift). For the purpose of this tutorial all you need to know is the array buffers allow us to access the image data array in a 32bit format and the bitwise operations convert separate rgba values into a single 32bit value.\n\nFinally, this is how we write the pixel data back to the canvas:\n\n```javascript\nimgData.data.set(buf8);  // Extra step\nctx.putImageData(imgData, 0, 0);\n```\n\nThis technique is significantly faster than the basic example and should be applied whenever using basic pixel manipulation techniques. Here is the code and a working example of [applying image effects using canvas and 32bit pixel manipulation](/demos/image-effects/32bit.html).\n\n## Image effects &amp; WebGL\n\nFinally, if we want blazingly fast results that compare with CSS we are going to have to leverage WebGL. WebGL gives you access to hardware acceleration that is usually orders of magnitude faster than basic pixel manipulation. But it’s also the most complicated of the examples demonstrated. It includes some fairly low-level stuff that might not be intuitive if, like me, you don’t have prior experience with 3D graphics programming.\n\n[WebGL has good support](http://caniuse.com/#feat=webgl) including on many mobile devices, however support for WebGL may depend on more than just the browser. For example on mobile devices and laptops the GPU may not be available in low power modes. In these cases you can fallback on 2D methods depending on your application.  \n\n**Note:** Do not expect a full WebGL tutorial, that’s more than I could provide in this article, but I’ll aim to give a general overview of the steps involved in setting up a scene for rendering 2D image effects.\n\n### Creating a WebGL program\n\nWe need to setup what is known as the rendering pipeline, a controllable sequence of steps for rendering 3D graphics. In WebGL this pipeline is fully configurable, which means we have the laborious task of setting up all the vertices, textures, variables and other information required by the shaders.\n\nTo many people this setup will not be particularly interesting; it’s the same boilerplate whatever the image effect applied. For this reason, and because a full introduction to WebGL deserves its own article, I’m going to skip over of most the initialisation code fairly quickly.\n\nI’m going to create a helper function to compile a WebGL program.\n\n```javascript\nfunction createWebGLProgram(ctx, vertexShaderSource, fragmentShaderSource) {\n\n  this.ctx = ctx;\n\n  this.compileShader = function(shaderSource, shaderType) {\n    var shader = this.ctx.createShader(shaderType);\n    this.ctx.shaderSource(shader, shaderSource);\n    this.ctx.compileShader(shader);\n    return shader;\n  };\n\n  var program = this.ctx.createProgram();\n  this.ctx.attachShader(program, this.compileShader(vertexShaderSource, this.ctx.VERTEX_SHADER));\n  this.ctx.attachShader(program, this.compileShader(fragmentShaderSource, this.ctx.FRAGMENT_SHADER));\n  this.ctx.linkProgram(program);\n  this.ctx.useProgram(program);\n\n  return program;\n}\n```\nThis function takes the source code for our fragment and vertex shaders, creates a program, compiles our shaders, and finally links it all together.\n\nThe next part of our code should look more familiar. We wait for the image to load then call the `desaturateImage` function, prepare our canvas, and replace the image element; the only difference is this time we request a `webgl` context rather than a 2D rendering context.\n\n```javascript\nvar image = document.getElementById('image');\n\nif(image.complete){\n  desaturateImage(image);\n} else {\n  image.onload = function(){\n    desaturateImage(image);\n  };\n}\n\nfunction desaturateImage(image) {\n  var canvas = document.createElement('canvas');\n  image.parentNode.insertBefore(canvas, image);\n  canvas.width  = image.width;\n  canvas.height = image.height;\n  image.parentNode.removeChild(image);\n\n  var ctx = canvas.getContext(\"webgl\") || canvas.getContext(\"experimental-webgl\")\n  ...\n}\n```\n\nWe are now ready to call our helper function `createWebGLProgram` and we do that like this:\n\n```javascript\nvar fragmentShaderSource = document.getElementById(\"fragment-shader\").text;\nvar vertexShaderSource = document.getElementById(\"vertex-shader\").text;\nvar program = createWebGLProgram(ctx, vertexShaderSource, fragmentShaderSource);\n```\n\nBefore this can work, we need the source code for our shaders.\n\n### Shaders\n\nIt’s convenient to write the shaders in unique script tags, not only does this keep them separate, but it avoids the mess and stress of writing strings with line-breaks in JavaScript.\n\nWhere image effects are concerned, shaders are the most important part of the process, as this is where the pixel manipulation takes place.\n\nThere are two types of shaders:\n\n  - Vertex shaders\n  - Fragment shaders\n\nGenerally speaking vertex shaders are responsible for determining the final position of each point (vertex) that forms part of a 3D shape. It does this by setting a variable named `gl_Position`. In our example, the 3D shape we are representing is a simple 2D rectangle or plane, upon which we will draw a texture.\n\nOur Vertex shader takes the vertices that represent the rectangle, these points will match our image dimensions, and it converts them to \"clip space\", a representation of the same points in a space with dimensions between -1 and 1. It also sets the `v_texCoord` variable to be used by the fragment shader.\n\n```html\n<script id=\"vertex-shader\" type=\"x-shader/x-vertex\">\nattribute vec2 a_position;\nattribute vec2 a_texCoord;\nuniform vec2 u_resolution;\nvarying vec2 v_texCoord;\n\nvoid main() {\n   vec2 clipSpace = (a_position / u_resolution) * 2.0 - 1.0;\n   gl_Position = vec4(clipSpace * vec2(1, -1), 0, 1);\n   v_texCoord = a_texCoord;\n}\n</script>\n```\n\n**Note**: We give the script tags a `type` of `x-shader/x-vertex` and `x-shader/x-fragment` because we don’t want the browser to try and run them like normal JavaScript.\n\nNext we need a fragment shader. While the vertext shader sets final position of each vertex on the canvas, the fragment shader sets the final color for each pixel, once the shape has been rasterised. Like the vertex shader, it does this by setting a special variable `gl_FragColor`.\n\n```html\n<script id=\"fragment-shader\" type=\"x-shader/x-fragment\">\nprecision mediump float;\nuniform sampler2D u_image;\nvarying vec2 v_texCoord;\n\nvoid main() {\n  vec4 color = texture2D(u_image, v_texCoord);\n  float grey = (0.2126 * color.r) + (0.7152 * color.g) + (0.0722 * color.b);\n  color.rgb = (grey - color.rgb);\n  gl_FragColor = color;\n}\n</script>\n```\n\nYou will notice the method for converting the color values to greyscale is the same as in the previous examples. The line `color.rgb += (grey - color.rgb)` is a short-hand way of setting all the rgb values of color to grey.\n\n### Data &amp; Variables\n\nWe’ve setup our shaders and WebGL program, but we need to provide the data and variables for the shaders to work with.\n\nFirst we provide canvas dimensions to the vertex shader.\n\n```javascript\nvar resolutionLocation = ctx.getUniformLocation(program, \"u_resolution\");\nctx.uniform2f(resolutionLocation, canvas.width, canvas.height);\n```\n\nNext we provide the data for the rectangle (2 triangles) on which we will draw the image.\n\n```javascript\nvar positionLocation = ctx.getAttribLocation(program, \"a_position\");\nvar buffer = ctx.createBuffer();\nctx.bindBuffer(ctx.ARRAY_BUFFER, buffer);\nctx.bufferData(ctx.ARRAY_BUFFER, new Float32Array([\n  0, 0,\n  image.width, 0,\n  0, image.height,\n  0, image.height,\n  image.width, 0,\n  image.width, image.height]), ctx.STATIC_DRAW);\nctx.enableVertexAttribArray(positionLocation);\nctx.vertexAttribPointer(positionLocation, 2, ctx.FLOAT, false, 0, 0);\n```\n\nWe also need to provide data for shape of our texture. This tells the shaders how to map the texture onto the shape.\n\n```javascript\nvar texCoordLocation = ctx.getAttribLocation(program, \"a_texCoord\");\nvar texCoordBuffer = ctx.createBuffer();\nctx.bindBuffer(ctx.ARRAY_BUFFER, texCoordBuffer);\nctx.bufferData(ctx.ARRAY_BUFFER, new Float32Array([\n  0.0, 0.0,\n  1.0, 0.0,\n  0.0, 1.0,\n  0.0, 1.0,\n  1.0, 0.0,\n  1.0, 1.0]), ctx.STATIC_DRAW);\nctx.enableVertexAttribArray(texCoordLocation);\nctx.vertexAttribPointer(texCoordLocation, 2, ctx.FLOAT, false, 0, 0);\n```\nYou can experiment with changing some of the numbers in either of the `bufferData` arrays to understand their purpose.\n\nFinally we need to provide the image data itself, and we do this by creating a texture.\n\n```javascript\nvar texture = ctx.createTexture();\nctx.bindTexture(ctx.TEXTURE_2D, texture);\nctx.texParameteri(ctx.TEXTURE_2D, ctx.TEXTURE_WRAP_S, ctx.CLAMP_TO_EDGE);\nctx.texParameteri(ctx.TEXTURE_2D, ctx.TEXTURE_WRAP_T, ctx.CLAMP_TO_EDGE);\nctx.texParameteri(ctx.TEXTURE_2D, ctx.TEXTURE_MIN_FILTER, ctx.NEAREST);\nctx.texParameteri(ctx.TEXTURE_2D, ctx.TEXTURE_MAG_FILTER, ctx.NEAREST);\n\nctx.texImage2D(ctx.TEXTURE_2D, 0, ctx.RGBA, ctx.RGBA, ctx.UNSIGNED_BYTE, image); // Load the image into the texture.\n```\n\nNow that we have setup a program, shaders and provided the data the final step is to draw the scene on the canvas. We do that like this:\n\n```javascript\nctx.drawArrays(ctx.TRIANGLES, 0, 6);\n```\n\nAnd that’s it! Checkout the [WebGL image effects demo page](/demos/image-effects/webgl.html).  \n\nThis example is fast! And I mean really fast! The results are directly comparable with CSS and SVG filters. That’s because with WebGL, the image effects are processed directly on your graphics card’s GPU, which is highly optimised for this type of work.\n\nThe code is definitely more complicated than using CSS or SVG filters but unlike these methods you can access the result, and apply many more types of effects. This technique is a good choice for an application where performance is critical and you need to save the image.\n\nOnce you understand a little about how shaders works it’s not that difficult to modify example above. You can create your own abstractions and make applying different image effects as familiar and easy as using CSS or SVG filters. To demonstrate this I wrote an examples that takes an SVG `feColorMatrix` value and applies a [color matrix transformation using WebGL](/demos/image-effects/webgl-matrix.html). This can produce an almost infinite number of image effects by simply changing the input variables.\n\nAs is often the case with modern web development, there are many features you can use to achieve the same results. For image effects CSS, SVG and canvas each have different strengths. Even after choosing the right technology, differences in implementation can make a huge difference in performance.\n\nWhilst it is tempting to pick the simplest implementation from a development perspective, what is simple is sometimes more nuanced than this. The rendering process for CSS and SVG filters, whilst largely hidden from developers, is complicated due to its many features and abstractions. If we need to, we can take more direct control over the rendering process and have purpose-built applications that are amazingly fast. Although the path is less clear, and it may be more work initially, canvas can open a range [unique possibilities](/demos/image-effects/webgl-interactive.html) not available using more defined \"paint by number\" solutions.\n\n## You might also be interested in reading\n\n- [Canvas image pixel manipulation](http://codepen.io/jakealbaugh/post/canvas-image-pixel-manipulation)\n- [Pixel manipulation with canvas](https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API/Tutorial/Pixel_manipulation_with_canvas)\n- [An Introduction to WebGL - Part 1](https://dev.opera.com/articles/introduction-to-webgl-part-1/)\n- [An introduction to shaders - Part 1](https://aerotwist.com/tutorials/an-introduction-to-shaders-part-1/)\n\n## Examples in this article\n\n- [Basic pixel manipulation](/demos/image-effects/basic.html)\n- [32bit pixel manipulation](/demos/image-effects/32bit.html)\n- [WebGL image effects](/demos/image-effects/webgl.html)\n- [WebGL simulate SVG feColorMatrix](/demos/image-effects/webgl-matrix.html)\n- [WebGL interactive image effects](/demos/image-effects/webgl-interactive.html)\n\n<br>\n<section class=\" pal mtl background-dark\">\nIf your interested in implementing any of these techniques in a real project, why not <a href=\"/hire\">get in touch with me</a>? Let's make something interesting!\n</section>\n",
        "type": "MarkdownRemark",
        "contentDigest": "c8dbabc16423a67bc7267df857ddb88c",
        "owner": "gatsby-transformer-remark"
      },
      "frontmatter": {
        "title": ""
      },
      "excerpt": "",
      "rawMarkdownBody": "Canvas is a really interesting piece of our web development toolkit, but it is often overlooked or misunderstood. It is, as the name suggests, very much a blank canvas; not providing much in the way of prebaked solutions. It is up to us as developers to ensure what we make with canvas, is accessible and performant.\n\nCanvas has no DOM, so when compared to working with HTML and CSS it may be less intuitive, and more work. For example if we want to interact with elements on a canvas we need to define our own object model and events. Why would we want to do this if we can find a solution where things like events, layout and rendering are already taken care of by the browser?\n\nThe problem is also the answer. We can take direct control over things like layout and rendering. This means we can effectively bypass many layers of abstraction (albeit often useful abstractions) put in place by the browser, and create very streamlined, purpose-built solutions.\n\nIn this article I’m going to use the example of applying image an effect with canvas. I chose this example because it is simple enough, and there are directly comparable methods using CSS and SVG. The aim is not to argue that canvas is in any way better than CSS or SVG for this task. In fact the results and usage cases are slightly different. I want to demonstrate these differences and approaches to solving the problem with canvas.\n\n## Why use canvas?\n\nRecently my friend Una Kravets wrote an excellent article for Smashing Magazine, [Web Image Effects Performance Showdown](https://www.smashingmagazine.com/2016/05/web-image-effects-performance-showdown/). In the article Una compared the ease of implementation and performance of HTML Canvas, SVG filters, CSS filters and CSS blend modes. One of Una’s conclusions was that we should not use Canvas for image effects and I’m inclined to agree with her conclusion, especially on the basis of simplicity.\n\nUna knows a lot when it comes to applying image effects in the browser. You should checkout some of her other work including her A List Apart article, [Finessing feColorMatrix](http://alistapart.com/article/finessing-fecolormatrix) and [CSSgram](https://una.im/CSSgram/) which implements Instagram style filters using only CSS!\n\nThat’s amazing right? But it leaves the question; why would we ever want to use Canvas?\n\n**The answer is when we want to do more than just apply image effects.**\n\nFilters and blend modes don’t change images directly. Instead they are applied like mask layers in Photoshop where the source image is not modified. This means that if a user tries to save the image, they will get the original image without any effects. This might be exactly what you want, but for the average web user it’s probably a little confusing. That’s why I think CSS filters and blend modes work best for subtle effects and on background images, but not so much for applications where you want to make use of the end result.\n\nFor purely aesthetic purposes and in probably the vast majority of cases, CSS filters are exactly what you need but if you want to do something more involved, you probably need to start thinking about canvas. If you want to save an image or programmatically access the pixel data after an image effect is applied with CSS, you can’t. In the future [Houdini](https://www.smashingmagazine.com/2016/03/houdini-maybe-the-most-exciting-development-in-css-youve-never-heard-of/) may allow access the rendered output of CSS filters, but for now and in the immediate future, this stuff is locked away by the browser.\n\n## Using canvas for image effects\n\nOk, you need to apply an image effect and do something with the result? You will need to use canvas. Hopefully you’ve now read Una’s article and seen the performance of canvas compared with CSS filters and blend modes. You’re probably wondering, what is the best way to apply image effects with canvas, and can I get better performance? You can get great performance from canvas. I’m going to step through a few different techniques for applying image effects with canvas. Each technique has different levels of complexity and performance factors. As always, the best solution will depend on your specific needs and appetite for complexity.\n\n## Basic pixel manipulation with canvas\n\nIt makes sense that at its most basic Canvas is slower than other image manipulation techniques. We’re accessing the image data and manipulating it pixel by pixel then rendering the result back onto the Canvas. This means that we are doing a lot of extra work, rather than leveraging the built-in rendering capabilities of the browser. As well as this, because canvas can do a lot more than just apply image effects, we need to give explicit instructions, that would otherwise be assumed when using CSS filters and blend modes.\n\nDespite these drawbacks the most basic technique is still useful to learn and we will build upon it in the following examples. Let’s start with an image and apply a desaturation effect using Canvas and JavaScript.\n\nThe HTML might look like this:\n\n```html\n<img id=\"image\" src=\"image.jpg\">\n```\n\nWe need to make sure the image has fully loaded before we access the image data and because, web browsers, there are some inconsistencies in how the load event is triggered; especially when the image is loading from the cache. I’ve found the following method works well in browsers I tested.\n\n```javascript\nvar image = document.getElementById('image');\n\nif(image.complete){ // From cache\n  desaturateImage(image);\n} else { // On load\n  image.addEventListener('load', function() {\n      desaturateImage(image);\n  });\n}\n```\n\nNow let’s write the desaturateImage function. First we replace the image element with a canvas element:\n\n```javascript\nfunction desaturateImage(image){\n  var canvas = document.createElement('canvas');\n  image.parentNode.insertBefore(canvas, image);\n  canvas.width  = image.width;\n  canvas.height = image.height;\n  image.parentNode.removeChild(image);\n  ...\n}\n```\nNext we get a 2D rendering context, draw the image onto the canvas and get the pixel data using the <code>getImageData</code> method.\n\n```javascript\nvar ctx = canvas.getContext(\"2d\");\nctx.drawImage(image, 0, 0);\nvar imgData = ctx.getImageData(0, 0, canvas.width, canvas.height);\nvar data = imgData.data;\n```\n\nNow that we have the image data we want to apply an effect and write it back onto the canvas. Each pixel has 4 pieces of color information, one for each rgb value and an alpha value. Because of this you might expect <code>getImageData</code> to return some kind of structured data, instead—for reasons that become clear in the next example—it returns a simple unstructured array. The first four values in the array represent the first pixel and so on. This means we have to loop over it in chunks of four. We can do this like so:\n\n```javascript\nfor (var i = 0; i < data.length; i += 4) {\n  ...\n}\n```\n\nTo desaturate the image I’m using the following technique <code>grey = (red * 0.2126 + green * 0.7152 + blue * 0.0722)</code>. There are numerous [greyscale conversion algorithms](http://www.tannerhelland.com/3643/grayscale-image-algorithm-vb6/) with subtly different results, which I found an interesting and distracting side topic. One thing I like about Canvas is you have fine-grained control over any technique you apply.\n\nNext, inside the loop, assign the grey to the next four values in the <code>imgData</code> array, leaving the alpha value unchanged.\n\n```javascript\nfor (var i = 0; i < data.length; i += 4) {\n  var grey = (0.2126 * data[i]) + (0.7152 * data[i + 1]) + (0.0722 * data[i + 2]);\n  data[i] = grey;\n  data[i + 1] = grey;\n  data[i + 2] = grey;\n}\n```\n\nFinally, outside the loop, let’s write the modified pixel data back onto the canvas.\n\n```javascript\nctx.putImageData(imgData, image.width, image.height);\n```\n\nWe did it! We applied a simple image effect with canvas. If you’d like to see this technique in action here is the code and a working example of [basic pixel manipulation with canvas](/demos/image-effects/basic.html). It’s not as simple as a CSS filter, but it’s not overly complicated either. You can use this technique in moderation for small images, where performance is not critical.\n\n## 32bit pixel manipulation\n\nCanvas is very flexible and there are many ways we can optomise our code to ensure that performance is comparable, or in some cases even better than CSS and SVG filters. With canvas unfortunately the trade-off for better performance is often an increase in code complexity.\n\nOne of the biggest overheads in the first example was writing to the <code>imgData</code> array. Write operations are always expensive and although individually insignificant, we needed to write three values to the image data array for every pixel in the image. That’s a lot! Using 32bit pixel manipulation we will be able to write to the array once for each rgba value and reduce the number write operations in our example by a factor of three. This obviously comes with significant performance gains.\n\nIn addition to using getImageData, we’re going to create some array buffers that will give a different “view” for accessing the pixel data.\n\n```javascript\nvar imgData = ctx.getImageData(0, 0, canvas.width, canvas.height);\nvar buf = new ArrayBuffer(imgData.data.length);\nvar buf8 = new Uint8ClampedArray(buf);\nvar data = new Uint32Array(buf);\n```\n\nWe can then replace our loop with the following:\n\n```javascript\nvar j=0;\nfor (var i = 0; i < data.length; i += 4) {\n  var grey = (0.2126 * imgData.data[i]) + (0.7152 * imgData.data[i + 1]) + (0.0722 * imgData.data[i + 2]);\n  data[j] =\n      (255  << 24) |    // alpha\n      (grey << 16) |    // blue\n      (grey <<  8) |    // green\n       grey;            // red\n  j++; // Advance current the increment\n}\n```\n\nThere are a few things going on in the example above that you might not be familiar with, including [array buffers](Typed Arrays: Binary Data in the Browser) and [Bitwise shift operations](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators#Left_shift). For the purpose of this tutorial all you need to know is the array buffers allow us to access the image data array in a 32bit format and the bitwise operations convert separate rgba values into a single 32bit value.\n\nFinally, this is how we write the pixel data back to the canvas:\n\n```javascript\nimgData.data.set(buf8);  // Extra step\nctx.putImageData(imgData, 0, 0);\n```\n\nThis technique is significantly faster than the basic example and should be applied whenever using basic pixel manipulation techniques. Here is the code and a working example of [applying image effects using canvas and 32bit pixel manipulation](/demos/image-effects/32bit.html).\n\n## Image effects &amp; WebGL\n\nFinally, if we want blazingly fast results that compare with CSS we are going to have to leverage WebGL. WebGL gives you access to hardware acceleration that is usually orders of magnitude faster than basic pixel manipulation. But it’s also the most complicated of the examples demonstrated. It includes some fairly low-level stuff that might not be intuitive if, like me, you don’t have prior experience with 3D graphics programming.\n\n[WebGL has good support](http://caniuse.com/#feat=webgl) including on many mobile devices, however support for WebGL may depend on more than just the browser. For example on mobile devices and laptops the GPU may not be available in low power modes. In these cases you can fallback on 2D methods depending on your application.  \n\n**Note:** Do not expect a full WebGL tutorial, that’s more than I could provide in this article, but I’ll aim to give a general overview of the steps involved in setting up a scene for rendering 2D image effects.\n\n### Creating a WebGL program\n\nWe need to setup what is known as the rendering pipeline, a controllable sequence of steps for rendering 3D graphics. In WebGL this pipeline is fully configurable, which means we have the laborious task of setting up all the vertices, textures, variables and other information required by the shaders.\n\nTo many people this setup will not be particularly interesting; it’s the same boilerplate whatever the image effect applied. For this reason, and because a full introduction to WebGL deserves its own article, I’m going to skip over of most the initialisation code fairly quickly.\n\nI’m going to create a helper function to compile a WebGL program.\n\n```javascript\nfunction createWebGLProgram(ctx, vertexShaderSource, fragmentShaderSource) {\n\n  this.ctx = ctx;\n\n  this.compileShader = function(shaderSource, shaderType) {\n    var shader = this.ctx.createShader(shaderType);\n    this.ctx.shaderSource(shader, shaderSource);\n    this.ctx.compileShader(shader);\n    return shader;\n  };\n\n  var program = this.ctx.createProgram();\n  this.ctx.attachShader(program, this.compileShader(vertexShaderSource, this.ctx.VERTEX_SHADER));\n  this.ctx.attachShader(program, this.compileShader(fragmentShaderSource, this.ctx.FRAGMENT_SHADER));\n  this.ctx.linkProgram(program);\n  this.ctx.useProgram(program);\n\n  return program;\n}\n```\nThis function takes the source code for our fragment and vertex shaders, creates a program, compiles our shaders, and finally links it all together.\n\nThe next part of our code should look more familiar. We wait for the image to load then call the `desaturateImage` function, prepare our canvas, and replace the image element; the only difference is this time we request a `webgl` context rather than a 2D rendering context.\n\n```javascript\nvar image = document.getElementById('image');\n\nif(image.complete){\n  desaturateImage(image);\n} else {\n  image.onload = function(){\n    desaturateImage(image);\n  };\n}\n\nfunction desaturateImage(image) {\n  var canvas = document.createElement('canvas');\n  image.parentNode.insertBefore(canvas, image);\n  canvas.width  = image.width;\n  canvas.height = image.height;\n  image.parentNode.removeChild(image);\n\n  var ctx = canvas.getContext(\"webgl\") || canvas.getContext(\"experimental-webgl\")\n  ...\n}\n```\n\nWe are now ready to call our helper function `createWebGLProgram` and we do that like this:\n\n```javascript\nvar fragmentShaderSource = document.getElementById(\"fragment-shader\").text;\nvar vertexShaderSource = document.getElementById(\"vertex-shader\").text;\nvar program = createWebGLProgram(ctx, vertexShaderSource, fragmentShaderSource);\n```\n\nBefore this can work, we need the source code for our shaders.\n\n### Shaders\n\nIt’s convenient to write the shaders in unique script tags, not only does this keep them separate, but it avoids the mess and stress of writing strings with line-breaks in JavaScript.\n\nWhere image effects are concerned, shaders are the most important part of the process, as this is where the pixel manipulation takes place.\n\nThere are two types of shaders:\n\n  - Vertex shaders\n  - Fragment shaders\n\nGenerally speaking vertex shaders are responsible for determining the final position of each point (vertex) that forms part of a 3D shape. It does this by setting a variable named `gl_Position`. In our example, the 3D shape we are representing is a simple 2D rectangle or plane, upon which we will draw a texture.\n\nOur Vertex shader takes the vertices that represent the rectangle, these points will match our image dimensions, and it converts them to \"clip space\", a representation of the same points in a space with dimensions between -1 and 1. It also sets the `v_texCoord` variable to be used by the fragment shader.\n\n```html\n<script id=\"vertex-shader\" type=\"x-shader/x-vertex\">\nattribute vec2 a_position;\nattribute vec2 a_texCoord;\nuniform vec2 u_resolution;\nvarying vec2 v_texCoord;\n\nvoid main() {\n   vec2 clipSpace = (a_position / u_resolution) * 2.0 - 1.0;\n   gl_Position = vec4(clipSpace * vec2(1, -1), 0, 1);\n   v_texCoord = a_texCoord;\n}\n</script>\n```\n\n**Note**: We give the script tags a `type` of `x-shader/x-vertex` and `x-shader/x-fragment` because we don’t want the browser to try and run them like normal JavaScript.\n\nNext we need a fragment shader. While the vertext shader sets final position of each vertex on the canvas, the fragment shader sets the final color for each pixel, once the shape has been rasterised. Like the vertex shader, it does this by setting a special variable `gl_FragColor`.\n\n```html\n<script id=\"fragment-shader\" type=\"x-shader/x-fragment\">\nprecision mediump float;\nuniform sampler2D u_image;\nvarying vec2 v_texCoord;\n\nvoid main() {\n  vec4 color = texture2D(u_image, v_texCoord);\n  float grey = (0.2126 * color.r) + (0.7152 * color.g) + (0.0722 * color.b);\n  color.rgb = (grey - color.rgb);\n  gl_FragColor = color;\n}\n</script>\n```\n\nYou will notice the method for converting the color values to greyscale is the same as in the previous examples. The line `color.rgb += (grey - color.rgb)` is a short-hand way of setting all the rgb values of color to grey.\n\n### Data &amp; Variables\n\nWe’ve setup our shaders and WebGL program, but we need to provide the data and variables for the shaders to work with.\n\nFirst we provide canvas dimensions to the vertex shader.\n\n```javascript\nvar resolutionLocation = ctx.getUniformLocation(program, \"u_resolution\");\nctx.uniform2f(resolutionLocation, canvas.width, canvas.height);\n```\n\nNext we provide the data for the rectangle (2 triangles) on which we will draw the image.\n\n```javascript\nvar positionLocation = ctx.getAttribLocation(program, \"a_position\");\nvar buffer = ctx.createBuffer();\nctx.bindBuffer(ctx.ARRAY_BUFFER, buffer);\nctx.bufferData(ctx.ARRAY_BUFFER, new Float32Array([\n  0, 0,\n  image.width, 0,\n  0, image.height,\n  0, image.height,\n  image.width, 0,\n  image.width, image.height]), ctx.STATIC_DRAW);\nctx.enableVertexAttribArray(positionLocation);\nctx.vertexAttribPointer(positionLocation, 2, ctx.FLOAT, false, 0, 0);\n```\n\nWe also need to provide data for shape of our texture. This tells the shaders how to map the texture onto the shape.\n\n```javascript\nvar texCoordLocation = ctx.getAttribLocation(program, \"a_texCoord\");\nvar texCoordBuffer = ctx.createBuffer();\nctx.bindBuffer(ctx.ARRAY_BUFFER, texCoordBuffer);\nctx.bufferData(ctx.ARRAY_BUFFER, new Float32Array([\n  0.0, 0.0,\n  1.0, 0.0,\n  0.0, 1.0,\n  0.0, 1.0,\n  1.0, 0.0,\n  1.0, 1.0]), ctx.STATIC_DRAW);\nctx.enableVertexAttribArray(texCoordLocation);\nctx.vertexAttribPointer(texCoordLocation, 2, ctx.FLOAT, false, 0, 0);\n```\nYou can experiment with changing some of the numbers in either of the `bufferData` arrays to understand their purpose.\n\nFinally we need to provide the image data itself, and we do this by creating a texture.\n\n```javascript\nvar texture = ctx.createTexture();\nctx.bindTexture(ctx.TEXTURE_2D, texture);\nctx.texParameteri(ctx.TEXTURE_2D, ctx.TEXTURE_WRAP_S, ctx.CLAMP_TO_EDGE);\nctx.texParameteri(ctx.TEXTURE_2D, ctx.TEXTURE_WRAP_T, ctx.CLAMP_TO_EDGE);\nctx.texParameteri(ctx.TEXTURE_2D, ctx.TEXTURE_MIN_FILTER, ctx.NEAREST);\nctx.texParameteri(ctx.TEXTURE_2D, ctx.TEXTURE_MAG_FILTER, ctx.NEAREST);\n\nctx.texImage2D(ctx.TEXTURE_2D, 0, ctx.RGBA, ctx.RGBA, ctx.UNSIGNED_BYTE, image); // Load the image into the texture.\n```\n\nNow that we have setup a program, shaders and provided the data the final step is to draw the scene on the canvas. We do that like this:\n\n```javascript\nctx.drawArrays(ctx.TRIANGLES, 0, 6);\n```\n\nAnd that’s it! Checkout the [WebGL image effects demo page](/demos/image-effects/webgl.html).  \n\nThis example is fast! And I mean really fast! The results are directly comparable with CSS and SVG filters. That’s because with WebGL, the image effects are processed directly on your graphics card’s GPU, which is highly optimised for this type of work.\n\nThe code is definitely more complicated than using CSS or SVG filters but unlike these methods you can access the result, and apply many more types of effects. This technique is a good choice for an application where performance is critical and you need to save the image.\n\nOnce you understand a little about how shaders works it’s not that difficult to modify example above. You can create your own abstractions and make applying different image effects as familiar and easy as using CSS or SVG filters. To demonstrate this I wrote an examples that takes an SVG `feColorMatrix` value and applies a [color matrix transformation using WebGL](/demos/image-effects/webgl-matrix.html). This can produce an almost infinite number of image effects by simply changing the input variables.\n\nAs is often the case with modern web development, there are many features you can use to achieve the same results. For image effects CSS, SVG and canvas each have different strengths. Even after choosing the right technology, differences in implementation can make a huge difference in performance.\n\nWhilst it is tempting to pick the simplest implementation from a development perspective, what is simple is sometimes more nuanced than this. The rendering process for CSS and SVG filters, whilst largely hidden from developers, is complicated due to its many features and abstractions. If we need to, we can take more direct control over the rendering process and have purpose-built applications that are amazingly fast. Although the path is less clear, and it may be more work initially, canvas can open a range [unique possibilities](/demos/image-effects/webgl-interactive.html) not available using more defined \"paint by number\" solutions.\n\n## You might also be interested in reading\n\n- [Canvas image pixel manipulation](http://codepen.io/jakealbaugh/post/canvas-image-pixel-manipulation)\n- [Pixel manipulation with canvas](https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API/Tutorial/Pixel_manipulation_with_canvas)\n- [An Introduction to WebGL - Part 1](https://dev.opera.com/articles/introduction-to-webgl-part-1/)\n- [An introduction to shaders - Part 1](https://aerotwist.com/tutorials/an-introduction-to-shaders-part-1/)\n\n## Examples in this article\n\n- [Basic pixel manipulation](/demos/image-effects/basic.html)\n- [32bit pixel manipulation](/demos/image-effects/32bit.html)\n- [WebGL image effects](/demos/image-effects/webgl.html)\n- [WebGL simulate SVG feColorMatrix](/demos/image-effects/webgl-matrix.html)\n- [WebGL interactive image effects](/demos/image-effects/webgl-interactive.html)\n\n<br>\n<section class=\" pal mtl background-dark\">\nIf your interested in implementing any of these techniques in a real project, why not <a href=\"/hire\">get in touch with me</a>? Let's make something interesting!\n</section>\n"
    },
    "8995ec68-52e1-5ca7-8b9c-07299324bfb0": {
      "id": "8995ec68-52e1-5ca7-8b9c-07299324bfb0",
      "children": [],
      "parent": "b662b1cf-1d20-5ab8-8229-327a802660f4",
      "internal": {
        "content": "If you've worked with the css transition events in JavaScript you will know that it's a little involved due to the need for multiple browser prefixes. Luckily it's easy, if slightly verbose, to detect which transition event to use:\n\n```javascript\n  // Dave Walsh says this is from Modernizr, but I can't find it\n  // http://davidwalsh.name/css-animation-callback\n  var whichTransitionEvent = function(){\n    var t;\n    var el = document.createElement('fakeelement');\n    var transitions = {\n      'transition':'transitionend',\n      'OTransition':'oTransitionEnd',\n      'MozTransition':'transitionend',\n      'WebkitTransition':'webkitTransitionEnd'\n    };\n    for(t in transitions){\n      if( el.style[t] !== undefined ){\n        return transitions[t];\n      }\n    }\n  };\n  var transitionEvent = whichTransitionEvent();\n\n  // With that sorted...\n  if(transitionEvent){\n    document.body.addEventListener(transitionEvent, function() {\n\t  // do stuff here\n\t});\n  }\n```\n\nWe need to check if `transitionEvent` exists before adding an event listener and whilst this isn't too hard, we could take this a step further and wrap it with a custom event `'transition-end'`. See: [example gist](https://gist.github.com/MadeByMike/0563ca51e08a790e553b).\n\nMy reason for this extra step, apart from easy of use, relates to detecting transition start.\n\n## What about transition start?\n\nUnfortunately there is no transition start event and it might at first seem like this is not much of a problem. A css transition is usually triggered by an event such as resize or hover and these events can be captured with JavaScript. But that is not always the case, at times it is difficult if not impossible to tell when a particular transition is triggered.\n\nThe following example demonstrates a likely use case with the popular Foundation library and the [Equalizer](http://foundation.zurb.com/docs/components/equalizer.html) component.\n\n<p data-height=\"650\" data-theme-id=\"6646\" data-slug-hash=\"ImxHA\" data-default-tab=\"result\" class='codepen'>See the Pen <a href='http://codepen.io/MadeByMike/pen/ImxHA/'>Foundation Equalizer and the problem with CSS Transitions</a> by Mike (<a href='http://codepen.io/MadeByMike'>@MadeByMike</a>) on <a href='http://codepen.io'>CodePen</a>.</p>\n<script async src=\"//codepen.io/assets/embed/ei.js\"></script>\n\nIn the demo Equalizer changes the boxes so they are even height. The height is re-calculated when the browser is resized, but when the container is resized as part of a css transition the height will not be re-calculated and content will overflow the boxes.\n\nI've exaggerated the transitions in the example to demonstrate.\n\nDetecting transtionend and calling `$(document).foundation('equalizer','reflow');` will set the height correctly at the end of the transition but it is not a smooth experience.\n\nAlthough not the ideal method I'd like, I've come up with a solution for detecting transition start. By wrapping the transitionend event with a custom event we can use transitionend in a sneaky way to detect a transition start.\n\n<p data-height=\"500\" data-theme-id=\"6646\" data-slug-hash=\"sBjzn\" data-default-tab=\"result\" class='codepen'>See the Pen <a href='http://codepen.io/MadeByMike/pen/sBjzn/'>Detect transition start </a> by Mike (<a href='http://codepen.io/MadeByMike'>@MadeByMike</a>) on <a href='http://codepen.io'>CodePen</a>.</p>\n<script async src=\"//codepen.io/assets/embed/ei.js\"></script>\n\nAs I said, it is not ideal. It requires some specific css with a 0.00001s transition to detect the transition start.\n\nI'm looking forward to finding a better method. If you do let me know.",
        "type": "MarkdownRemark",
        "contentDigest": "31884b4ce83c1daf52abe6af97d84184",
        "owner": "gatsby-transformer-remark"
      },
      "frontmatter": {
        "title": ""
      },
      "excerpt": "",
      "rawMarkdownBody": "If you've worked with the css transition events in JavaScript you will know that it's a little involved due to the need for multiple browser prefixes. Luckily it's easy, if slightly verbose, to detect which transition event to use:\n\n```javascript\n  // Dave Walsh says this is from Modernizr, but I can't find it\n  // http://davidwalsh.name/css-animation-callback\n  var whichTransitionEvent = function(){\n    var t;\n    var el = document.createElement('fakeelement');\n    var transitions = {\n      'transition':'transitionend',\n      'OTransition':'oTransitionEnd',\n      'MozTransition':'transitionend',\n      'WebkitTransition':'webkitTransitionEnd'\n    };\n    for(t in transitions){\n      if( el.style[t] !== undefined ){\n        return transitions[t];\n      }\n    }\n  };\n  var transitionEvent = whichTransitionEvent();\n\n  // With that sorted...\n  if(transitionEvent){\n    document.body.addEventListener(transitionEvent, function() {\n\t  // do stuff here\n\t});\n  }\n```\n\nWe need to check if `transitionEvent` exists before adding an event listener and whilst this isn't too hard, we could take this a step further and wrap it with a custom event `'transition-end'`. See: [example gist](https://gist.github.com/MadeByMike/0563ca51e08a790e553b).\n\nMy reason for this extra step, apart from easy of use, relates to detecting transition start.\n\n## What about transition start?\n\nUnfortunately there is no transition start event and it might at first seem like this is not much of a problem. A css transition is usually triggered by an event such as resize or hover and these events can be captured with JavaScript. But that is not always the case, at times it is difficult if not impossible to tell when a particular transition is triggered.\n\nThe following example demonstrates a likely use case with the popular Foundation library and the [Equalizer](http://foundation.zurb.com/docs/components/equalizer.html) component.\n\n<p data-height=\"650\" data-theme-id=\"6646\" data-slug-hash=\"ImxHA\" data-default-tab=\"result\" class='codepen'>See the Pen <a href='http://codepen.io/MadeByMike/pen/ImxHA/'>Foundation Equalizer and the problem with CSS Transitions</a> by Mike (<a href='http://codepen.io/MadeByMike'>@MadeByMike</a>) on <a href='http://codepen.io'>CodePen</a>.</p>\n<script async src=\"//codepen.io/assets/embed/ei.js\"></script>\n\nIn the demo Equalizer changes the boxes so they are even height. The height is re-calculated when the browser is resized, but when the container is resized as part of a css transition the height will not be re-calculated and content will overflow the boxes.\n\nI've exaggerated the transitions in the example to demonstrate.\n\nDetecting transtionend and calling `$(document).foundation('equalizer','reflow');` will set the height correctly at the end of the transition but it is not a smooth experience.\n\nAlthough not the ideal method I'd like, I've come up with a solution for detecting transition start. By wrapping the transitionend event with a custom event we can use transitionend in a sneaky way to detect a transition start.\n\n<p data-height=\"500\" data-theme-id=\"6646\" data-slug-hash=\"sBjzn\" data-default-tab=\"result\" class='codepen'>See the Pen <a href='http://codepen.io/MadeByMike/pen/sBjzn/'>Detect transition start </a> by Mike (<a href='http://codepen.io/MadeByMike'>@MadeByMike</a>) on <a href='http://codepen.io'>CodePen</a>.</p>\n<script async src=\"//codepen.io/assets/embed/ei.js\"></script>\n\nAs I said, it is not ideal. It requires some specific css with a 0.00001s transition to detect the transition start.\n\nI'm looking forward to finding a better method. If you do let me know."
    },
    "49ea92ac-c62d-58a4-8436-4325aed670f4": {
      "id": "49ea92ac-c62d-58a4-8436-4325aed670f4",
      "children": [],
      "parent": "3a5203f8-e756-57a1-8c78-80d5b9da33c4",
      "internal": {
        "content": "Explains the box model, cascade, formatting contexts, positioning, stacking and a lot more about how CSS works. A right of passage, I had to write my version.",
        "type": "MarkdownRemark",
        "contentDigest": "614a2777cfc7b9d4967577da8a17c954",
        "owner": "gatsby-transformer-remark"
      },
      "frontmatter": {
        "title": ""
      },
      "excerpt": "",
      "rawMarkdownBody": "Explains the box model, cascade, formatting contexts, positioning, stacking and a lot more about how CSS works. A right of passage, I had to write my version."
    },
    "bd1692e3-5694-527b-b958-9982156ec065": {
      "id": "bd1692e3-5694-527b-b958-9982156ec065",
      "children": [],
      "parent": "a62cea07-f354-5149-a8ba-d464f2a336a5",
      "internal": {
        "content": "\nIf you use CSS in your daily work, your primary goal is probably focused on making things 'look right'. How this is achieved is often far less important than the end result. This means we care less about how CSS works than the correct syntax and visual results.\n\nYou may not have realised it, but the visual results of CSS are often an indirect consequence of manipulating hidden properties. Some CSS properties such as `background-color` have a direct and obvious relationship with what you see. While others such as `display` remain ambiguous to many of us because the results seem highly dependant on context.\n\nI doubt many developers could describe in simple terms what setting `display: block` actually does. At best you probably have an intuitive understanding of how properties like this work. That's ok, you can have a pretty good wrangle of CSS without understanding the underlying principles. Although, this might be knowing the solution without necessarily understanding the problem.\n\nIf this describes you, that's ok. I learnt how to work with CSS, long before I understood *how* it worked. I guess that doesn’t make it ok, ...but at least you’re not alone!\n\nThe underlying features of CSS are complicated and intentionally abstracted, yet we can't be completely unaware of them. Concepts such as the Box Model, Cascade and Specificity will be familiar to many of us. Although they are often misunderstood, knowing a little of how these work can help us write better CSS.\n\nThe same can be said for many other hidden parts of CSS. The problem with understanding these better is that the barrier to entry is even higher. It often feels like nothing can be explained in isolation. You need to know everything before you can understand the smallest part of the process.\n\nBecause of this I want to attempt to shed some light on the invisible parts of CSS, touching only on what you need to know and hopefully explaining the process in a logical order, so that you can gain a better understand of how CSS actually works.\n\nThis is a long article so if you want to skip ahead to one of these sections, I'm totally fine with that:\n\n- [Overview of the rendering process](#overview-of-the-rendering-process)\n- [Cascade](#cascade)\n- [The Box Model](#the-box-model)\n\t- [Fill Area](#fill-area)\n\t- [Width Auto](#width-auto)\n\t- [Box-sizing](#box-sizing)\n\t- [Collapsing margins](#collapsing-margins)\n- [The Visual Formatting Model](#the-visual-formatting-model)\n- [Display types](#display-types)\n- [Formatting contexts](#formatting-contexts)\n- [Positioning schemes](#positioning-schemes)\n\t- [Normal flow](#normal-flow)\n\t- [Floats](#floats)\n\t- [Absolute positioning](#absolute-positioning)\n\t- [Stacking context](#stacking-contexts)\n\n## Overview of the rendering process\n\nWhen you load an HTML document there is a lot that happens in order for that page to render.\n\nThe first step is to parse the HTML document. From this the browser builds a 'document tree'. A tree structure is a way of representing information with an obvious hierarchy like HTML. Elements in a tree can be described in terms similar to a family tree, such as descendants, parents, children and siblings.\n\nYou might have heard the term DOM. This stands for Document Object Model. It is an extension of the document tree structure, and is used to store and manipulate information about the content of a web document.\n\nAs HTML is being parsed, stylesheets and other resources are fetched. Style declarations are interpreted and resolved through a process known as the [Cascade](#cascade).\n\nDuring this process the final values of CSS properties are resolved. After calculation these values may be different to what is written in our stylesheets. For example keywords like `auto` and relative units are assigned real values, and inherited values are applied. These computed values are stored in a tree, similar to elements in the DOM, in what is unsurprisingly called the CSS Object Model or CSSOM.\n\nIt is now possible to begin the process of rendering the page. The first step in this process is the calculation of [the Box Model](#the-box-model). This is an important step for working out the size and spacing of elements, although not their final position.\n\nLess well known than the [Box Model](#the-box-model) is a process called the [Visual Formatting Model](#the-visual-formatting-model). This process determines the layout and positioning of elements on the page. It encompases some concepts you might already be familiar with such as [positioning schemes](#positioning-schemes), [formatting contexts](#formatting-contexts), [display modes](#display-types), and [stacking contexts](#stacking-contexts).\n\nFinally the page is rendered.\n\nThere might be a few terms in the paragraphs above that you are not yet familiar with. If so, what's most important is to understand that the [Cascade](#cascade), the [Box Model](#the-box-model), and the [Visual Formatting Model](#the-visual-formatting-model) are the key steps involved in interpreting, processing and rendering HTML and CSS. I’ve skipped over a lot of detail when describing each of these so we’re now going to look at these 3 steps more closely.\n\n## Cascade\n\nThe cascade is probably one of the most misunderstood features of CSS. It refers to the process of combining different stylesheets and resolving conflicts between CSS selectors.\n\nThe cascade looks at the importance, origin, specificity, and order of declarations to determine which style rules to use.\n\n**What you need to know:**\n\nMost websites have multiple stylesheets. Typically styles are added with a `link` tag that references a css file, or with a `style` tag in the HTML body. Even the most basic page will have default styles provided by the browser. This default stylesheet is sometimes called the user-agent stylesheet.\n\nDuring the cascade stylesheets are interpreted in the following order:\n\n1. !important declarations\n2. Author stylesheets\n3. Browser default stylesheets\n\n**Note:** I've skipped over user stylesheets here because they are not a common thing anymore and probably wouldn’t factor in consideration for anyone reading this.\n\nAfter combining these sources, if multiple rules apply to the same element, specificity is used to determine which rules to apply.\n\n### Specificity\n\nSpecificity is a weighting given to selectors. It's a common mistake to think of this as a single number. It’s actually 4 separate numbers or 4 categories of weighting.\n\nTo calculate specificity, count the number of:\n\n1. IDs,\n2. classes, attributes and pseudo-classes,\n3. elements and pseudo-elements\n\nFor example: `#nav .selected:hover > a::before` will be 1, 2, 2.\n\nNo number of classes will ever have a higher specificity than an ID. When comparing selectors you compare the specificity of IDs first. Only if these match do you compare the value of classes, attributes and pseudo-classes and finally, if still equal, elements and pseudo-elements.\n\nIf specificity is equal in every category, the last declaration in the source takes precedence.\n\n\nYes! I know I said 4 categories. Inlines styles have a higher specificity than IDs. Although they are technically the first category in specificity calculations you don't typically end up with competing inline styles, so it’s easier just remember that inline styles will always win specificity.\n\n**Important note:** !important declarations are not factored in specificity calculations but they do have a greater precedence than normal declarations in the cascade.\n\n### Inheritance\n\nInheritance is not part of the cascade but I've included it here because it is often discussed in conjunction with the cascade.\n\nInheritance is the process where values that apply to an element can be passed on (or inherited) by its children.\n\nYou are likely familiar with the fact that font properties, when applied to the body or another container element, are also inherited by every element inside that container. This is inheritance.\n\nNot all properties are inherited by default. Understanding inheritance is key to writing more deliberate and less verbose CSS. Forcing inheritance with the `inherit` keyword can be incredibly useful.\n\n**Note:** Some properties are such as `border-color` have a default value of `currentcolor`. This means they will use the value set on the `color` property. This default value is not the same thing as inheritance. Although the color property itself is often inherited so I tend to think of this as defacto kind of inheritance.\n\n## The Box Model\n\nUnderstanding the Box Model is essential and necessary for limiting frustration when working with layout and positioning. It is one of the most fundamental concepts in CSS.\n\nThe box model is used to calculate the width and height of elements. It is a calculation step and not solely relied upon for determining the final layout and positioning of elements.\n\n**What you need to know:**\n\nEvery element in HTML is a rectangular box. Each box has four regions defining the margin, borders, padding, and content areas of an element.\n\nBy default, when you set the width of an element, this sets the width of the content area only. When you add padding, border or margin to an element, this is added in addition to the width. In practical terms this means that two elements with a width of 50%, will not fit side-by-side if padding, margin or borders are added.\n\n<img alt=\"shows the content-width within the box model\" src=\"/img/content-width.png\" style=\"width:100%; max-width:550px;\">\n\nThat's it! It’s pretty simple right? So why is this often a source of confusion? Well, you might have encountered a few situations where things seem to behave a little differently…\n\n### Fill Area\n\nWhen you set the background of an element this fills not only the content area but also the padding and border areas as well.\n\n<img style=\"width:100%; max-width:550px;\" alt=\"shows the fill area within the box model\" src=\"/img/fill-area.png\" >\n\nConceptually we think of an HTML element as a single thing, so it's easy to think that the visual boundaries of an element are equal to its width however this is not the case. Although the visual boundaries of an element include the padding and border areas the width property is applied explicitly to the content box.\n\n**Note:** Altering the `box-sizing` property can change this behaviour.\n\n### Width Auto\n\nAnother source of potential confusion is how `width: auto` works. A width of auto is the default setting for most HTML elements and for block elements such as divs and paragraphs, `auto` will calculate the width so that the margin, border, padding and content areas combined all fit within the available space.\n\nIn this situation it can feel like adding padding and margins push inwards on the content, but in reality, the width is being recalculated to ensure everything fits. By comparison when setting a width of `100%`, the content area will fill the space available regardless of margin, padding and borders.\n\n<img style=\"width:100%; max-width:550px;\" alt=\"shows how width auto works compared to width:100%\" src=\"/img/width-auto.png\" >\n\n### Box-sizing\n\nThe box-sizing property changes the way the box model works. When box-sizing is set to `border-box` padding and border will reduce the inner width of the content area, rather than adding to the overall width of an element. This means that a width of an element is now the same as its visual width.\n\n<img style=\"width:100%; max-width:550px;\" alt=\"shows how box-sizing:border-box works\" src=\"/img/box-sizing.png\" >\n\nA lot of people prefer this, and if you're building a grid system, or any other kind of layout that requires aligning items horizontally, this can be much more intuitive way to work.\n\n### Collapsing margins\n\nIt can be really confusing when margins collapse unexpectedly and you don't know what is going on. Margins will sometimes collapse when two or more adjacent vertical margins touch and they are not separated with padding or border. A collapsing margin can also occur if the margin of a child element extends into that of its parent and is not separated by padding.\n\nMargins will not collapse if elements are absolutely positioned, floated, or have a different [formatting context](#formatting-contexts), as well as in a few other less likely situations.\n\nIf you're confused that’s ok. The rules for when margins will and will not collapse are complicated. The main thing you need to know is when elements don’t have padding or borders, vertical margins can collapse.\n\nIf you need more detail CSS Tricks has a wonderful [explanation of collapsing margins](https://css-tricks.com/what-you-should-know-about-collapsing-margins/).\n\n## The Visual Formatting Model\n\nWhile the box model calculates an element's dimensions, it’s the Visual Formatting Model that is responsible for determining the layout of these boxes. The Visual Formatting Model takes into account the box type, [positioning scheme](#positioning-schemes), relationships between elements and constraints imposed by content to determine the final position and presentation of each element on the page.\n\n**What you need to know:**\n\nThe visual formatting model traverses the document tree and generates one or more boxes required to render elements according to the CSS box model. The CSS `display` property plays a key role in determining how an element participates in the current formatting context and positioning scheme. Together these pieces determine the final layout and positioning of elements.\n\nThis is a complex step and was by far the most difficult to try and summarise. If you don't follow everything that’s ok. Understanding how we manipulate [positioning schemes](#positioning-schemes) and [formatting contexts](#formatting-contexts) through the CSS properties is a good start. If you can follow the interplay between different pieces of this model you are doing better than most. At very least you should know that they exist.\n\n## Display types\n\nWe know that setting the `display` property in CSS determines the how an element is rendered but it's not immediately clear how this works. In fact sometimes, it can even seem unpredictable.\n\nThis is because the display property determines the element's 'box type’. This hidden property consists of an inner display type, and an outer display type which together help determine how the element is rendered.\n\nThe outer display type usually resolves to either 'block' or ‘inline’ and is pretty much consistent what you expect of theses `display` properties in CSS. Technically speaking the outer display type dictates how an element participates in its parent [formatting context](#formatting-contexts).\n\nThe inner display type determines what [formatting context](#formatting-contexts) that element will generate. This will impact how its child elements are laid out.\n\nThink of how a Flexbox container works. Its outer type is `block` and its inner type is `flex`. Its children can also have an outer type of block, but their layout is influenced by the formatting context of the Flexbox container.\n\nOne way of thinking about this is that the responsibility for display is shared between an element and it's parent element.\n\n## Formatting contexts\n\nFormatting context are all about layout. They are the rules that govern the layout of elements inside a container and how they interact with each other.\n\nSome formatting contexts can be established directly on containers such as through the use of `display` values `flex`, `grid` or `table`. Other types such as block and inline formatting contexts are created as required by the browser.\n\n**Note:** At one time, because of the way it interacts with floats, it was important to understand how to make the browser establish a new block formatting context. Elements with a block formatting context will contain floats. This is not as important today as it once was. In fact it's not even how modern [clearfix techniques](https://css-tricks.com/snippets/css/clear-fix/) work.\n\n## Positioning schemes\n\nA box can be laid out according to one of three positioning schemes. These are [Normal flow](#normal-flow), [Floats ](#floats)and [Absolute positioning](#absolute-positioning). You are probably familiar with floats and absolute positioning because we interact with these more directly when writing CSS. Normal flow is just a name for the default positioning scheme when an element is not floated or positioned.\n\n### Normal flow\n\nNormal Flow describes the default positioning scheme and 'in-flow' describes elements that conform to this. You could consider in flow to be the natural position of elements laid out according to their source order and [formatting context](#formatting-contexts).\n\n### Floats\n\nFloat is a CSS property that causes an element to be taken out of the normal flow and shifted to the left or right as far as possible, until it touches the edge of its containing box or another floated element. When this happens, text and inline elements will wrap around the floated elements.\n\nNormally if not set, the height of an element will adjust to fit all of its descendant elements. When elements are floated they are taken out of flow and this means containers will not adjust their height to clear them.\n\nIt is this behaviour that allows multiple lines of text, heading and other elements to fluid wrap around floated content. But sometimes this is problematic. Clearfixes and establishing a new block formatting context will causes a container to clear its floated children. This technique has allowed floats to be used for layout which has been a corner-stone of web development techniques for a long time. It's still important to know but this is gradually being replaced with newer layout techniques such as Flexbox and Grid.\n\n### Absolute positioning\n\nElements with absolute positioning are removed from the flow entirely and unlike floated elements they have no impact on surrounding content.\n\nA container with relative positioning allows you to control the offset of descendant elements using absolute positioning.\n\nRelatively positioned elements can also be given an offset but this offset is relative to the element's normal position not another relative container.\n\nCSS properties `top`, `bottom`, `left` and `right` are used to calculate 'box offsets'. These properties are not two dimensional offsets but allow positioning of each edge, relative to its container’s content box.\n\nPositioned elements with overlapping offsets can result in elements occupying the same space. A stacking context is used to resolve this.\n\n### Stacking contexts\n\nStacking context determines the order that things are rendered to the page. You can think of a stacking context like a layer. Layers on the bottom of the stack are painted first and elements higher up the stack appear on top.\n\nPlacing a `z-index` on an element that is absolutely or relatively positioned is the most common way to establish a new stacking context. But there are a number of other ways a stacking context can be formed including, setting opacity, transforms, filters or using the `will-change` property.\n\nSome of these reasons are not intuitive and have more to do with rendering performance than developers expectations. It helps to understand that these layers can be rendered separately by the browsers. As a result it can sometimes be useful to intentionally to create a new stacking context for performance reasons.\n\nSetting a z-index has no effect unless a stacking context is established. The higher the z-index the higher up the stack the layer is placed.\n\nOne of the most confusing parts about stacking is that a new stacking context can be established inside an existing one. This means you can have layers of layers.\n\nIn this situation, it's not always a case of the highest z-index wins.\n\n## That's it!\n\nAlmost 3000 words and I've only briefly touched some of the important hidden parts of CSS. If you’ve read this in full congratulations and please be sure to let me know, because you deserve some kind of reward!\n\nIf you've just read some parts that’s ok too. I hope I’ve managed to clarify something or give a general insight into the processes involved. It’s been a real challenge to explain this stuff in simple terms without sacrificing accuracy. I hope got it right.\n\n",
        "type": "MarkdownRemark",
        "contentDigest": "5a5eeec50c788da6b4d03bb015e5fc8b",
        "owner": "gatsby-transformer-remark"
      },
      "frontmatter": {
        "title": ""
      },
      "excerpt": "",
      "rawMarkdownBody": "\nIf you use CSS in your daily work, your primary goal is probably focused on making things 'look right'. How this is achieved is often far less important than the end result. This means we care less about how CSS works than the correct syntax and visual results.\n\nYou may not have realised it, but the visual results of CSS are often an indirect consequence of manipulating hidden properties. Some CSS properties such as `background-color` have a direct and obvious relationship with what you see. While others such as `display` remain ambiguous to many of us because the results seem highly dependant on context.\n\nI doubt many developers could describe in simple terms what setting `display: block` actually does. At best you probably have an intuitive understanding of how properties like this work. That's ok, you can have a pretty good wrangle of CSS without understanding the underlying principles. Although, this might be knowing the solution without necessarily understanding the problem.\n\nIf this describes you, that's ok. I learnt how to work with CSS, long before I understood *how* it worked. I guess that doesn’t make it ok, ...but at least you’re not alone!\n\nThe underlying features of CSS are complicated and intentionally abstracted, yet we can't be completely unaware of them. Concepts such as the Box Model, Cascade and Specificity will be familiar to many of us. Although they are often misunderstood, knowing a little of how these work can help us write better CSS.\n\nThe same can be said for many other hidden parts of CSS. The problem with understanding these better is that the barrier to entry is even higher. It often feels like nothing can be explained in isolation. You need to know everything before you can understand the smallest part of the process.\n\nBecause of this I want to attempt to shed some light on the invisible parts of CSS, touching only on what you need to know and hopefully explaining the process in a logical order, so that you can gain a better understand of how CSS actually works.\n\nThis is a long article so if you want to skip ahead to one of these sections, I'm totally fine with that:\n\n- [Overview of the rendering process](#overview-of-the-rendering-process)\n- [Cascade](#cascade)\n- [The Box Model](#the-box-model)\n\t- [Fill Area](#fill-area)\n\t- [Width Auto](#width-auto)\n\t- [Box-sizing](#box-sizing)\n\t- [Collapsing margins](#collapsing-margins)\n- [The Visual Formatting Model](#the-visual-formatting-model)\n- [Display types](#display-types)\n- [Formatting contexts](#formatting-contexts)\n- [Positioning schemes](#positioning-schemes)\n\t- [Normal flow](#normal-flow)\n\t- [Floats](#floats)\n\t- [Absolute positioning](#absolute-positioning)\n\t- [Stacking context](#stacking-contexts)\n\n## Overview of the rendering process\n\nWhen you load an HTML document there is a lot that happens in order for that page to render.\n\nThe first step is to parse the HTML document. From this the browser builds a 'document tree'. A tree structure is a way of representing information with an obvious hierarchy like HTML. Elements in a tree can be described in terms similar to a family tree, such as descendants, parents, children and siblings.\n\nYou might have heard the term DOM. This stands for Document Object Model. It is an extension of the document tree structure, and is used to store and manipulate information about the content of a web document.\n\nAs HTML is being parsed, stylesheets and other resources are fetched. Style declarations are interpreted and resolved through a process known as the [Cascade](#cascade).\n\nDuring this process the final values of CSS properties are resolved. After calculation these values may be different to what is written in our stylesheets. For example keywords like `auto` and relative units are assigned real values, and inherited values are applied. These computed values are stored in a tree, similar to elements in the DOM, in what is unsurprisingly called the CSS Object Model or CSSOM.\n\nIt is now possible to begin the process of rendering the page. The first step in this process is the calculation of [the Box Model](#the-box-model). This is an important step for working out the size and spacing of elements, although not their final position.\n\nLess well known than the [Box Model](#the-box-model) is a process called the [Visual Formatting Model](#the-visual-formatting-model). This process determines the layout and positioning of elements on the page. It encompases some concepts you might already be familiar with such as [positioning schemes](#positioning-schemes), [formatting contexts](#formatting-contexts), [display modes](#display-types), and [stacking contexts](#stacking-contexts).\n\nFinally the page is rendered.\n\nThere might be a few terms in the paragraphs above that you are not yet familiar with. If so, what's most important is to understand that the [Cascade](#cascade), the [Box Model](#the-box-model), and the [Visual Formatting Model](#the-visual-formatting-model) are the key steps involved in interpreting, processing and rendering HTML and CSS. I’ve skipped over a lot of detail when describing each of these so we’re now going to look at these 3 steps more closely.\n\n## Cascade\n\nThe cascade is probably one of the most misunderstood features of CSS. It refers to the process of combining different stylesheets and resolving conflicts between CSS selectors.\n\nThe cascade looks at the importance, origin, specificity, and order of declarations to determine which style rules to use.\n\n**What you need to know:**\n\nMost websites have multiple stylesheets. Typically styles are added with a `link` tag that references a css file, or with a `style` tag in the HTML body. Even the most basic page will have default styles provided by the browser. This default stylesheet is sometimes called the user-agent stylesheet.\n\nDuring the cascade stylesheets are interpreted in the following order:\n\n1. !important declarations\n2. Author stylesheets\n3. Browser default stylesheets\n\n**Note:** I've skipped over user stylesheets here because they are not a common thing anymore and probably wouldn’t factor in consideration for anyone reading this.\n\nAfter combining these sources, if multiple rules apply to the same element, specificity is used to determine which rules to apply.\n\n### Specificity\n\nSpecificity is a weighting given to selectors. It's a common mistake to think of this as a single number. It’s actually 4 separate numbers or 4 categories of weighting.\n\nTo calculate specificity, count the number of:\n\n1. IDs,\n2. classes, attributes and pseudo-classes,\n3. elements and pseudo-elements\n\nFor example: `#nav .selected:hover > a::before` will be 1, 2, 2.\n\nNo number of classes will ever have a higher specificity than an ID. When comparing selectors you compare the specificity of IDs first. Only if these match do you compare the value of classes, attributes and pseudo-classes and finally, if still equal, elements and pseudo-elements.\n\nIf specificity is equal in every category, the last declaration in the source takes precedence.\n\n\nYes! I know I said 4 categories. Inlines styles have a higher specificity than IDs. Although they are technically the first category in specificity calculations you don't typically end up with competing inline styles, so it’s easier just remember that inline styles will always win specificity.\n\n**Important note:** !important declarations are not factored in specificity calculations but they do have a greater precedence than normal declarations in the cascade.\n\n### Inheritance\n\nInheritance is not part of the cascade but I've included it here because it is often discussed in conjunction with the cascade.\n\nInheritance is the process where values that apply to an element can be passed on (or inherited) by its children.\n\nYou are likely familiar with the fact that font properties, when applied to the body or another container element, are also inherited by every element inside that container. This is inheritance.\n\nNot all properties are inherited by default. Understanding inheritance is key to writing more deliberate and less verbose CSS. Forcing inheritance with the `inherit` keyword can be incredibly useful.\n\n**Note:** Some properties are such as `border-color` have a default value of `currentcolor`. This means they will use the value set on the `color` property. This default value is not the same thing as inheritance. Although the color property itself is often inherited so I tend to think of this as defacto kind of inheritance.\n\n## The Box Model\n\nUnderstanding the Box Model is essential and necessary for limiting frustration when working with layout and positioning. It is one of the most fundamental concepts in CSS.\n\nThe box model is used to calculate the width and height of elements. It is a calculation step and not solely relied upon for determining the final layout and positioning of elements.\n\n**What you need to know:**\n\nEvery element in HTML is a rectangular box. Each box has four regions defining the margin, borders, padding, and content areas of an element.\n\nBy default, when you set the width of an element, this sets the width of the content area only. When you add padding, border or margin to an element, this is added in addition to the width. In practical terms this means that two elements with a width of 50%, will not fit side-by-side if padding, margin or borders are added.\n\n<img alt=\"shows the content-width within the box model\" src=\"/img/content-width.png\" style=\"width:100%; max-width:550px;\">\n\nThat's it! It’s pretty simple right? So why is this often a source of confusion? Well, you might have encountered a few situations where things seem to behave a little differently…\n\n### Fill Area\n\nWhen you set the background of an element this fills not only the content area but also the padding and border areas as well.\n\n<img style=\"width:100%; max-width:550px;\" alt=\"shows the fill area within the box model\" src=\"/img/fill-area.png\" >\n\nConceptually we think of an HTML element as a single thing, so it's easy to think that the visual boundaries of an element are equal to its width however this is not the case. Although the visual boundaries of an element include the padding and border areas the width property is applied explicitly to the content box.\n\n**Note:** Altering the `box-sizing` property can change this behaviour.\n\n### Width Auto\n\nAnother source of potential confusion is how `width: auto` works. A width of auto is the default setting for most HTML elements and for block elements such as divs and paragraphs, `auto` will calculate the width so that the margin, border, padding and content areas combined all fit within the available space.\n\nIn this situation it can feel like adding padding and margins push inwards on the content, but in reality, the width is being recalculated to ensure everything fits. By comparison when setting a width of `100%`, the content area will fill the space available regardless of margin, padding and borders.\n\n<img style=\"width:100%; max-width:550px;\" alt=\"shows how width auto works compared to width:100%\" src=\"/img/width-auto.png\" >\n\n### Box-sizing\n\nThe box-sizing property changes the way the box model works. When box-sizing is set to `border-box` padding and border will reduce the inner width of the content area, rather than adding to the overall width of an element. This means that a width of an element is now the same as its visual width.\n\n<img style=\"width:100%; max-width:550px;\" alt=\"shows how box-sizing:border-box works\" src=\"/img/box-sizing.png\" >\n\nA lot of people prefer this, and if you're building a grid system, or any other kind of layout that requires aligning items horizontally, this can be much more intuitive way to work.\n\n### Collapsing margins\n\nIt can be really confusing when margins collapse unexpectedly and you don't know what is going on. Margins will sometimes collapse when two or more adjacent vertical margins touch and they are not separated with padding or border. A collapsing margin can also occur if the margin of a child element extends into that of its parent and is not separated by padding.\n\nMargins will not collapse if elements are absolutely positioned, floated, or have a different [formatting context](#formatting-contexts), as well as in a few other less likely situations.\n\nIf you're confused that’s ok. The rules for when margins will and will not collapse are complicated. The main thing you need to know is when elements don’t have padding or borders, vertical margins can collapse.\n\nIf you need more detail CSS Tricks has a wonderful [explanation of collapsing margins](https://css-tricks.com/what-you-should-know-about-collapsing-margins/).\n\n## The Visual Formatting Model\n\nWhile the box model calculates an element's dimensions, it’s the Visual Formatting Model that is responsible for determining the layout of these boxes. The Visual Formatting Model takes into account the box type, [positioning scheme](#positioning-schemes), relationships between elements and constraints imposed by content to determine the final position and presentation of each element on the page.\n\n**What you need to know:**\n\nThe visual formatting model traverses the document tree and generates one or more boxes required to render elements according to the CSS box model. The CSS `display` property plays a key role in determining how an element participates in the current formatting context and positioning scheme. Together these pieces determine the final layout and positioning of elements.\n\nThis is a complex step and was by far the most difficult to try and summarise. If you don't follow everything that’s ok. Understanding how we manipulate [positioning schemes](#positioning-schemes) and [formatting contexts](#formatting-contexts) through the CSS properties is a good start. If you can follow the interplay between different pieces of this model you are doing better than most. At very least you should know that they exist.\n\n## Display types\n\nWe know that setting the `display` property in CSS determines the how an element is rendered but it's not immediately clear how this works. In fact sometimes, it can even seem unpredictable.\n\nThis is because the display property determines the element's 'box type’. This hidden property consists of an inner display type, and an outer display type which together help determine how the element is rendered.\n\nThe outer display type usually resolves to either 'block' or ‘inline’ and is pretty much consistent what you expect of theses `display` properties in CSS. Technically speaking the outer display type dictates how an element participates in its parent [formatting context](#formatting-contexts).\n\nThe inner display type determines what [formatting context](#formatting-contexts) that element will generate. This will impact how its child elements are laid out.\n\nThink of how a Flexbox container works. Its outer type is `block` and its inner type is `flex`. Its children can also have an outer type of block, but their layout is influenced by the formatting context of the Flexbox container.\n\nOne way of thinking about this is that the responsibility for display is shared between an element and it's parent element.\n\n## Formatting contexts\n\nFormatting context are all about layout. They are the rules that govern the layout of elements inside a container and how they interact with each other.\n\nSome formatting contexts can be established directly on containers such as through the use of `display` values `flex`, `grid` or `table`. Other types such as block and inline formatting contexts are created as required by the browser.\n\n**Note:** At one time, because of the way it interacts with floats, it was important to understand how to make the browser establish a new block formatting context. Elements with a block formatting context will contain floats. This is not as important today as it once was. In fact it's not even how modern [clearfix techniques](https://css-tricks.com/snippets/css/clear-fix/) work.\n\n## Positioning schemes\n\nA box can be laid out according to one of three positioning schemes. These are [Normal flow](#normal-flow), [Floats ](#floats)and [Absolute positioning](#absolute-positioning). You are probably familiar with floats and absolute positioning because we interact with these more directly when writing CSS. Normal flow is just a name for the default positioning scheme when an element is not floated or positioned.\n\n### Normal flow\n\nNormal Flow describes the default positioning scheme and 'in-flow' describes elements that conform to this. You could consider in flow to be the natural position of elements laid out according to their source order and [formatting context](#formatting-contexts).\n\n### Floats\n\nFloat is a CSS property that causes an element to be taken out of the normal flow and shifted to the left or right as far as possible, until it touches the edge of its containing box or another floated element. When this happens, text and inline elements will wrap around the floated elements.\n\nNormally if not set, the height of an element will adjust to fit all of its descendant elements. When elements are floated they are taken out of flow and this means containers will not adjust their height to clear them.\n\nIt is this behaviour that allows multiple lines of text, heading and other elements to fluid wrap around floated content. But sometimes this is problematic. Clearfixes and establishing a new block formatting context will causes a container to clear its floated children. This technique has allowed floats to be used for layout which has been a corner-stone of web development techniques for a long time. It's still important to know but this is gradually being replaced with newer layout techniques such as Flexbox and Grid.\n\n### Absolute positioning\n\nElements with absolute positioning are removed from the flow entirely and unlike floated elements they have no impact on surrounding content.\n\nA container with relative positioning allows you to control the offset of descendant elements using absolute positioning.\n\nRelatively positioned elements can also be given an offset but this offset is relative to the element's normal position not another relative container.\n\nCSS properties `top`, `bottom`, `left` and `right` are used to calculate 'box offsets'. These properties are not two dimensional offsets but allow positioning of each edge, relative to its container’s content box.\n\nPositioned elements with overlapping offsets can result in elements occupying the same space. A stacking context is used to resolve this.\n\n### Stacking contexts\n\nStacking context determines the order that things are rendered to the page. You can think of a stacking context like a layer. Layers on the bottom of the stack are painted first and elements higher up the stack appear on top.\n\nPlacing a `z-index` on an element that is absolutely or relatively positioned is the most common way to establish a new stacking context. But there are a number of other ways a stacking context can be formed including, setting opacity, transforms, filters or using the `will-change` property.\n\nSome of these reasons are not intuitive and have more to do with rendering performance than developers expectations. It helps to understand that these layers can be rendered separately by the browsers. As a result it can sometimes be useful to intentionally to create a new stacking context for performance reasons.\n\nSetting a z-index has no effect unless a stacking context is established. The higher the z-index the higher up the stack the layer is placed.\n\nOne of the most confusing parts about stacking is that a new stacking context can be established inside an existing one. This means you can have layers of layers.\n\nIn this situation, it's not always a case of the highest z-index wins.\n\n## That's it!\n\nAlmost 3000 words and I've only briefly touched some of the important hidden parts of CSS. If you’ve read this in full congratulations and please be sure to let me know, because you deserve some kind of reward!\n\nIf you've just read some parts that’s ok too. I hope I’ve managed to clarify something or give a general insight into the processes involved. It’s been a real challenge to explain this stuff in simple terms without sacrificing accuracy. I hope got it right.\n\n"
    },
    "31579d99-c3aa-5e9f-922a-b764fad2b56f": {
      "id": "31579d99-c3aa-5e9f-922a-b764fad2b56f",
      "children": [],
      "parent": "f3ba2b4b-6e7f-5870-b7cf-5cc21e58ce8c",
      "internal": {
        "content": "Details of my CSS workflow and frontend development processes in 2015.",
        "type": "MarkdownRemark",
        "contentDigest": "5ee2ab19f0ed5d880fab2277418290b4",
        "owner": "gatsby-transformer-remark"
      },
      "frontmatter": {
        "title": ""
      },
      "excerpt": "",
      "rawMarkdownBody": "Details of my CSS workflow and frontend development processes in 2015."
    },
    "9f0239cb-b07a-5817-b4ea-7cca5194ad31": {
      "id": "9f0239cb-b07a-5817-b4ea-7cca5194ad31",
      "children": [],
      "parent": "fb571099-b2bd-50d9-86fa-bac3fea518cb",
      "internal": {
        "content": "When starting a new project with new developers one of the first things I want to do is get on the same page in terms of how we structure and manage CSS.\n\nThere are so many methodologies and guidelines today that I wonder why you would bother writing your own detailed documentation.\n\nIt's pretty simple choose a methodology, choose a set of guidelines and choose a build process.\n\n### Methodologies\n\n  - [BEM](https://en.bem.info/)\n  - [SMACSS](https://smacss.com/)\n  - [OOCSS](http://www.smashingmagazine.com/2011/12/12/an-introduction-to-object-oriented-css-oocss/)\n\n### Guidelines\n\n  - [codeguide.co](http://codeguide.co/#css)\n  - [cssguidelin.es](http://cssguidelin.es/)\n  - [idiomatic-css](https://github.com/necolas/idiomatic-css)\n\nIt doesn't matter which set of methodologies or guidelines you prefer at the end of the day consistency is what you are after. You could just place these all on a big wheel and spin it.\n\nThe problem we might have with this approach is they overlap, methodologies wander into the territory of guidelines, and guidelines get opinionated our build tools and processes. In my view we'd be better off if there were clearer guidelines for our guidelines. No, I'm not *actually* suggesting we write guidelines about guidelines. But if methodologies were primarily about organisation, structure and other big picture stuff, and guidelines were mostly about the style, formatting and other fine detail, we'd be more able to mix and match.\n\nSo what do you do about that short of specifying every detail? I recently came across [Chris Coyier's tour of CodePen's CSS](http://codepen.io/chriscoyier/blog/codepens-css) which was a response to [Ian Feather's tour of Lonely Planet's CSS](http://ianfeather.co.uk/css-at-lonely-planet/), which was in response to [Mark Otto's tour of GitHub's CSS](http://markdotto.com/2014/07/23/githubs-css/). I promise I am not going to add another 'in response' article to add to that chain! But it did get me thinking. This is the perfect way to state your preferred methodologies and guidelines and how you apply them.\n\nRather than doing this as a review of how you work what if you did this *before* starting a project as an agreed way of how you would like to work? You could state how strictly you follow certain guidelines, the things that matter most and where you are more agnostic. You can list your key points of difference and detail your preferred build process and importantly the reasons for these choices. It seems like a much faster way to arrive at a consensus in a new team.\n\nSo I've written down how I CSS for a typical website project and I thought I'd share it. Remember this is how I like to CSS and I'm not saying this is how you should CSS, or even that this always works for me. I'll be flattered if you find this useful or apply this method for arriving at a consensus within your team. But there is no expectation that what I have written is right for you.\n\n## How I CSS\n\n  - [I follow SMACSS conventions](#css-architecture)\n  - [I use SCSS](#preprocessors)\n  - [I use Autoprefixer](#autoprefixer)\n  - [I use CSSLint](#linting)\n  - [I comment extensively](#comments-docs)\n  - [I use Grunt for my build process](#build-it)\n  - [I don't always follow my own advice](#human-am-i)\n\n<h3 id=\"css-architecture\">CSS Architecture</h3>\n\nI lean towards the naming conventions in SMACSS and generally aim to structure my CSS according to these guidelines. However I also prefer common-sense over strict adherence to naming conventions and guidelines.\n\nI try to follow [these guidelines](http://mdo.github.io/code-guide/#css) by Mark Otto for the smaller things like formatting and declaration order. I also have immense respect for Harry Robert's [CSS Guidelines](http://cssguidelin.es/) but my personal preferences differ (slightly) from Harry's and his guidelines are so extensive it's easier for me to list my points of difference from Mark's code guide.\n\nSome of my key personal preferences include:\n\n  - using 'classy' selectors and not IDs\n  - don't nest media queries, it makes me sad :(\n  - I like tabs, but I don't hate spaces so don't hate me\n  - unlike this bullet point, I try to keep class names and selectors chains as short as possible without sacrificing clarity\n  - I care about accessibility and valid mark-up\n  - I like REM units, but I'm happy to use the odd pixel\n\n<h3 id=\"preprocessors\">Preprocessors</h3>\n\nI use SASS and the SCSS syntax because it's widely used and understood. But more importantly because it works for me.\n\nSource SCSS files are compiled into two separate stylesheets:\n\n  - a bare minimum set of styles for older devices and <IE9\n  - a fully featured and enhanced version for everything else\n\nI minifiy my CSS files straight out of SASS. I also generate source map files and publish my .SCSS files to production.  \n\nI did use LESS for a long time because it felt more declarative like CSS is 'meant' to be, however also I enjoyed creating wild experimental things with SASS. Eventually I made the switch using SASS almost exclusively, in part because of its growing popularity. I know, I'm a sell-out and a sheep!\n\n**Note:** I don't get too excited about my SASS (in production). I keep it basic with variables, keep mixins simple, use color and math functions, don't nest too deeply and don't try to be clever or fancy.\n\nI also frequently inline my critical CSS and load additional styles asynchronously for better performance using the method described by Scott Jhel in [How we make RWD sites load fast as heck](https://www.filamentgroup.com/lab/performance-rwd.html) the results of this can be amazingly noticeable.\n\n<h3 id=\"autoprefixer\">Autoprefixer</h3>\n\nI don't use any vendor prefixes in my SCSS or use mixins to generate them. Rather I write regular CSS according to the specification and run Autoprefixer as a post process (after SASS produces the CSS files). Not only is this easier, but it produces a better quality result because developers are human and sometimes forget to use prefixes and mixins. It also allows me to easily remove large chunks of legacy code by simply updating the target browsers in the Autoprefixer config.\n\n<h3 id=\"linting\">Linting</h3>\n\nRather than maintaining my own set of rules for code formatting I mostly follow suggestions from [Mark Otto's code-guide](http://mdo.github.io/code-guide/#css)\n\nI differ in some respects such as I prefer using tabs rather than 2 spaces. But importantly, I don't get upset about this or any other code formatting convention. I understand that each developer has their own habits and preferences. When working together it is nice when if our code looks the same and is reasonably tidy, so that's why my build process usually includes linting.\n\n<h3 id=\"comments-docs\">Commenting &amp; Documentation</h3>\n\nI am liberal with my use of comments. No one has ever complained a stylesheet is over documented. Comments range from highly structured block declarations describing modules to silly jokes and apologies for hacks, both are good.\n\nIdeally each UI component, utility class, layout module and mixin should have a block comment briefly describing it.\n\nIn the past I've tried a whole range of automated documentation tools for SASS and CSS. My \"professional\" opinion is they all suck a little bit, so I don't get too hung up about it. When you are working with a team of developers a little bit of sucky documentation is often better than none.\n\nAt the end of the day documentation is made for humans and machines are only good at providing us a with the templates and structure. You need to put in real work to get good CSS documentation and this is only good if someone is going to read it. Find the right balance of documentation for your project, it might be none or it might be a lot.\n\nI think of the [lonely planet style guide](http://rizzo.lonelyplanet.com/styleguide/) and the process described by [Ian Feather](http://ianfeather.co.uk/a-maintainable-style-guide/) as the standard we should be aiming for.\n\n<h3 id=\"build-it\">Build process</h3>\n\nI chose Grunt to string together the various tasks that help me build and maintain my stylesheets:\n\nLinting -> Preprocessor -> Autoprefixer -> CSS\n\nI probably should have chosen Gulp cause word is it's much cooler now, but at the end of the day I just want to keep my build process as simple as possible and Grunt has allowed me to do this. I try not to over engineer the build process.\n\n<h3 id=\"human-am-i\">I am a Human</h3>\n\nFinally I should say that at best I do this only about 60-70% of the time. Sometimes for small projects I very loosely apply these guidelines or don't follow them at all. Sometimes I'm lazy or tired or I'm tricked into thinking some marketing element will only be on the homepage for \"2 weeks absolute maximum\" and it's Friday so I just do it quickly. Two years later it's still there. I'm ok with that, these are only guidelines and we are humans not machines.\n\n**Final disclaimer**: Things are constantly changing. This might not be how I CSS in the future. And ok, I guess this is kind of an 'in response' article.\n\n## You might like\n\n  - [Chris Coyier's tour of CodePen's CSS](http://codepen.io/chriscoyier/blog/codepens-css)\n  - [Ian Feather's tour of Lonely Planet's CSS](http://ianfeather.co.uk/css-at-lonely-planet/)\n  - [Mark Otto's tour of GitHub's CSS](http://markdotto.com/2014/07/23/githubs-css/).\n",
        "type": "MarkdownRemark",
        "contentDigest": "57ac60e44c440cba4a76abf04976feb8",
        "owner": "gatsby-transformer-remark"
      },
      "frontmatter": {
        "title": ""
      },
      "excerpt": "",
      "rawMarkdownBody": "When starting a new project with new developers one of the first things I want to do is get on the same page in terms of how we structure and manage CSS.\n\nThere are so many methodologies and guidelines today that I wonder why you would bother writing your own detailed documentation.\n\nIt's pretty simple choose a methodology, choose a set of guidelines and choose a build process.\n\n### Methodologies\n\n  - [BEM](https://en.bem.info/)\n  - [SMACSS](https://smacss.com/)\n  - [OOCSS](http://www.smashingmagazine.com/2011/12/12/an-introduction-to-object-oriented-css-oocss/)\n\n### Guidelines\n\n  - [codeguide.co](http://codeguide.co/#css)\n  - [cssguidelin.es](http://cssguidelin.es/)\n  - [idiomatic-css](https://github.com/necolas/idiomatic-css)\n\nIt doesn't matter which set of methodologies or guidelines you prefer at the end of the day consistency is what you are after. You could just place these all on a big wheel and spin it.\n\nThe problem we might have with this approach is they overlap, methodologies wander into the territory of guidelines, and guidelines get opinionated our build tools and processes. In my view we'd be better off if there were clearer guidelines for our guidelines. No, I'm not *actually* suggesting we write guidelines about guidelines. But if methodologies were primarily about organisation, structure and other big picture stuff, and guidelines were mostly about the style, formatting and other fine detail, we'd be more able to mix and match.\n\nSo what do you do about that short of specifying every detail? I recently came across [Chris Coyier's tour of CodePen's CSS](http://codepen.io/chriscoyier/blog/codepens-css) which was a response to [Ian Feather's tour of Lonely Planet's CSS](http://ianfeather.co.uk/css-at-lonely-planet/), which was in response to [Mark Otto's tour of GitHub's CSS](http://markdotto.com/2014/07/23/githubs-css/). I promise I am not going to add another 'in response' article to add to that chain! But it did get me thinking. This is the perfect way to state your preferred methodologies and guidelines and how you apply them.\n\nRather than doing this as a review of how you work what if you did this *before* starting a project as an agreed way of how you would like to work? You could state how strictly you follow certain guidelines, the things that matter most and where you are more agnostic. You can list your key points of difference and detail your preferred build process and importantly the reasons for these choices. It seems like a much faster way to arrive at a consensus in a new team.\n\nSo I've written down how I CSS for a typical website project and I thought I'd share it. Remember this is how I like to CSS and I'm not saying this is how you should CSS, or even that this always works for me. I'll be flattered if you find this useful or apply this method for arriving at a consensus within your team. But there is no expectation that what I have written is right for you.\n\n## How I CSS\n\n  - [I follow SMACSS conventions](#css-architecture)\n  - [I use SCSS](#preprocessors)\n  - [I use Autoprefixer](#autoprefixer)\n  - [I use CSSLint](#linting)\n  - [I comment extensively](#comments-docs)\n  - [I use Grunt for my build process](#build-it)\n  - [I don't always follow my own advice](#human-am-i)\n\n<h3 id=\"css-architecture\">CSS Architecture</h3>\n\nI lean towards the naming conventions in SMACSS and generally aim to structure my CSS according to these guidelines. However I also prefer common-sense over strict adherence to naming conventions and guidelines.\n\nI try to follow [these guidelines](http://mdo.github.io/code-guide/#css) by Mark Otto for the smaller things like formatting and declaration order. I also have immense respect for Harry Robert's [CSS Guidelines](http://cssguidelin.es/) but my personal preferences differ (slightly) from Harry's and his guidelines are so extensive it's easier for me to list my points of difference from Mark's code guide.\n\nSome of my key personal preferences include:\n\n  - using 'classy' selectors and not IDs\n  - don't nest media queries, it makes me sad :(\n  - I like tabs, but I don't hate spaces so don't hate me\n  - unlike this bullet point, I try to keep class names and selectors chains as short as possible without sacrificing clarity\n  - I care about accessibility and valid mark-up\n  - I like REM units, but I'm happy to use the odd pixel\n\n<h3 id=\"preprocessors\">Preprocessors</h3>\n\nI use SASS and the SCSS syntax because it's widely used and understood. But more importantly because it works for me.\n\nSource SCSS files are compiled into two separate stylesheets:\n\n  - a bare minimum set of styles for older devices and <IE9\n  - a fully featured and enhanced version for everything else\n\nI minifiy my CSS files straight out of SASS. I also generate source map files and publish my .SCSS files to production.  \n\nI did use LESS for a long time because it felt more declarative like CSS is 'meant' to be, however also I enjoyed creating wild experimental things with SASS. Eventually I made the switch using SASS almost exclusively, in part because of its growing popularity. I know, I'm a sell-out and a sheep!\n\n**Note:** I don't get too excited about my SASS (in production). I keep it basic with variables, keep mixins simple, use color and math functions, don't nest too deeply and don't try to be clever or fancy.\n\nI also frequently inline my critical CSS and load additional styles asynchronously for better performance using the method described by Scott Jhel in [How we make RWD sites load fast as heck](https://www.filamentgroup.com/lab/performance-rwd.html) the results of this can be amazingly noticeable.\n\n<h3 id=\"autoprefixer\">Autoprefixer</h3>\n\nI don't use any vendor prefixes in my SCSS or use mixins to generate them. Rather I write regular CSS according to the specification and run Autoprefixer as a post process (after SASS produces the CSS files). Not only is this easier, but it produces a better quality result because developers are human and sometimes forget to use prefixes and mixins. It also allows me to easily remove large chunks of legacy code by simply updating the target browsers in the Autoprefixer config.\n\n<h3 id=\"linting\">Linting</h3>\n\nRather than maintaining my own set of rules for code formatting I mostly follow suggestions from [Mark Otto's code-guide](http://mdo.github.io/code-guide/#css)\n\nI differ in some respects such as I prefer using tabs rather than 2 spaces. But importantly, I don't get upset about this or any other code formatting convention. I understand that each developer has their own habits and preferences. When working together it is nice when if our code looks the same and is reasonably tidy, so that's why my build process usually includes linting.\n\n<h3 id=\"comments-docs\">Commenting &amp; Documentation</h3>\n\nI am liberal with my use of comments. No one has ever complained a stylesheet is over documented. Comments range from highly structured block declarations describing modules to silly jokes and apologies for hacks, both are good.\n\nIdeally each UI component, utility class, layout module and mixin should have a block comment briefly describing it.\n\nIn the past I've tried a whole range of automated documentation tools for SASS and CSS. My \"professional\" opinion is they all suck a little bit, so I don't get too hung up about it. When you are working with a team of developers a little bit of sucky documentation is often better than none.\n\nAt the end of the day documentation is made for humans and machines are only good at providing us a with the templates and structure. You need to put in real work to get good CSS documentation and this is only good if someone is going to read it. Find the right balance of documentation for your project, it might be none or it might be a lot.\n\nI think of the [lonely planet style guide](http://rizzo.lonelyplanet.com/styleguide/) and the process described by [Ian Feather](http://ianfeather.co.uk/a-maintainable-style-guide/) as the standard we should be aiming for.\n\n<h3 id=\"build-it\">Build process</h3>\n\nI chose Grunt to string together the various tasks that help me build and maintain my stylesheets:\n\nLinting -> Preprocessor -> Autoprefixer -> CSS\n\nI probably should have chosen Gulp cause word is it's much cooler now, but at the end of the day I just want to keep my build process as simple as possible and Grunt has allowed me to do this. I try not to over engineer the build process.\n\n<h3 id=\"human-am-i\">I am a Human</h3>\n\nFinally I should say that at best I do this only about 60-70% of the time. Sometimes for small projects I very loosely apply these guidelines or don't follow them at all. Sometimes I'm lazy or tired or I'm tricked into thinking some marketing element will only be on the homepage for \"2 weeks absolute maximum\" and it's Friday so I just do it quickly. Two years later it's still there. I'm ok with that, these are only guidelines and we are humans not machines.\n\n**Final disclaimer**: Things are constantly changing. This might not be how I CSS in the future. And ok, I guess this is kind of an 'in response' article.\n\n## You might like\n\n  - [Chris Coyier's tour of CodePen's CSS](http://codepen.io/chriscoyier/blog/codepens-css)\n  - [Ian Feather's tour of Lonely Planet's CSS](http://ianfeather.co.uk/css-at-lonely-planet/)\n  - [Mark Otto's tour of GitHub's CSS](http://markdotto.com/2014/07/23/githubs-css/).\n"
    },
    "4783e06f-705c-5e04-b647-0b475e5a8116": {
      "id": "4783e06f-705c-5e04-b647-0b475e5a8116",
      "children": [],
      "parent": "aab62576-341d-5551-8ca3-b2de36174327",
      "internal": {
        "content": "This article is a little dated now. Whilst some of my processes may have changed, I think the overall message of not attempting to write and maintain a unique set of guidelines and methodologies, but articulating how you apply existing guidelines is still a good idea for front-end teams.",
        "type": "MarkdownRemark",
        "contentDigest": "b10d8093c328c7f594fe562f385cf576",
        "owner": "gatsby-transformer-remark"
      },
      "frontmatter": {
        "title": ""
      },
      "excerpt": "",
      "rawMarkdownBody": "This article is a little dated now. Whilst some of my processes may have changed, I think the overall message of not attempting to write and maintain a unique set of guidelines and methodologies, but articulating how you apply existing guidelines is still a good idea for front-end teams."
    },
    "14a33037-42a2-5e73-9e14-b46115e99403": {
      "id": "14a33037-42a2-5e73-9e14-b46115e99403",
      "children": [],
      "parent": "cafbb96f-8489-5af7-9b6f-45908bc1638b",
      "internal": {
        "content": "Some practical examples of using calc and viewport units for fluid typography and more.",
        "type": "MarkdownRemark",
        "contentDigest": "a9546bd3efb7ab3aaa114348def723a1",
        "owner": "gatsby-transformer-remark"
      },
      "frontmatter": {
        "title": ""
      },
      "excerpt": "",
      "rawMarkdownBody": "Some practical examples of using calc and viewport units for fluid typography and more."
    },
    "9cbd10f5-d084-57d6-9bc5-e5e6a935278b": {
      "id": "9cbd10f5-d084-57d6-9bc5-e5e6a935278b",
      "children": [],
      "parent": "e0cb0a30-a6cd-522f-a826-58579b181bb8",
      "internal": {
        "content": "A few months ago I published a [fluid type technique](/writing/precise-control-responsive-typography/) that doesn't require any JavaScript. Even though I consider it experimental the technique works well enough as a progressive enhancement and it generated a lot of interest, comments and suggestions. So I thought I'd put together a bunch of examples and address some comments.\n\n## Fluid type with pixels\n\nThis is a simplified version of my original example. The minimum font size is 14px and the maximum is 22px. I've removed a redundant media query and reduced the complexity of the calc() equation.\n\n```css\n.fluid-type {\n  font-size: 14px;\n}\n\n@media screen and (min-width: 320px) {\n  .fluid-type {\n    font-size: calc(14px + 8 * ((100vw - 320px) / 960));\n  }\n}\n\n@media screen and (min-width: 1280px) {\n  .fluid-type {\n    font-size: 22px;\n  }\n}\n```\n\n### Example\n\n<p class=\"example-1\">Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean commodo ligula eget dolor. Aenean massa. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Donec quam felis, ultricies nec, pellentesque eu, pretium quis, sem. Nulla consequat massa quis enim. Donec pede justo, fringilla vel, aliquet nec, vulputate eget, arcu. In enim justo, rhoncus ut, imperdiet a, venenatis vitae, justo.</p>\n\n\n## Fluid type with Rem units\n\nThis example should have the same result as the one above when the base font size is 16px (default).\n\nIt shows that the technique works with any length unit, as long as you can use it in a media query. It also addresses comments regarding how my initial example will override user preferences for the default font size.\n\nThe only catch is that all unit types must be the same for the calc() equation to work. That's a shame because we often use different unit types for breakpoints in media queries than we do for `font-size`.\n\n\n```css\n.fluid-type {\n  font-size: 0.875rem;\n}\n\n@media screen and (min-width: 20rem) {\n  .fluid-type {\n    font-size: calc(0.875rem + 0.5 * ((100vw - 20rem) / 60));\n  }\n}\n\n@media screen and (min-width: 80rem) {\n  .fluid-type {\n    font-size: 1.375rem;\n  }\n}\n```\n\n### Example\n\n<p class=\"example-2\">Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean commodo ligula eget dolor. Aenean massa. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Donec quam felis, ultricies nec, pellentesque eu, pretium quis, sem. Nulla consequat massa quis enim. Donec pede justo, fringilla vel, aliquet nec, vulputate eget, arcu. In enim justo, rhoncus ut, imperdiet a, venenatis vitae, justo.</p>\n\n## Reverse fluid type\n\nIn this example the text gets smaller as the viewport gets larger. This might have novel uses or it might not.\n\n```css\n.fluid-type {\n  font-size: 22px;\n}\n\n@media screen and (min-width: 320px) {\n  .fluid-type {\n    font-size: calc(22px + -8 * ((100vw - 320px) / 960));\n  }\n}\n\n@media screen and (min-width: 1280px) {\n  .fluid-type {\n    font-size: 14px;\n  }\n}\n```\n\n### Example\n\n<p class=\"example-3\">Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean commodo ligula eget dolor. Aenean massa. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Donec quam felis, ultricies nec, pellentesque eu, pretium quis, sem. Nulla consequat massa quis enim. Donec pede justo, fringilla vel, aliquet nec, vulputate eget, arcu. In enim justo, rhoncus ut, imperdiet a, venenatis vitae, justo.</p>\n\n\n## Fluid line-height (Molten leading)\n\nIn this example the line-height is fluid. This is a pure CSS implementation of Wilto's [Molten leading technique](https://github.com/Wilto/Molten-Leading).\n\n```css\n.molten-leading {\n  line-height: 1.2em;\n}\n\n@media screen and (min-width: 20em) {\n  .molten-leading {\n    line-height: calc(1.2em + 0.6 * ((100vw - 20em) / 60));\n  }\n}\n\n@media screen and (min-width: 80em) {\n  .molten-leading {\n    line-height: 1.8em;\n  }\n}\n```\n\n### Example\n\n<p class=\"example-4\">Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean commodo ligula eget dolor. Aenean massa. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Donec quam felis, ultricies nec, pellentesque eu, pretium quis, sem. Nulla consequat massa quis enim. Donec pede justo, fringilla vel, aliquet nec, vulputate eget, arcu. In enim justo, rhoncus ut, imperdiet a, venenatis vitae, justo.</p>\n\n\n## Fluid box\n\nThis example shows how the technique can be applied to more than just font sizes, in this case `width`.\n\n```css\n.fluid-box {\n  width: 200px;\n}\n\n@media screen and (min-width: 320px) {\n  .fluid-box {\n    width: calc(200px + 300 * ((100vw - 320px) / 960));\n  }\n}\n\n@media screen and (min-width: 1280px) {\n  .fluid-box {\n    width: 500px;\n  }\n}\n```\n\n### Example\n\n<p class=\"example-5\">The width of this box will scale and at a different rate to the viewport.</p>\n\n## Fluid type in Sass\n\n[Indrek Paas](https://twitter.com/indrekpaas) developed a Sass mixin to help make fluid type using this technique easier. [You can find the latest fluid type Sass mixin here](http://sassmeister.com/gist/7f22e44ace49b5124eec).\n\n**Update**: I now recommend using [this mixin](https://codepen.io/MadeByMike/pen/vNrvdZ)\n\nI use a slightly modified version to generate the examples on this page.\n\n### Example:\n\n```scss\n.fluid-type {\n  @include fluid-type(320px, 1280px, 14px, 18px);\n}\n```\n\n## Fluid type in Less\n\nIf Less is how you roll I've got you covered with a [Less mixin](http://codepen.io/MadeByMike/pen/RWJyML).\n\n## Fluid type in PostCSS\n\n[Rucksack is a postCSS module](https://www.npmjs.com/package/rucksack-css) that makes use of this technique for fluid typography.\n\n\nI have a collection of [other examples on CodePen](http://codepen.io/MadeByMike/pens/tags/2/?selected_tag=responsive+typography). [Let me know](https://twitter.com/MikeRiethmuller) if you have one you'd like me to share.\n",
        "type": "MarkdownRemark",
        "contentDigest": "f7980b1c4d34bdc9c4b30db1f151ced6",
        "owner": "gatsby-transformer-remark"
      },
      "frontmatter": {
        "title": ""
      },
      "excerpt": "",
      "rawMarkdownBody": "A few months ago I published a [fluid type technique](/writing/precise-control-responsive-typography/) that doesn't require any JavaScript. Even though I consider it experimental the technique works well enough as a progressive enhancement and it generated a lot of interest, comments and suggestions. So I thought I'd put together a bunch of examples and address some comments.\n\n## Fluid type with pixels\n\nThis is a simplified version of my original example. The minimum font size is 14px and the maximum is 22px. I've removed a redundant media query and reduced the complexity of the calc() equation.\n\n```css\n.fluid-type {\n  font-size: 14px;\n}\n\n@media screen and (min-width: 320px) {\n  .fluid-type {\n    font-size: calc(14px + 8 * ((100vw - 320px) / 960));\n  }\n}\n\n@media screen and (min-width: 1280px) {\n  .fluid-type {\n    font-size: 22px;\n  }\n}\n```\n\n### Example\n\n<p class=\"example-1\">Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean commodo ligula eget dolor. Aenean massa. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Donec quam felis, ultricies nec, pellentesque eu, pretium quis, sem. Nulla consequat massa quis enim. Donec pede justo, fringilla vel, aliquet nec, vulputate eget, arcu. In enim justo, rhoncus ut, imperdiet a, venenatis vitae, justo.</p>\n\n\n## Fluid type with Rem units\n\nThis example should have the same result as the one above when the base font size is 16px (default).\n\nIt shows that the technique works with any length unit, as long as you can use it in a media query. It also addresses comments regarding how my initial example will override user preferences for the default font size.\n\nThe only catch is that all unit types must be the same for the calc() equation to work. That's a shame because we often use different unit types for breakpoints in media queries than we do for `font-size`.\n\n\n```css\n.fluid-type {\n  font-size: 0.875rem;\n}\n\n@media screen and (min-width: 20rem) {\n  .fluid-type {\n    font-size: calc(0.875rem + 0.5 * ((100vw - 20rem) / 60));\n  }\n}\n\n@media screen and (min-width: 80rem) {\n  .fluid-type {\n    font-size: 1.375rem;\n  }\n}\n```\n\n### Example\n\n<p class=\"example-2\">Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean commodo ligula eget dolor. Aenean massa. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Donec quam felis, ultricies nec, pellentesque eu, pretium quis, sem. Nulla consequat massa quis enim. Donec pede justo, fringilla vel, aliquet nec, vulputate eget, arcu. In enim justo, rhoncus ut, imperdiet a, venenatis vitae, justo.</p>\n\n## Reverse fluid type\n\nIn this example the text gets smaller as the viewport gets larger. This might have novel uses or it might not.\n\n```css\n.fluid-type {\n  font-size: 22px;\n}\n\n@media screen and (min-width: 320px) {\n  .fluid-type {\n    font-size: calc(22px + -8 * ((100vw - 320px) / 960));\n  }\n}\n\n@media screen and (min-width: 1280px) {\n  .fluid-type {\n    font-size: 14px;\n  }\n}\n```\n\n### Example\n\n<p class=\"example-3\">Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean commodo ligula eget dolor. Aenean massa. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Donec quam felis, ultricies nec, pellentesque eu, pretium quis, sem. Nulla consequat massa quis enim. Donec pede justo, fringilla vel, aliquet nec, vulputate eget, arcu. In enim justo, rhoncus ut, imperdiet a, venenatis vitae, justo.</p>\n\n\n## Fluid line-height (Molten leading)\n\nIn this example the line-height is fluid. This is a pure CSS implementation of Wilto's [Molten leading technique](https://github.com/Wilto/Molten-Leading).\n\n```css\n.molten-leading {\n  line-height: 1.2em;\n}\n\n@media screen and (min-width: 20em) {\n  .molten-leading {\n    line-height: calc(1.2em + 0.6 * ((100vw - 20em) / 60));\n  }\n}\n\n@media screen and (min-width: 80em) {\n  .molten-leading {\n    line-height: 1.8em;\n  }\n}\n```\n\n### Example\n\n<p class=\"example-4\">Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean commodo ligula eget dolor. Aenean massa. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Donec quam felis, ultricies nec, pellentesque eu, pretium quis, sem. Nulla consequat massa quis enim. Donec pede justo, fringilla vel, aliquet nec, vulputate eget, arcu. In enim justo, rhoncus ut, imperdiet a, venenatis vitae, justo.</p>\n\n\n## Fluid box\n\nThis example shows how the technique can be applied to more than just font sizes, in this case `width`.\n\n```css\n.fluid-box {\n  width: 200px;\n}\n\n@media screen and (min-width: 320px) {\n  .fluid-box {\n    width: calc(200px + 300 * ((100vw - 320px) / 960));\n  }\n}\n\n@media screen and (min-width: 1280px) {\n  .fluid-box {\n    width: 500px;\n  }\n}\n```\n\n### Example\n\n<p class=\"example-5\">The width of this box will scale and at a different rate to the viewport.</p>\n\n## Fluid type in Sass\n\n[Indrek Paas](https://twitter.com/indrekpaas) developed a Sass mixin to help make fluid type using this technique easier. [You can find the latest fluid type Sass mixin here](http://sassmeister.com/gist/7f22e44ace49b5124eec).\n\n**Update**: I now recommend using [this mixin](https://codepen.io/MadeByMike/pen/vNrvdZ)\n\nI use a slightly modified version to generate the examples on this page.\n\n### Example:\n\n```scss\n.fluid-type {\n  @include fluid-type(320px, 1280px, 14px, 18px);\n}\n```\n\n## Fluid type in Less\n\nIf Less is how you roll I've got you covered with a [Less mixin](http://codepen.io/MadeByMike/pen/RWJyML).\n\n## Fluid type in PostCSS\n\n[Rucksack is a postCSS module](https://www.npmjs.com/package/rucksack-css) that makes use of this technique for fluid typography.\n\n\nI have a collection of [other examples on CodePen](http://codepen.io/MadeByMike/pens/tags/2/?selected_tag=responsive+typography). [Let me know](https://twitter.com/MikeRiethmuller) if you have one you'd like me to share.\n"
    },
    "befdb6a6-db3f-539d-9702-fe719b3d6a1c": {
      "id": "befdb6a6-db3f-539d-9702-fe719b3d6a1c",
      "children": [],
      "parent": "7211b149-f415-5cb0-a4ff-aac39a578d73",
      "internal": {
        "content": "A solution for transitioning lengths values in CSS through more than one 'bending point'.",
        "type": "MarkdownRemark",
        "contentDigest": "9d80d889d26bcb5ef4e54e9d3ca0b90b",
        "owner": "gatsby-transformer-remark"
      },
      "frontmatter": {
        "title": ""
      },
      "excerpt": "",
      "rawMarkdownBody": "A solution for transitioning lengths values in CSS through more than one 'bending point'."
    },
    "af56f6cc-9f71-5f91-8123-ff59e47befd1": {
      "id": "af56f6cc-9f71-5f91-8123-ff59e47befd1",
      "children": [],
      "parent": "d4412520-8f39-58a6-ac7f-23612cf49f92",
      "internal": {
        "content": "A few years ago I wrote about fluid typography techniques that show how you can use calc() and viewport units to create transitions between different font-sizes as the viewport size changes. If you'd like to know more about how this technique works you should read my article [Precise control over responsive typography](https://madebymike.com.au/writing/precise-control-responsive-typography/).\n\nRecently these ideas have circulated and gained more traction. I've seen more large sites using fluid typography and other people writing about it and expanding on my initial ideas and techniques. One recent example of this was an article by Jake Wilson [CSS Poly Fluid Sizing using calc(), vw, breakpoints and linear equations](https://medium.com/@jakobud/css-polyfluidsizing-using-calc-vw-breakpoints-and-linear-equations-8e15505d21ab).\n\nOne of the most interesting things in Jake's article is the idea of having multiple points of transition. He refers to these as \"*Breakpoints + Multiple Linear Equations*\" but I like to think of these as \"bending points\". I like the term bending points rather than breakpoints for these because to me, a breakpoint implies there should be a jump and that's not what this is. These are intermediary points where the rate of scale changes.\n\nThis idea of non-linear transitions is something I’ve been thinking about for a while. Unfortunately at the moment we can't do this with CSS alone. So when I’m asked about this, I usually reply with the same suggestion Jake has, that is to use multiple linear transitions. But I remain a little hesitant about how people might use this technique.\n\nI'd love to be able to use non-linear equations for transitions of font-size or other properties, but until there is a native function in CSS, I think adding a large number of intermediary steps only adds complexity.\n\nUndoubtedly some people will be willing to set many bending points at the cost readability and maintainability. In a lot of cases, readability and maintainability are more important than finessing a few pixels difference at uncommon screen sizes. That's why the original examples I created only allowed for only a single minimum and maximum font-size.\n\nI also felt that that equations and ideas were complex enough and based on the feedback I've had, I think this is often still the case. I get that, sometimes you just want the font to bend and you don’t want to worry about how the maths works.\n\nYet this is only one type of user. Clearly many people want to do this, and despite the complexity, some designs could benefit from using a small number of bending points. Besides, CSS has other complex concepts.\n\nIf you want to use bending points to transition CSS values between multiple intermediary points, it should be done deliberately and with restraint; not just because you can. Aside from adding complexity to the CSS, for standard body text with limited variation in size the difference is not particularly noticeable. This is a technique better reserved for headings and other key features where small details matter. Assuming you do have a good case for more than one bending point, how do you determine what those intermediary points should be? And how do we make this accessible to all types of users?\n\nJake talks about statistics as a tool for determining the minimum and maximum font-sizes at points along a trendline. I found this to be an interesting idea. I like the mathematical approach, but if maths is not your thing and calculating a polynomial regression trendline is probably not going to be up your alley either.\n\nFor me the statistical approach is an interesting aside to what we are trying to do; choose a set of appropriate bending points. If you like this type of mathematics you can of course use statistics as a tool for determining these points, however, it would be equally valid to choose points that have no mathematical basis, or to use a modular scale, or a cubic bezier function, or any other method you can imagine for drawing a line between two points.\nIf we were to have a native interpolation function in CSS, it would likely be similar to existing features. One of the great things about CSS is that all the different parts of it are interoperable. That is, they work together and it is because calc() and viewport units work together that we’re able to get linear-interpolation in CSS. If we want a native interpolation function in CSS should be interoperable as well.\n\nChanging the way we are used to doing things is difficult, learning a new syntax is hard, even when it's superior to previous techniques. Interoperability can help with this and that’s one of the reasons why you see when new layout properties shared between flexbox and CSS grid. It turns out that fluid values in CSS have a lot in common with animation.\n\nThat's why I think polynomial regression and statistics might not the best mental model for thinking about interpolation in CSS. After all, we already have native interpolation with animation. Animation-timing-functions like `cubic-bezier` and keywords like `ease-in`, provide all the tools we need in a way that will be somewhat familiar to developers and designers.\n\nThe missing piece is direct access to the internal interpolation function that powers animation in CSS and the ability to replace the time dimension with the viewport or another custom completion value. A custom completion value could provide further compatibility with future CSS features such as container queries. I wrote about these ideas in more detail in an article [interpolation outside of animation](https://madebymike.com.au/writing/interpolation-without-animation/).\n\nIt might sound a little complex but it's the same mathematics we use when creating animation on the web.  CSS does a good job of abstracting away the mathematical complexities you probably don’t think about it but you understand the result of applying keywords like `ease-in` to an animation. The average doesn't need to understand what type of function this is or how it works. It's not a big leap to take these ideas and use them for creating the effects in typography and other areas of the web.\n\nFluid typography doesn’t need to be hard, so I've taken these ideas and feedback from the community to create a mixin that generates one or more bending points with a syntax that closely aligns with animation-functions:\n\n<p data-height=\"550\" data-theme-id=\"dark\" data-slug-hash=\"oWqvNa\" data-default-tab=\"css,result\" data-user=\"MadeByMike\" data-embed-version=\"2\" data-pen-title=\"Bending points\" class=\"codepen\" data-preview=\"true\">See the Pen <a href=\"http://codepen.io/MadeByMike/pen/oWqvNa/\">Bending points </a> by Mike (<a href=\"http://codepen.io/MadeByMike\">@MadeByMike</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p>\n<script async src=\"https://production-assets.codepen.io/assets/embed/ei.js\"></script>\n\nTo properly see this in action you might want to <a href=\"http://codepen.io/MadeByMike/pen/oWqvNa/?editors=0100\" target=\"_blank\">open it in a new window</a> so you can resize it.\n\nYou can [grab the mixin you can get it here](https://www.sassmeister.com/gist/beac01f68da4f9ef3007c0d17f72d8c6).\n\nThis code for the mixin looks complex but it does a lot of the maths, so that you don't need to consider anything except the type of easing you want to apply.\n\nLike other examples of fluid typography this one requires a min and max value for the target CSS property and screen sizes. But unlike other examples this one also takes an optional easing value.\n\nThe easing value works exactly like an [animation-timing-function](https://developer.mozilla.org/en/docs/Web/CSS/animation-timing-function). You can give it a keyword or even a `cubic-bezier` function and it will calculate the intermediary values and set up the transitions. Note: It does not accept `step` values.\n\nThe final optional parameter is the number of bending points. This defaults to 2, and in most cases I'd recommend leaving it at the default, but because I know you are going to do it anyway, you can set as many bending points as you like.\n\nHere are some examples to get you started:\n\n```scss\n.classic-linear {\n  @include interpolate('font-size', 600px, 12px, 900px, 24px);\n}\n.easy-peasy {\n  @include interpolate('font-size', 600px, 12px, 900px, 24px, 'ease-in');\n}\n.cubic-bezier {\n  @include interpolate('font-size', 600px, 12px, 900px, 24px, 'cubic-bezier(0.755, 0.05, 0.855, 0.06)');\n}\n.bloat-my-css {\n  @include interpolate('font-size', 600px, 12px, 900px, 24px, 'ease-in-ease-out', 10);\n}\n```\nThis aims to show how I think native interpolation should work in browsers, but it still only works where calc does. I think there is a lot more discussion to be had and problems that we need to solve before we can have a real native interpolation in CSS. I welcome contributions to this discussion and ideas from maths, statistics, animation or any areas. One thing that I think is increasingly apparent is that the web is fluid medium and breakpoints will not continue to be the only answer, or the key feature in the future of responsive design.\n\nIf you want to [use this in a project grab the mixin here](https://www.sassmeister.com/gist/beac01f68da4f9ef3007c0d17f72d8c6).\n\nIf you want to don't want multiple bending points you can still use the example above, but if you want a simple linear interpolation mixin [you can find my previous example here](https://www.sassmeister.com/gist/d8714d9b987e376ad52db5ede5401ff3).\n\nFinally if you want to look at some more examples [I have a fluid typography collection on CodePen](http://codepen.io/collection/nLbRMZ/).\n",
        "type": "MarkdownRemark",
        "contentDigest": "b93b4a18dd202aaf7720ec55538e5fc6",
        "owner": "gatsby-transformer-remark"
      },
      "frontmatter": {
        "title": ""
      },
      "excerpt": "",
      "rawMarkdownBody": "A few years ago I wrote about fluid typography techniques that show how you can use calc() and viewport units to create transitions between different font-sizes as the viewport size changes. If you'd like to know more about how this technique works you should read my article [Precise control over responsive typography](https://madebymike.com.au/writing/precise-control-responsive-typography/).\n\nRecently these ideas have circulated and gained more traction. I've seen more large sites using fluid typography and other people writing about it and expanding on my initial ideas and techniques. One recent example of this was an article by Jake Wilson [CSS Poly Fluid Sizing using calc(), vw, breakpoints and linear equations](https://medium.com/@jakobud/css-polyfluidsizing-using-calc-vw-breakpoints-and-linear-equations-8e15505d21ab).\n\nOne of the most interesting things in Jake's article is the idea of having multiple points of transition. He refers to these as \"*Breakpoints + Multiple Linear Equations*\" but I like to think of these as \"bending points\". I like the term bending points rather than breakpoints for these because to me, a breakpoint implies there should be a jump and that's not what this is. These are intermediary points where the rate of scale changes.\n\nThis idea of non-linear transitions is something I’ve been thinking about for a while. Unfortunately at the moment we can't do this with CSS alone. So when I’m asked about this, I usually reply with the same suggestion Jake has, that is to use multiple linear transitions. But I remain a little hesitant about how people might use this technique.\n\nI'd love to be able to use non-linear equations for transitions of font-size or other properties, but until there is a native function in CSS, I think adding a large number of intermediary steps only adds complexity.\n\nUndoubtedly some people will be willing to set many bending points at the cost readability and maintainability. In a lot of cases, readability and maintainability are more important than finessing a few pixels difference at uncommon screen sizes. That's why the original examples I created only allowed for only a single minimum and maximum font-size.\n\nI also felt that that equations and ideas were complex enough and based on the feedback I've had, I think this is often still the case. I get that, sometimes you just want the font to bend and you don’t want to worry about how the maths works.\n\nYet this is only one type of user. Clearly many people want to do this, and despite the complexity, some designs could benefit from using a small number of bending points. Besides, CSS has other complex concepts.\n\nIf you want to use bending points to transition CSS values between multiple intermediary points, it should be done deliberately and with restraint; not just because you can. Aside from adding complexity to the CSS, for standard body text with limited variation in size the difference is not particularly noticeable. This is a technique better reserved for headings and other key features where small details matter. Assuming you do have a good case for more than one bending point, how do you determine what those intermediary points should be? And how do we make this accessible to all types of users?\n\nJake talks about statistics as a tool for determining the minimum and maximum font-sizes at points along a trendline. I found this to be an interesting idea. I like the mathematical approach, but if maths is not your thing and calculating a polynomial regression trendline is probably not going to be up your alley either.\n\nFor me the statistical approach is an interesting aside to what we are trying to do; choose a set of appropriate bending points. If you like this type of mathematics you can of course use statistics as a tool for determining these points, however, it would be equally valid to choose points that have no mathematical basis, or to use a modular scale, or a cubic bezier function, or any other method you can imagine for drawing a line between two points.\nIf we were to have a native interpolation function in CSS, it would likely be similar to existing features. One of the great things about CSS is that all the different parts of it are interoperable. That is, they work together and it is because calc() and viewport units work together that we’re able to get linear-interpolation in CSS. If we want a native interpolation function in CSS should be interoperable as well.\n\nChanging the way we are used to doing things is difficult, learning a new syntax is hard, even when it's superior to previous techniques. Interoperability can help with this and that’s one of the reasons why you see when new layout properties shared between flexbox and CSS grid. It turns out that fluid values in CSS have a lot in common with animation.\n\nThat's why I think polynomial regression and statistics might not the best mental model for thinking about interpolation in CSS. After all, we already have native interpolation with animation. Animation-timing-functions like `cubic-bezier` and keywords like `ease-in`, provide all the tools we need in a way that will be somewhat familiar to developers and designers.\n\nThe missing piece is direct access to the internal interpolation function that powers animation in CSS and the ability to replace the time dimension with the viewport or another custom completion value. A custom completion value could provide further compatibility with future CSS features such as container queries. I wrote about these ideas in more detail in an article [interpolation outside of animation](https://madebymike.com.au/writing/interpolation-without-animation/).\n\nIt might sound a little complex but it's the same mathematics we use when creating animation on the web.  CSS does a good job of abstracting away the mathematical complexities you probably don’t think about it but you understand the result of applying keywords like `ease-in` to an animation. The average doesn't need to understand what type of function this is or how it works. It's not a big leap to take these ideas and use them for creating the effects in typography and other areas of the web.\n\nFluid typography doesn’t need to be hard, so I've taken these ideas and feedback from the community to create a mixin that generates one or more bending points with a syntax that closely aligns with animation-functions:\n\n<p data-height=\"550\" data-theme-id=\"dark\" data-slug-hash=\"oWqvNa\" data-default-tab=\"css,result\" data-user=\"MadeByMike\" data-embed-version=\"2\" data-pen-title=\"Bending points\" class=\"codepen\" data-preview=\"true\">See the Pen <a href=\"http://codepen.io/MadeByMike/pen/oWqvNa/\">Bending points </a> by Mike (<a href=\"http://codepen.io/MadeByMike\">@MadeByMike</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p>\n<script async src=\"https://production-assets.codepen.io/assets/embed/ei.js\"></script>\n\nTo properly see this in action you might want to <a href=\"http://codepen.io/MadeByMike/pen/oWqvNa/?editors=0100\" target=\"_blank\">open it in a new window</a> so you can resize it.\n\nYou can [grab the mixin you can get it here](https://www.sassmeister.com/gist/beac01f68da4f9ef3007c0d17f72d8c6).\n\nThis code for the mixin looks complex but it does a lot of the maths, so that you don't need to consider anything except the type of easing you want to apply.\n\nLike other examples of fluid typography this one requires a min and max value for the target CSS property and screen sizes. But unlike other examples this one also takes an optional easing value.\n\nThe easing value works exactly like an [animation-timing-function](https://developer.mozilla.org/en/docs/Web/CSS/animation-timing-function). You can give it a keyword or even a `cubic-bezier` function and it will calculate the intermediary values and set up the transitions. Note: It does not accept `step` values.\n\nThe final optional parameter is the number of bending points. This defaults to 2, and in most cases I'd recommend leaving it at the default, but because I know you are going to do it anyway, you can set as many bending points as you like.\n\nHere are some examples to get you started:\n\n```scss\n.classic-linear {\n  @include interpolate('font-size', 600px, 12px, 900px, 24px);\n}\n.easy-peasy {\n  @include interpolate('font-size', 600px, 12px, 900px, 24px, 'ease-in');\n}\n.cubic-bezier {\n  @include interpolate('font-size', 600px, 12px, 900px, 24px, 'cubic-bezier(0.755, 0.05, 0.855, 0.06)');\n}\n.bloat-my-css {\n  @include interpolate('font-size', 600px, 12px, 900px, 24px, 'ease-in-ease-out', 10);\n}\n```\nThis aims to show how I think native interpolation should work in browsers, but it still only works where calc does. I think there is a lot more discussion to be had and problems that we need to solve before we can have a real native interpolation in CSS. I welcome contributions to this discussion and ideas from maths, statistics, animation or any areas. One thing that I think is increasingly apparent is that the web is fluid medium and breakpoints will not continue to be the only answer, or the key feature in the future of responsive design.\n\nIf you want to [use this in a project grab the mixin here](https://www.sassmeister.com/gist/beac01f68da4f9ef3007c0d17f72d8c6).\n\nIf you want to don't want multiple bending points you can still use the example above, but if you want a simple linear interpolation mixin [you can find my previous example here](https://www.sassmeister.com/gist/d8714d9b987e376ad52db5ede5401ff3).\n\nFinally if you want to look at some more examples [I have a fluid typography collection on CodePen](http://codepen.io/collection/nLbRMZ/).\n"
    },
    "dc5578ae-b10e-5a42-947f-f08b3e72a891": {
      "id": "dc5578ae-b10e-5a42-947f-f08b3e72a891",
      "children": [],
      "parent": "8a964b1b-2e87-5899-8e8f-6df6de3d4b55",
      "internal": {
        "content": "A little pattern I wanted to share for creating bulletproof icons.",
        "type": "MarkdownRemark",
        "contentDigest": "916e2c134d9b398fb05e7b259796bf51",
        "owner": "gatsby-transformer-remark"
      },
      "frontmatter": {
        "title": ""
      },
      "excerpt": "",
      "rawMarkdownBody": "A little pattern I wanted to share for creating bulletproof icons."
    },
    "c2d27e8b-53be-5a04-a30a-8e67adb054f5": {
      "id": "c2d27e8b-53be-5a04-a30a-8e67adb054f5",
      "children": [],
      "parent": "9fefdebb-0172-5ad5-96e1-717fe3a28fea",
      "internal": {
        "content": "I want to share a design pattern I've been using for icons. It's a robust technique that works in almost any situation. With this technique you can use icons inline or append &amp; prepend them to existing content. It works with paragraphs, headings, navigation items, buttons &hellip;almost any element.\n\n<div class=\"robust-icon-container\">\n\t<a class=\"robust-icon-examples icon-right-tomato icon-large\" href=\"http://codepen.io/MadeByMike/pen/xGoMMw?editors=010\">\n\n\t\t<h2 class=\"icon-left-tomato mtl\">Examples</h2>\n\t\t<p>View more examples <span class=\"icon icon-tomato icon-small\"></span> on CodePen.</p>\n\t\t<button class=\"icon-right-tomato mtl mbl\">View Examples</button>\n\n\t</a>\n</div>\n\nIt's also easy to extend so I can usually drop it into almost any project.\n\n## Usage\n\n### Inline:\n\n```html\n<span class=\"icon icon-{icon-name}\"></span>\n```\n\n### Prepend:\n\n```html\n<div class=\"icon-left-{icon-name}\"></div>\n```\n\n### Append:\n\n```html\n<div class=\"icon-right-{icon-name}\"></div>\n```\n\n### Size modifiers:\n\n```html\n<span class=\"icon icon-{icon-name} icon-small\"></span>\n<div class=\"icon-right-{icon-name} icon-large\"></div>\n<span class=\"icon icon-{icon-name} icon-responsive\"></span>\n```\n\n## How it works\n\nWhen appending or prepending, no matter the hight of the content, the icon will always be centred. Icons are vertically centred using absolutely positioned pseudo elements and left and right padding is added to the parent element as required to ensure icons and content always have adequate spacing.\n\nThe clever part of this technique, apart from the vertical centring, is the use of attribute selectors to target elements that that contain various `icon-` prefixes. By targeting attribute selectors we need fewer class names to apply icon styles and adding new icons or modifiers becomes exceptionally easy.\n\n## Extending the icon library\n\nIf you follow the naming conventions all you need to add a new icon to the set is a background image. To add a new icon we just need to add following line and change `{icon-name}` to the name of our new icon.\n\nCheck out some <a href=\"http://codepen.io/MadeByMike/pen/xGoMMw?editors=010\">demos on CodePen</a> or just <a href=\"https://gist.github.com/MadeByMike/b15aac18adc6a664efa4\">grab the code</a>.\n\n```css\n.icon-{icon-name},\n.icon-left-{icon-name}:before,\n.icon-right-{icon-name}:after{\n\tbackground-image: url(icon-name.svg);\n}\n```\n\nThis is the first of hopefully more short articles, where I share some of my favourite design patterns.\n",
        "type": "MarkdownRemark",
        "contentDigest": "610cec97488a2c408a2129ca3b4d21f8",
        "owner": "gatsby-transformer-remark"
      },
      "frontmatter": {
        "title": ""
      },
      "excerpt": "",
      "rawMarkdownBody": "I want to share a design pattern I've been using for icons. It's a robust technique that works in almost any situation. With this technique you can use icons inline or append &amp; prepend them to existing content. It works with paragraphs, headings, navigation items, buttons &hellip;almost any element.\n\n<div class=\"robust-icon-container\">\n\t<a class=\"robust-icon-examples icon-right-tomato icon-large\" href=\"http://codepen.io/MadeByMike/pen/xGoMMw?editors=010\">\n\n\t\t<h2 class=\"icon-left-tomato mtl\">Examples</h2>\n\t\t<p>View more examples <span class=\"icon icon-tomato icon-small\"></span> on CodePen.</p>\n\t\t<button class=\"icon-right-tomato mtl mbl\">View Examples</button>\n\n\t</a>\n</div>\n\nIt's also easy to extend so I can usually drop it into almost any project.\n\n## Usage\n\n### Inline:\n\n```html\n<span class=\"icon icon-{icon-name}\"></span>\n```\n\n### Prepend:\n\n```html\n<div class=\"icon-left-{icon-name}\"></div>\n```\n\n### Append:\n\n```html\n<div class=\"icon-right-{icon-name}\"></div>\n```\n\n### Size modifiers:\n\n```html\n<span class=\"icon icon-{icon-name} icon-small\"></span>\n<div class=\"icon-right-{icon-name} icon-large\"></div>\n<span class=\"icon icon-{icon-name} icon-responsive\"></span>\n```\n\n## How it works\n\nWhen appending or prepending, no matter the hight of the content, the icon will always be centred. Icons are vertically centred using absolutely positioned pseudo elements and left and right padding is added to the parent element as required to ensure icons and content always have adequate spacing.\n\nThe clever part of this technique, apart from the vertical centring, is the use of attribute selectors to target elements that that contain various `icon-` prefixes. By targeting attribute selectors we need fewer class names to apply icon styles and adding new icons or modifiers becomes exceptionally easy.\n\n## Extending the icon library\n\nIf you follow the naming conventions all you need to add a new icon to the set is a background image. To add a new icon we just need to add following line and change `{icon-name}` to the name of our new icon.\n\nCheck out some <a href=\"http://codepen.io/MadeByMike/pen/xGoMMw?editors=010\">demos on CodePen</a> or just <a href=\"https://gist.github.com/MadeByMike/b15aac18adc6a664efa4\">grab the code</a>.\n\n```css\n.icon-{icon-name},\n.icon-left-{icon-name}:before,\n.icon-right-{icon-name}:after{\n\tbackground-image: url(icon-name.svg);\n}\n```\n\nThis is the first of hopefully more short articles, where I share some of my favourite design patterns.\n"
    },
    "e82b9da5-5753-574b-ab10-9cf7a87205b3": {
      "id": "e82b9da5-5753-574b-ab10-9cf7a87205b3",
      "children": [],
      "parent": "77f61876-bfcb-5f48-bc9c-64cf15937b21",
      "internal": {
        "content": "Today I received a [DMCA takedown request]( http://en.wikipedia.org/wiki/Digital_Millennium_Copyright_Act) against my personal website over a [trivial GitHub project that involves a periodic table layout](http://madebymike.com.au/html5-periodic-table/) and information about HTML5 elements.\n\n**Update:** The legal threats and the DMCA takedown request were withdrawn. In addition to that the person involved has apologised and as such I've removed the name from this post -I think that's fair.\n\nNormally I like to write about my projects and experiments but it seems this an unfortunate part of what we do so I will detail it here in case anyone else has this experience.\n\nThe reasons for the DMCA takedown are detailed below. At the end of the day, whether there is a legal basis for it or not, the claim is in very poor spirit.\n\nPrior to being informed about the DMCA takedown request I received an impersonal email. In fact it was not just an impersonal email, it was a ‘cease and desist notice’ full of legal speak and threats such as this:\n\n“You neither asked for nor received permission to use the Work… nor to make or distribute copies of it. Therefore, you have infringed my rights under 17 U.S.C. Section 101 et seq. and could be liable for statutory damages as high as $150,000 as set forth in Section 504(c)(2) therein.”\n\nI’d had no prior contact with this person or any knowledge of their work or existence, so it came as a bit of a shock. It was not what I’ve come to expect from the development community. But I respect the rights of fellow developers and designers to make a living by selling their work, so I thought I’d better check this out in more detail before responding.\n\nLike most developers in our community I’m always very careful to check and attribute sources so I could not understand what basis there could be for this claim.\n\nThe HTML5 periodic table I made was intended to be just a fun css challenge. It is responsive and the entire project including the interaction is done with just CSS (thank you :target attribute). The information about each element was shamelessly stolen from the [Mozilla Developer Network]( https://developer.mozilla.org/en/docs/Web/HTML/Element) (MDN) and the layout is thanks to [Dmitri Mendeleev](http://en.wikipedia.org/wiki/Dmitri_Mendeleev). But luckily MDN and Dmitri are all about the learning and they support the community; as such I have much love for them both.\n\nBut getting back to the basis for this claim. The original idea for the challenge came from an image:\n\n<img src=\"/img/html5-periodic-table-source.png\" />\n\nI’m not sure where I first saw this image but I believe it was shown to me by a friend who also proposed the challenge. I later traced the source of the image to Josh Duck and made an effort to attribute him.\n\nThe person who contacted me claims to have produced a poster of a HTML periodic table earlier than the work by Josh Duck. They also claimed to have sued Josh Duck. So they seem like a reasonable person. I responded and suggested: “Shall we try talking first?”. I pointed out that:\n\n  - I have not seen the original poster\n  - I cannot find any proof of an earlier work - only a recent version can be found online\n  - my final effort was substantially different to that by Josh Duck and even more different from the poster\n  - a printed poster and HTML are completely different mediums with different interactions and purpose\n  - the ability to claim copyright over public domain information such as a periodic table layout and the HTML5 specification is questionable at best\n  - I am not a US citizen so different copyright laws may apply\n  - And importantly the GitHub project exists purely as a learning exercise and has very little traffic (it’s just a simple hack day project!)\n\nFurther to this I’m not selling anything, it’s purely educational and if someone likes it, they would be more likely to take an interest in a print product with a similar concept.\n\nI’d love to remake this using flexbox and update it with newer HTML elements and more detailed content. I’d love people to be able to fork it and learn more about creating challenging layouts with css. Or develop something new from this concept.\n\nImagine if we all received copyright challenges over something as tenuous a particular layout and subject matter. This would mean there could only be one single column web development blog (and not only that it would be a book).\n\nAt the end of the day whether there is a legal basis for this claim or not it’s in very poor spirit and I think it amounts to nothing more than trolling and is not what DMCA was intended for.\n\nIt might be a small, outdated and largely insignificant GitHub project but I intend to challenge this through all reasonable means. Firstly this involves a [DMCA Counter Notice with GitHub](https://help.github.com/articles/guide-to-submitting-a-dmca-counter-notice/).\n\nLuckily in the end (after posting this origional story) the person involved had a change of heart. The approach may have been a tad overzealous and the reaction not anticipated, and I think we can forgive that. I also think a lot more can be achieved by working with the community, there is room for similar ideas and generally we're a great bunch of people who are happy to share a link and promote each other's work.\n",
        "type": "MarkdownRemark",
        "contentDigest": "de4e11701b7f760f3060e62150ea9eeb",
        "owner": "gatsby-transformer-remark"
      },
      "frontmatter": {
        "title": ""
      },
      "excerpt": "",
      "rawMarkdownBody": "Today I received a [DMCA takedown request]( http://en.wikipedia.org/wiki/Digital_Millennium_Copyright_Act) against my personal website over a [trivial GitHub project that involves a periodic table layout](http://madebymike.com.au/html5-periodic-table/) and information about HTML5 elements.\n\n**Update:** The legal threats and the DMCA takedown request were withdrawn. In addition to that the person involved has apologised and as such I've removed the name from this post -I think that's fair.\n\nNormally I like to write about my projects and experiments but it seems this an unfortunate part of what we do so I will detail it here in case anyone else has this experience.\n\nThe reasons for the DMCA takedown are detailed below. At the end of the day, whether there is a legal basis for it or not, the claim is in very poor spirit.\n\nPrior to being informed about the DMCA takedown request I received an impersonal email. In fact it was not just an impersonal email, it was a ‘cease and desist notice’ full of legal speak and threats such as this:\n\n“You neither asked for nor received permission to use the Work… nor to make or distribute copies of it. Therefore, you have infringed my rights under 17 U.S.C. Section 101 et seq. and could be liable for statutory damages as high as $150,000 as set forth in Section 504(c)(2) therein.”\n\nI’d had no prior contact with this person or any knowledge of their work or existence, so it came as a bit of a shock. It was not what I’ve come to expect from the development community. But I respect the rights of fellow developers and designers to make a living by selling their work, so I thought I’d better check this out in more detail before responding.\n\nLike most developers in our community I’m always very careful to check and attribute sources so I could not understand what basis there could be for this claim.\n\nThe HTML5 periodic table I made was intended to be just a fun css challenge. It is responsive and the entire project including the interaction is done with just CSS (thank you :target attribute). The information about each element was shamelessly stolen from the [Mozilla Developer Network]( https://developer.mozilla.org/en/docs/Web/HTML/Element) (MDN) and the layout is thanks to [Dmitri Mendeleev](http://en.wikipedia.org/wiki/Dmitri_Mendeleev). But luckily MDN and Dmitri are all about the learning and they support the community; as such I have much love for them both.\n\nBut getting back to the basis for this claim. The original idea for the challenge came from an image:\n\n<img src=\"/img/html5-periodic-table-source.png\" />\n\nI’m not sure where I first saw this image but I believe it was shown to me by a friend who also proposed the challenge. I later traced the source of the image to Josh Duck and made an effort to attribute him.\n\nThe person who contacted me claims to have produced a poster of a HTML periodic table earlier than the work by Josh Duck. They also claimed to have sued Josh Duck. So they seem like a reasonable person. I responded and suggested: “Shall we try talking first?”. I pointed out that:\n\n  - I have not seen the original poster\n  - I cannot find any proof of an earlier work - only a recent version can be found online\n  - my final effort was substantially different to that by Josh Duck and even more different from the poster\n  - a printed poster and HTML are completely different mediums with different interactions and purpose\n  - the ability to claim copyright over public domain information such as a periodic table layout and the HTML5 specification is questionable at best\n  - I am not a US citizen so different copyright laws may apply\n  - And importantly the GitHub project exists purely as a learning exercise and has very little traffic (it’s just a simple hack day project!)\n\nFurther to this I’m not selling anything, it’s purely educational and if someone likes it, they would be more likely to take an interest in a print product with a similar concept.\n\nI’d love to remake this using flexbox and update it with newer HTML elements and more detailed content. I’d love people to be able to fork it and learn more about creating challenging layouts with css. Or develop something new from this concept.\n\nImagine if we all received copyright challenges over something as tenuous a particular layout and subject matter. This would mean there could only be one single column web development blog (and not only that it would be a book).\n\nAt the end of the day whether there is a legal basis for this claim or not it’s in very poor spirit and I think it amounts to nothing more than trolling and is not what DMCA was intended for.\n\nIt might be a small, outdated and largely insignificant GitHub project but I intend to challenge this through all reasonable means. Firstly this involves a [DMCA Counter Notice with GitHub](https://help.github.com/articles/guide-to-submitting-a-dmca-counter-notice/).\n\nLuckily in the end (after posting this origional story) the person involved had a change of heart. The approach may have been a tad overzealous and the reaction not anticipated, and I think we can forgive that. I also think a lot more can be achieved by working with the community, there is room for similar ideas and generally we're a great bunch of people who are happy to share a link and promote each other's work.\n"
    },
    "6a268ce0-e6cb-593e-97ef-d3f01e8c4b06": {
      "id": "6a268ce0-e6cb-593e-97ef-d3f01e8c4b06",
      "children": [],
      "parent": "efd12b4a-ed97-5a4c-a022-e620def935a3",
      "internal": {
        "content": "Some early experiments with WebRTC.",
        "type": "MarkdownRemark",
        "contentDigest": "3f9b833a2699a42df8fbb48d756b9784",
        "owner": "gatsby-transformer-remark"
      },
      "frontmatter": {
        "title": ""
      },
      "excerpt": "",
      "rawMarkdownBody": "Some early experiments with WebRTC."
    },
    "e1690f65-94c8-5d91-88c1-37aafe697610": {
      "id": "e1690f65-94c8-5d91-88c1-37aafe697610",
      "children": [],
      "parent": "fe842c12-0073-57bf-9ace-d02d6dfcc40c",
      "internal": {
        "content": "I've been messing around with live video capture in the browser and have developed a nifty demo showing different methods for estimating the quality of light in realtime.\n\nTo view the demo you are going to need a web cam and a modern Chrome, Firefox or Opera browser. If you have what it takes you can [view my demo here](http://codepen.io/MadeByMike/full/d8369096b18e2192d0c9d721b9b2a673/). Please select allow when asked for permission to use the web cam.\n\nThese tests have some potential real world uses. For example to advise of optimal lighting in a camera app or to estimate the size of the subject in the frame.\n\n## A brief history of html video capture\n\nBefore I explain my demo, it's worth sharing what I've learnt about the history of video capture and webRTC as well as its [state today](http://caniuse.com/#search=getusermedia).\n\nThe first thing to know is, it had a bit of a rocky start. This history is well covered in [this excellent HTML5rocks article](http://www.html5rocks.com/en/tutorials/getusermedia/intro/) by Eric Bidelman.\n\nThe next thing to know is that `getUserMedia()` is still not fully supported in all browsers and there are some quirks (huge gaping inconsistencies) in implementation across browsers.\n\nNot to fear because web development superhero Addy Osmani and others have come to the rescue with pollyfills such as:\n\n  - [getUserMedia.js](https://github.com/addyosmani/getUserMedia.js/)\n  - [webcamjs](https://github.com/jhuckaby/webcamjs)\n\nTo keep it as simple as possible I haven't included any pollyfills in my demo, but I've tested them and they work, so there's no reason not to start using this now.\n\n## Estimating the quality of lighting\n\nIn my demo there were 2 methods I trialed for determining the brightness.\n\nThe first method was to find the average color of all the pixels in the frame then work out the relative brightness of this color. This method worked really well, in most situations it gave a good indication of the general brightness and would be suitable for uses such as a light indicator in a camera app.\n\nBut eventually I found some limitations with the average color method when testing subjects with a high level of contrast. Images with a very dark background can give a false indication of the overall brightness and there is not enough information in the average color method to determine the 'quality' of light.\n\nI realised that I wanted to know not just the average brightness but also how much of the frame was lit. To do this I applied a threshold filter to the incoming video stream. The threshold filter determines the brightness of each pixel and sets it to either black or white depending on whether it's above or below a certian level of brightness. In the end I can tell what percentage of the frame is lit and this is number can be very differnt to the average brightness.\n\nUsed together we can determine a lot about the composition and lighting of the frame.\n\n## Taking it further\n\nIf I apply more than one threshold I can set a maximum and minimum brightness and measure which parts of the image are potentially under or over exposed.\n\nFinally and it's not in my demo but you could potentially automatically adjust the threshold based on the average color brightness.  \n\nSo there we have a ton of information we can use to make inferences about the quality of lighting in a video stream. Now it's up to you work out how to put them to practical application.\n\n## Performance tips\n\nDespite being very poorly optomised my demo seems to run ok. Not only am I adjusting the brightness before rendering each frame to a canvas, I'm also showing the results of the threshold and average filters on a separate smaller canvas. In most cases you won't need to do either of these things.\n\nI was able to get these methods working on an average machine with a HD video input by combining each of the filters so that I was only looping over the pixel data once. I used an off screen canvas and only processed every 5th frame and every 5th pixel. The results were as accurate as the method shown in this demo.\n\n## Further reading\n\nInteresting articles I found along the way include:\n\n- [getUserMedia: Accessing the Camera and Privacy UI](https://dev.opera.com/articles/getusermedia-access-camera-privacy-ui/) - Bruce Lawson\n- [Capturing Audio & Video in HTML5](http://www.html5rocks.com/en/tutorials/getusermedia/intro/) - Eric Bidelman\n- [introduction to the getUserMedia API](http://www.sitepoint.com/introduction-getusermedia-api/) - Aurelio De Rosa\n",
        "type": "MarkdownRemark",
        "contentDigest": "40582457464ae924bd0b3c285b65bb06",
        "owner": "gatsby-transformer-remark"
      },
      "frontmatter": {
        "title": ""
      },
      "excerpt": "",
      "rawMarkdownBody": "I've been messing around with live video capture in the browser and have developed a nifty demo showing different methods for estimating the quality of light in realtime.\n\nTo view the demo you are going to need a web cam and a modern Chrome, Firefox or Opera browser. If you have what it takes you can [view my demo here](http://codepen.io/MadeByMike/full/d8369096b18e2192d0c9d721b9b2a673/). Please select allow when asked for permission to use the web cam.\n\nThese tests have some potential real world uses. For example to advise of optimal lighting in a camera app or to estimate the size of the subject in the frame.\n\n## A brief history of html video capture\n\nBefore I explain my demo, it's worth sharing what I've learnt about the history of video capture and webRTC as well as its [state today](http://caniuse.com/#search=getusermedia).\n\nThe first thing to know is, it had a bit of a rocky start. This history is well covered in [this excellent HTML5rocks article](http://www.html5rocks.com/en/tutorials/getusermedia/intro/) by Eric Bidelman.\n\nThe next thing to know is that `getUserMedia()` is still not fully supported in all browsers and there are some quirks (huge gaping inconsistencies) in implementation across browsers.\n\nNot to fear because web development superhero Addy Osmani and others have come to the rescue with pollyfills such as:\n\n  - [getUserMedia.js](https://github.com/addyosmani/getUserMedia.js/)\n  - [webcamjs](https://github.com/jhuckaby/webcamjs)\n\nTo keep it as simple as possible I haven't included any pollyfills in my demo, but I've tested them and they work, so there's no reason not to start using this now.\n\n## Estimating the quality of lighting\n\nIn my demo there were 2 methods I trialed for determining the brightness.\n\nThe first method was to find the average color of all the pixels in the frame then work out the relative brightness of this color. This method worked really well, in most situations it gave a good indication of the general brightness and would be suitable for uses such as a light indicator in a camera app.\n\nBut eventually I found some limitations with the average color method when testing subjects with a high level of contrast. Images with a very dark background can give a false indication of the overall brightness and there is not enough information in the average color method to determine the 'quality' of light.\n\nI realised that I wanted to know not just the average brightness but also how much of the frame was lit. To do this I applied a threshold filter to the incoming video stream. The threshold filter determines the brightness of each pixel and sets it to either black or white depending on whether it's above or below a certian level of brightness. In the end I can tell what percentage of the frame is lit and this is number can be very differnt to the average brightness.\n\nUsed together we can determine a lot about the composition and lighting of the frame.\n\n## Taking it further\n\nIf I apply more than one threshold I can set a maximum and minimum brightness and measure which parts of the image are potentially under or over exposed.\n\nFinally and it's not in my demo but you could potentially automatically adjust the threshold based on the average color brightness.  \n\nSo there we have a ton of information we can use to make inferences about the quality of lighting in a video stream. Now it's up to you work out how to put them to practical application.\n\n## Performance tips\n\nDespite being very poorly optomised my demo seems to run ok. Not only am I adjusting the brightness before rendering each frame to a canvas, I'm also showing the results of the threshold and average filters on a separate smaller canvas. In most cases you won't need to do either of these things.\n\nI was able to get these methods working on an average machine with a HD video input by combining each of the filters so that I was only looping over the pixel data once. I used an off screen canvas and only processed every 5th frame and every 5th pixel. The results were as accurate as the method shown in this demo.\n\n## Further reading\n\nInteresting articles I found along the way include:\n\n- [getUserMedia: Accessing the Camera and Privacy UI](https://dev.opera.com/articles/getusermedia-access-camera-privacy-ui/) - Bruce Lawson\n- [Capturing Audio & Video in HTML5](http://www.html5rocks.com/en/tutorials/getusermedia/intro/) - Eric Bidelman\n- [introduction to the getUserMedia API](http://www.sitepoint.com/introduction-getusermedia-api/) - Aurelio De Rosa\n"
    },
    "2fa8a8a7-d415-51a5-a21e-ff8b0511903e": {
      "id": "2fa8a8a7-d415-51a5-a21e-ff8b0511903e",
      "children": [],
      "parent": "a80ddecb-8905-5c76-a8c7-002b50024020",
      "internal": {
        "content": "Ideas for a more general purpose interpolation function in CSS.",
        "type": "MarkdownRemark",
        "contentDigest": "0e58a890bc162b866231dfa32282b2fe",
        "owner": "gatsby-transformer-remark"
      },
      "frontmatter": {
        "title": ""
      },
      "excerpt": "",
      "rawMarkdownBody": "Ideas for a more general purpose interpolation function in CSS."
    },
    "20c7a7e0-bc45-5127-b917-a67dce92c9cb": {
      "id": "20c7a7e0-bc45-5127-b917-a67dce92c9cb",
      "children": [],
      "parent": "f6491b0b-d4b6-5216-a807-95bd18eb4ac8",
      "internal": {
        "content": "\nInterpolation is the estimation of a new value between two known values. This simple concept is vastly useful and it's commonly seen in animation on the web. With animation you declare the target properties and the end-state, and the browser will workout out the values in-between. Animation happens over time, but this is not the only dimension where interpolation can occur. In fact we interpolate values regularly in design, albeit manually, and particularly in responsive design. You may even do it unknowingly. Because of this, I think there is a need for a more native way of interpolating CSS values outside animation.\n\nIf you are a web designer the chances are you frequently have two primary screen sizes in mind, a small screen and a large screen, or the device and the desktop. I know you probably think about more than just these two sizes, but these two sizes are especially important, they represent the upper and lower bounds of your design. When you make adjustments for screen sizes between these constraints, what you are doing is like interpolation.\n\nWhen adjusting properties such as font-size, font-weight, image width or grid dimensions at specific screen sizes between the upper and lower bounds, these values usually fall somewhere between the choices you've made for the largest small and smallest screen size. It would be unusual for the font to get larger, then smaller, then larger again as the viewport changes. Or to give another example, if a font varied between bold, normal, italic, then bold and italic. It's not unusual for these things to change from one state to another, but typically these changes are progressive, not back and forward.\n\n## Design intent vs constraints\n\nWe choose break-points where properties are to be adjusted. We don't do this because it is ideal, we're forced to select a fixed number break-points, often quite arbitrarily, where the design should change. Although sometimes we may want these break-points, more often it is due to technical limitations on the web.\n\nMedia queries are our primary tool for adjusting design in relation to the screen size and for practical reasons, we are constrained to using a limited number of these. These limitations have shaped how we think about web design, and the choices we make about using break-points don't necessarily reflect the pure intentions of the designer.\n\nI've been told that good design is rarely arbitrary. It serves a purpose. If the font size is smaller, larger or its weight stronger, it's because that is the best experience for users, at that screen size. It's feasible to say that the best experience for some aspects of design, will vary directly in relation to the screen size rather than only at set points. This is the use-case for interpolation without animation.\n\nLet's illustrate this with an example, imagine the following CSS:\n\n```css\nbody {\n  font-weight: bold;\n}\n\n@media screen and (min-width: 700px){\n  body {\n    font-size: 1.2rem;\n    font-weight: normal;\n  }\n}\n```\n\nIt's unlikely a designer would decide bold font is uniquely suited to screen resolutions below 700px. Why would one pixel make such a difference? Design decisions like this are often the result of constrains imposed by media queries. A more likely intention is for the font-weight to be adjusted in relation to its size, for improved legibility on smaller screens.\n\nMedia queries are the best tool available for approximately achieving this goal, but they are not always an accurate reflection of the designers intent.\n\n## Maximum safe operating pressure\n\nI noticed the label on my barbecue gas cylinder says it has a maximum safe operating pressure. If I exceed this pressure when refilling it, it might explode (it actually won't, they have safety valves, but just imagine would). Web design doesn't explode quite as spectacularly as gas cylinders, but responsive design is exposed to a different kind of operating pressure.\n\nAs the screen size gets smaller, there is often a point where a design is pressured by the limitations imposed by smaller screens. A break-point represents the point where the design cannot withstand this pressure any longer; it reached its maximum safe operating pressure and the appropriate response is to adjust some aspects of the design.\n\nDesigners choose these break-points carefully. They probably have in mind where constraints like this begin to pressure the design, and how quickly it impacts overall quality. But in a compromise to technology, we are forced to choose a middle point, knowing that immediately before and after the break-point the design is often still pressured by constrains that demanded change.\n\n<img alt=\"gradient demonstrating the location of ideal font-sizes in relation to a break-point and the design pressure experienced between these points\" data-src=\"/img/interpolation.png\">\n\nThis graphic attempts to illustrate the location of ideal font-sizes in relation to a break-point. You can move the ideal font-size closer to the break-point but this only shifts the pressure to somewhere else in the design. Alternatively you can add more break-points until this becomes problematic, but ideally these changes would be introduced gradually and continuously to reduce pressure on the design as it's required.\n\nMedia queries are not the right tool for this. Media queries have been around longer than responsive design and responsive design was as much a reaction to the available technology, as the idea of media queries was to user needs. As is often the case, real world implementations of responsive design pushed the technology further than spec writers had imagined, and uncovered new uses, new requirements and new limitations.\n\nThis is normal process. And with the perspective we have now, it's easy to ask, if we were designing a technical solution for responsive design today, would media queries be the best tool to implement designers intentions? I think not; or at least not the only tool.\n\n## Live interpolation in the browser today\n\nTheoretically, between two ideal points, there is an ideal value for every screen size, that can be expressed as a ratio, or a function relative to the screen-size (or even another relative factor).\n\nPreviously I've written about techniques you can use to achieve some forms of interpolation using calc() and viewport units.\n\nMy favourite example of this demonstrates how you can interpolate between different modular scales with heading levels.\n\n<video src=\"/img/modular-scale.mp4\" style=\"max-width:600px\" autoplay loop></video>\n\nNot only do the individual font-sizes change in a controlled way relative to the viewport, but the ratio between the heading levels also fluidly changes. This means there is a changing but consistent relationship between each of the headings. If you haven't seen this yet, you should read my article [precise control over responsive typography](https://madebymike.com.au/writing/precise-control-responsive-typography/).\n\nThis technique allows linear interpolation between any two length values. This is great, but linear interpolation is not the only form of interpolation, and length values are not the only properties that change in responsive design. In addition to that, the first example in this article demonstrated a situation where font-size should change relative to the screen size, and font weight should change relative to font-size. At the moment this isn't possible with CSS.\n\n## Limitations of interpolation with calc()\n\nThere are some limiting factors when it come to changing the font-weight in relation to the font-size. Firstly the calc() techniques work only with length values and font-weight is a unitless value.\n\nThe problem with interpolating unitless values could potentially be solved with something called 'unit algebra'. Unit algebra would allow calc() expressions that contain CSS units to resolve to a different unit type or even a unitless number. E.g `calc(2rem * 2rem) = 4`. This could allow us to interpolate unitless values like font-weight or line-height, and maybe even open the door to non-linier equations (by multiplying units by themselves). Whilst this would be a great feature, the syntax for these equations is likely to be complicated and still leaves us wanting a more native solution. We're also not likely to see this anytime soon. As far as I am aware there is no formal proposal, and this exists only as an idea discussed in w3c mailing lists.\n\nThe second problem with interpolating properties like font-weight is that by default a web font won't have all the variations required to smoothly interpolate between these values. Usually a font-family will include the standard font and a single variation for bold, or at worse, just a faux-bold. Adding more variations will increase network requests, loading time and FOUF (Flash Of Unstyled Font). This is another constraint designers will be familiar with.\n\n## Variable fonts and the future of font interpolation\n\nLuckily the problem of limited font variations has a solution that is relatively close on the horizon. Variable fonts offer the ability to specify how bold or italic a font should be. And not just bold or italic but other 'axes of variation'. You can read more about variable fonts in Andrew Johnson's excellent A List Apart article: [Live font interpolation on the web](http://alistapart.com/article/live-font-interpolation-on-the-web).\n\nIn his article Andrew mentions a need for\n\"bending points—not just breaking points—to adapt type to the design\". He also hints at [some challenges we face interpolating font-values effectively](http://alistapart.com/article/live-font-interpolation-on-the-web#section8) on the web.\n\nMy main concern is that many of these 'axes of variation' are not length values and therefor, whilst I'm excited for the opportunities that variable font will provide, I see their potential limited by existing constraints.\n\n## How interpolation and animation works in browsers\n\nCSS is already great at interpolating values and it knows how to do this with a whole bunch of different [animatable properties](https://www.w3.org/TR/css3-transitions/#animatable-properties) and [property types](https://www.w3.org/TR/css3-transitions/#animatable-types).\n\nWe can interpolate the value of any property that [can be animated](http://canianimate.com/) using CSS transitions or keyframe animations.\n\nDuring an animation the browser works out how much time has elapsed for every frame and picks an intermediary value. For example if 1 second of a 4 second animation has elapsed, we pick a point that is 25% of the way between the original and final value.\n\n<object data=\"/img/easing.svg\" type=\"image/svg+xml\"></object>\n\nThis is easy to understand with numeric properties like width or position, but it works exactly the same with properties like color. Just imagine the same process happening for each of the R, G and B values that represents the color. You can think of them as 3 separate 2D interpolations that combine to give a color at each step of the animation.\n\n> An interesting side note with CSS animations, is that no matter what values you use to define color the browser will always transition through an RGB colour space. This means that although the final colour will be the same, the path taken and intermediary colors will be different.\n\nWe can manipulate the timing of an animation to get different results at different points of interpolation. By plotting an animation timing function on the same graph above, we can see how this changes the value returned at different points in the animation, while the start and end values remain the same.\n\n<object data=\"/img/easing2.svg\" type=\"image/svg+xml\"></object>\n\nThis is a non-linear interpolation and it’s really handy for creating all kinds of animation effects and more natural looking movement with acceleration and easing. We can define [animation timing functions in CSS](https://developer.mozilla.org/en/docs/Web/CSS/animation-timing-function) using [keywords, steps or cubic bezier curves](https://developer.mozilla.org/en-US/docs/Web/CSS/single-transition-timing-function) for greater control.\n\n## Interpolation outside animation\n\nSo far I've discussed the problem with media queries not always reflecting design intentions, and the limitations of interpolation with calc(). I've also shown how new features like variable fonts might be constrained by these limitations. The interesting thing is, we have all the tools we need to solve these problems, in CSS right now. Only they are tied closely to animation in the browser.\n\nThe rest of this article is going to talk about the idea of exposing a native interpolation function in CSS, how it might work, and what problems might solve. It's very hypothetical and it's ok if you don't agree with either the idea in general or how it should work.\n\nI've talked about interpolation and animation together, however interpolating values over time is just one possibility. The duration and elapsed time of an animation simply provides a percentage completion. Somewhere within the browser an interpolation function is called and it will dutifully return a value at the given percentage completion, according to the timing function.\n\nLet’s imagine we could access this function directly in CSS and pass it our own percentage. If we could change this value using media queries, [CSS variables (custom properties)](https://developer.mozilla.org/en-US/docs/Web/CSS/Using_CSS_variables) and calc(), what are some of the things we might be able to do?\n\nFirst let’s imaging a syntax. We need an `initial-value`, a `target-value`, a `percentage-completion` and a `timing-function`. The timing function could be an optional value and default to a linear interpolation. That means it might look something like this:\n\n```css\ninterpolate(initial-value, target-value, percentage-completion, [timing-function])\n```\n\nAnd could be used like this:\n\n```css\n.thing {\n  width: interpolate(0px, 500px, 0.5, linear);\n}\n```\n\n**Note**: This is a not real CSS, it is a hypothetical solution to a real problem for the purpose of discussion.  \n\nObviously in the example above it would be far easier to set the width to 250px. So, interpolation functions are not that useful without variables. We do have some variable values in CSS. Things like:\n\n  - the viewport width and height,\n  - the width and height of an element or its container,\n  - the number of siblings an element has, or\n  - the order of an element amongst its siblings.\n\nThese are all things that in one context or another we can know and use in CSS; unfortunately in many cases these variables are not easily queried to create conditional statements. There are some useful tricks to take advantage of them. Things like [advanced fluid typography](https://madebymike.com.au/writing/precise-control-responsive-typography/) and [quantity queries](http://alistapart.com/article/quantity-queries-for-css) are great real world examples.\n\nA more hypothetical example in a native interpolation function might look something like this:\n\n```css\n:root {\n  --max-viewport: 500px;\n  --min-viewport: 1000px;\n  --range: var(--max-viewport) - var(--min-viewport);\n  --percentage-completion: calc( (100vw - var(--min-viewport)) / var(--range) );\n}\n.thing {\n  width: interpolate(0px, 500px, var(--percentage-completion), ease-in);\n}\n```\n\nAlthough the above calculation is quite simple, but it's more than a bit ugly. This is because it uses CSS variables and unit algebra concepts I mentioned earlier to work out a percentage completion.\n\nA far neater solution would be a function to work out a percentage. This would reduce the above to something far more digestible like this:  \n\n```css\nroot: {\n  --percentage-completion: percentage(500px, 1000px, 100vw);\n}\n.thing {\n  width: interpolate(0px, 500px, var(--percentage-completion), ease-in);\n}\n```\n\n**Note:** Any interpolation function would probably need to clamp returned values to the specified range, as negative completion percentage are a likely result with variables.\n\nThis doesn't need to work with just length values. I mentioned that CSS has a whole bunch of [animatable properties](https://www.w3.org/TR/css3-transitions/#animatable-properties) that it already knows how to interpolate. It makes sense that any native function should work with these definitions. This means interpolating a color is also valid:\n\n```css\nroot: {\n  --percentage-completion: percentage(500px, 1000px, 100vw);\n}\n.thing {\n  background-color: interpolate(red, greed, var(--percentage-completion));\n}\n```\n\nThe above example of changing the background color doesn't make much sense in relation to the viewport, but there are more legitimate use cases for interpolating a color in relation to an elements width. We just can't as easily query the properties needed to do this, as we can with the viewport. [Container queries](http://alistapart.com/article/container-queries-once-more-unto-the-breach) seem to be forever on the horizon. It won't be soon, but my hope is that container queries also ship with container and element units, that work much like viewport units, only for the width of an element.\n\nContainer query units might look something like this:\n\n| Unit      | Description                                                           |\n|-----------|-----------------------------------------------------------------------|\n| cqw       | Relative to 1% of the container width                                 |\n| cqh       | Relative to 1% of the container height                                |\n| cqmin     | Relative to 1% of the container width or height, whichever is smaller |\n| cqmax     | Relative to 1% of the container width or height, whichever is larger  |\n| eqw       | Relative to 1% of the element width                                   |\n| eqh       | Relative to 1% of the element height                                  |\n| eqmin     | Relative to 1% of the element width or height, whichever is smaller   |\n| eqmax     | Relative to 1% of the element width or height, whichever is larger    |\n\n**Note**: I used the `cq` prefix is because `ch` is already a valid unit type and `eq` for consistency.\n\nWith units like these, we could do something like this:\n\n```css\nroot: {\n  --percentage-completion: percentage(0px, 100cqw, 100eqw);\n}\n.thing {\n  background-color: interpolate(red, greed, var(--percentage-completion));\n}\n```\nIn this example the percentage-completion is the percentage width of a child element, in relation to it's parent element. Allowing CSS property values to be relative to context like this opens up a whole range of possibilities for things like, dynamic progress bars, creative navigation components and data-visualisation.\n\nBut maybe this isn't the right solution. If we have a unit type for viewport width, container width and element width, where does this stop? DOM order, line length, color? Is it better introduce another function to get a value? E.g. `value-of(width)` if we do this, what about container width and non CSS properties like DOM order or line length? Magic keywords? `value-of(dom-order)`. I don't know!\n\nPerhaps you don't agree with any of this. Perhaps you think we shouldn't introduce more functional features to CSS. That's ok. I hope you will agree that there is a need for discussion, that break-points don't necessarily match the intentions of designers and that interpolation will become a more significant feature of web design with the introduction of variable fonts, and an increasing adoption of viewport units and dynamic layout features.\n\nI'd like to start a discussion and if you have ideas please [let me know](https://twitter.com/MikeRiethmuller) or consider [contributing to the issue](https://github.com/w3c/csswg-drafts/issues/581) on the CSS Working Group's, GitHub page.\n",
        "type": "MarkdownRemark",
        "contentDigest": "eff8b728360171ac82b81c677d23cbe6",
        "owner": "gatsby-transformer-remark"
      },
      "frontmatter": {
        "title": ""
      },
      "excerpt": "",
      "rawMarkdownBody": "\nInterpolation is the estimation of a new value between two known values. This simple concept is vastly useful and it's commonly seen in animation on the web. With animation you declare the target properties and the end-state, and the browser will workout out the values in-between. Animation happens over time, but this is not the only dimension where interpolation can occur. In fact we interpolate values regularly in design, albeit manually, and particularly in responsive design. You may even do it unknowingly. Because of this, I think there is a need for a more native way of interpolating CSS values outside animation.\n\nIf you are a web designer the chances are you frequently have two primary screen sizes in mind, a small screen and a large screen, or the device and the desktop. I know you probably think about more than just these two sizes, but these two sizes are especially important, they represent the upper and lower bounds of your design. When you make adjustments for screen sizes between these constraints, what you are doing is like interpolation.\n\nWhen adjusting properties such as font-size, font-weight, image width or grid dimensions at specific screen sizes between the upper and lower bounds, these values usually fall somewhere between the choices you've made for the largest small and smallest screen size. It would be unusual for the font to get larger, then smaller, then larger again as the viewport changes. Or to give another example, if a font varied between bold, normal, italic, then bold and italic. It's not unusual for these things to change from one state to another, but typically these changes are progressive, not back and forward.\n\n## Design intent vs constraints\n\nWe choose break-points where properties are to be adjusted. We don't do this because it is ideal, we're forced to select a fixed number break-points, often quite arbitrarily, where the design should change. Although sometimes we may want these break-points, more often it is due to technical limitations on the web.\n\nMedia queries are our primary tool for adjusting design in relation to the screen size and for practical reasons, we are constrained to using a limited number of these. These limitations have shaped how we think about web design, and the choices we make about using break-points don't necessarily reflect the pure intentions of the designer.\n\nI've been told that good design is rarely arbitrary. It serves a purpose. If the font size is smaller, larger or its weight stronger, it's because that is the best experience for users, at that screen size. It's feasible to say that the best experience for some aspects of design, will vary directly in relation to the screen size rather than only at set points. This is the use-case for interpolation without animation.\n\nLet's illustrate this with an example, imagine the following CSS:\n\n```css\nbody {\n  font-weight: bold;\n}\n\n@media screen and (min-width: 700px){\n  body {\n    font-size: 1.2rem;\n    font-weight: normal;\n  }\n}\n```\n\nIt's unlikely a designer would decide bold font is uniquely suited to screen resolutions below 700px. Why would one pixel make such a difference? Design decisions like this are often the result of constrains imposed by media queries. A more likely intention is for the font-weight to be adjusted in relation to its size, for improved legibility on smaller screens.\n\nMedia queries are the best tool available for approximately achieving this goal, but they are not always an accurate reflection of the designers intent.\n\n## Maximum safe operating pressure\n\nI noticed the label on my barbecue gas cylinder says it has a maximum safe operating pressure. If I exceed this pressure when refilling it, it might explode (it actually won't, they have safety valves, but just imagine would). Web design doesn't explode quite as spectacularly as gas cylinders, but responsive design is exposed to a different kind of operating pressure.\n\nAs the screen size gets smaller, there is often a point where a design is pressured by the limitations imposed by smaller screens. A break-point represents the point where the design cannot withstand this pressure any longer; it reached its maximum safe operating pressure and the appropriate response is to adjust some aspects of the design.\n\nDesigners choose these break-points carefully. They probably have in mind where constraints like this begin to pressure the design, and how quickly it impacts overall quality. But in a compromise to technology, we are forced to choose a middle point, knowing that immediately before and after the break-point the design is often still pressured by constrains that demanded change.\n\n<img alt=\"gradient demonstrating the location of ideal font-sizes in relation to a break-point and the design pressure experienced between these points\" data-src=\"/img/interpolation.png\">\n\nThis graphic attempts to illustrate the location of ideal font-sizes in relation to a break-point. You can move the ideal font-size closer to the break-point but this only shifts the pressure to somewhere else in the design. Alternatively you can add more break-points until this becomes problematic, but ideally these changes would be introduced gradually and continuously to reduce pressure on the design as it's required.\n\nMedia queries are not the right tool for this. Media queries have been around longer than responsive design and responsive design was as much a reaction to the available technology, as the idea of media queries was to user needs. As is often the case, real world implementations of responsive design pushed the technology further than spec writers had imagined, and uncovered new uses, new requirements and new limitations.\n\nThis is normal process. And with the perspective we have now, it's easy to ask, if we were designing a technical solution for responsive design today, would media queries be the best tool to implement designers intentions? I think not; or at least not the only tool.\n\n## Live interpolation in the browser today\n\nTheoretically, between two ideal points, there is an ideal value for every screen size, that can be expressed as a ratio, or a function relative to the screen-size (or even another relative factor).\n\nPreviously I've written about techniques you can use to achieve some forms of interpolation using calc() and viewport units.\n\nMy favourite example of this demonstrates how you can interpolate between different modular scales with heading levels.\n\n<video src=\"/img/modular-scale.mp4\" style=\"max-width:600px\" autoplay loop></video>\n\nNot only do the individual font-sizes change in a controlled way relative to the viewport, but the ratio between the heading levels also fluidly changes. This means there is a changing but consistent relationship between each of the headings. If you haven't seen this yet, you should read my article [precise control over responsive typography](https://madebymike.com.au/writing/precise-control-responsive-typography/).\n\nThis technique allows linear interpolation between any two length values. This is great, but linear interpolation is not the only form of interpolation, and length values are not the only properties that change in responsive design. In addition to that, the first example in this article demonstrated a situation where font-size should change relative to the screen size, and font weight should change relative to font-size. At the moment this isn't possible with CSS.\n\n## Limitations of interpolation with calc()\n\nThere are some limiting factors when it come to changing the font-weight in relation to the font-size. Firstly the calc() techniques work only with length values and font-weight is a unitless value.\n\nThe problem with interpolating unitless values could potentially be solved with something called 'unit algebra'. Unit algebra would allow calc() expressions that contain CSS units to resolve to a different unit type or even a unitless number. E.g `calc(2rem * 2rem) = 4`. This could allow us to interpolate unitless values like font-weight or line-height, and maybe even open the door to non-linier equations (by multiplying units by themselves). Whilst this would be a great feature, the syntax for these equations is likely to be complicated and still leaves us wanting a more native solution. We're also not likely to see this anytime soon. As far as I am aware there is no formal proposal, and this exists only as an idea discussed in w3c mailing lists.\n\nThe second problem with interpolating properties like font-weight is that by default a web font won't have all the variations required to smoothly interpolate between these values. Usually a font-family will include the standard font and a single variation for bold, or at worse, just a faux-bold. Adding more variations will increase network requests, loading time and FOUF (Flash Of Unstyled Font). This is another constraint designers will be familiar with.\n\n## Variable fonts and the future of font interpolation\n\nLuckily the problem of limited font variations has a solution that is relatively close on the horizon. Variable fonts offer the ability to specify how bold or italic a font should be. And not just bold or italic but other 'axes of variation'. You can read more about variable fonts in Andrew Johnson's excellent A List Apart article: [Live font interpolation on the web](http://alistapart.com/article/live-font-interpolation-on-the-web).\n\nIn his article Andrew mentions a need for\n\"bending points—not just breaking points—to adapt type to the design\". He also hints at [some challenges we face interpolating font-values effectively](http://alistapart.com/article/live-font-interpolation-on-the-web#section8) on the web.\n\nMy main concern is that many of these 'axes of variation' are not length values and therefor, whilst I'm excited for the opportunities that variable font will provide, I see their potential limited by existing constraints.\n\n## How interpolation and animation works in browsers\n\nCSS is already great at interpolating values and it knows how to do this with a whole bunch of different [animatable properties](https://www.w3.org/TR/css3-transitions/#animatable-properties) and [property types](https://www.w3.org/TR/css3-transitions/#animatable-types).\n\nWe can interpolate the value of any property that [can be animated](http://canianimate.com/) using CSS transitions or keyframe animations.\n\nDuring an animation the browser works out how much time has elapsed for every frame and picks an intermediary value. For example if 1 second of a 4 second animation has elapsed, we pick a point that is 25% of the way between the original and final value.\n\n<object data=\"/img/easing.svg\" type=\"image/svg+xml\"></object>\n\nThis is easy to understand with numeric properties like width or position, but it works exactly the same with properties like color. Just imagine the same process happening for each of the R, G and B values that represents the color. You can think of them as 3 separate 2D interpolations that combine to give a color at each step of the animation.\n\n> An interesting side note with CSS animations, is that no matter what values you use to define color the browser will always transition through an RGB colour space. This means that although the final colour will be the same, the path taken and intermediary colors will be different.\n\nWe can manipulate the timing of an animation to get different results at different points of interpolation. By plotting an animation timing function on the same graph above, we can see how this changes the value returned at different points in the animation, while the start and end values remain the same.\n\n<object data=\"/img/easing2.svg\" type=\"image/svg+xml\"></object>\n\nThis is a non-linear interpolation and it’s really handy for creating all kinds of animation effects and more natural looking movement with acceleration and easing. We can define [animation timing functions in CSS](https://developer.mozilla.org/en/docs/Web/CSS/animation-timing-function) using [keywords, steps or cubic bezier curves](https://developer.mozilla.org/en-US/docs/Web/CSS/single-transition-timing-function) for greater control.\n\n## Interpolation outside animation\n\nSo far I've discussed the problem with media queries not always reflecting design intentions, and the limitations of interpolation with calc(). I've also shown how new features like variable fonts might be constrained by these limitations. The interesting thing is, we have all the tools we need to solve these problems, in CSS right now. Only they are tied closely to animation in the browser.\n\nThe rest of this article is going to talk about the idea of exposing a native interpolation function in CSS, how it might work, and what problems might solve. It's very hypothetical and it's ok if you don't agree with either the idea in general or how it should work.\n\nI've talked about interpolation and animation together, however interpolating values over time is just one possibility. The duration and elapsed time of an animation simply provides a percentage completion. Somewhere within the browser an interpolation function is called and it will dutifully return a value at the given percentage completion, according to the timing function.\n\nLet’s imagine we could access this function directly in CSS and pass it our own percentage. If we could change this value using media queries, [CSS variables (custom properties)](https://developer.mozilla.org/en-US/docs/Web/CSS/Using_CSS_variables) and calc(), what are some of the things we might be able to do?\n\nFirst let’s imaging a syntax. We need an `initial-value`, a `target-value`, a `percentage-completion` and a `timing-function`. The timing function could be an optional value and default to a linear interpolation. That means it might look something like this:\n\n```css\ninterpolate(initial-value, target-value, percentage-completion, [timing-function])\n```\n\nAnd could be used like this:\n\n```css\n.thing {\n  width: interpolate(0px, 500px, 0.5, linear);\n}\n```\n\n**Note**: This is a not real CSS, it is a hypothetical solution to a real problem for the purpose of discussion.  \n\nObviously in the example above it would be far easier to set the width to 250px. So, interpolation functions are not that useful without variables. We do have some variable values in CSS. Things like:\n\n  - the viewport width and height,\n  - the width and height of an element or its container,\n  - the number of siblings an element has, or\n  - the order of an element amongst its siblings.\n\nThese are all things that in one context or another we can know and use in CSS; unfortunately in many cases these variables are not easily queried to create conditional statements. There are some useful tricks to take advantage of them. Things like [advanced fluid typography](https://madebymike.com.au/writing/precise-control-responsive-typography/) and [quantity queries](http://alistapart.com/article/quantity-queries-for-css) are great real world examples.\n\nA more hypothetical example in a native interpolation function might look something like this:\n\n```css\n:root {\n  --max-viewport: 500px;\n  --min-viewport: 1000px;\n  --range: var(--max-viewport) - var(--min-viewport);\n  --percentage-completion: calc( (100vw - var(--min-viewport)) / var(--range) );\n}\n.thing {\n  width: interpolate(0px, 500px, var(--percentage-completion), ease-in);\n}\n```\n\nAlthough the above calculation is quite simple, but it's more than a bit ugly. This is because it uses CSS variables and unit algebra concepts I mentioned earlier to work out a percentage completion.\n\nA far neater solution would be a function to work out a percentage. This would reduce the above to something far more digestible like this:  \n\n```css\nroot: {\n  --percentage-completion: percentage(500px, 1000px, 100vw);\n}\n.thing {\n  width: interpolate(0px, 500px, var(--percentage-completion), ease-in);\n}\n```\n\n**Note:** Any interpolation function would probably need to clamp returned values to the specified range, as negative completion percentage are a likely result with variables.\n\nThis doesn't need to work with just length values. I mentioned that CSS has a whole bunch of [animatable properties](https://www.w3.org/TR/css3-transitions/#animatable-properties) that it already knows how to interpolate. It makes sense that any native function should work with these definitions. This means interpolating a color is also valid:\n\n```css\nroot: {\n  --percentage-completion: percentage(500px, 1000px, 100vw);\n}\n.thing {\n  background-color: interpolate(red, greed, var(--percentage-completion));\n}\n```\n\nThe above example of changing the background color doesn't make much sense in relation to the viewport, but there are more legitimate use cases for interpolating a color in relation to an elements width. We just can't as easily query the properties needed to do this, as we can with the viewport. [Container queries](http://alistapart.com/article/container-queries-once-more-unto-the-breach) seem to be forever on the horizon. It won't be soon, but my hope is that container queries also ship with container and element units, that work much like viewport units, only for the width of an element.\n\nContainer query units might look something like this:\n\n| Unit      | Description                                                           |\n|-----------|-----------------------------------------------------------------------|\n| cqw       | Relative to 1% of the container width                                 |\n| cqh       | Relative to 1% of the container height                                |\n| cqmin     | Relative to 1% of the container width or height, whichever is smaller |\n| cqmax     | Relative to 1% of the container width or height, whichever is larger  |\n| eqw       | Relative to 1% of the element width                                   |\n| eqh       | Relative to 1% of the element height                                  |\n| eqmin     | Relative to 1% of the element width or height, whichever is smaller   |\n| eqmax     | Relative to 1% of the element width or height, whichever is larger    |\n\n**Note**: I used the `cq` prefix is because `ch` is already a valid unit type and `eq` for consistency.\n\nWith units like these, we could do something like this:\n\n```css\nroot: {\n  --percentage-completion: percentage(0px, 100cqw, 100eqw);\n}\n.thing {\n  background-color: interpolate(red, greed, var(--percentage-completion));\n}\n```\nIn this example the percentage-completion is the percentage width of a child element, in relation to it's parent element. Allowing CSS property values to be relative to context like this opens up a whole range of possibilities for things like, dynamic progress bars, creative navigation components and data-visualisation.\n\nBut maybe this isn't the right solution. If we have a unit type for viewport width, container width and element width, where does this stop? DOM order, line length, color? Is it better introduce another function to get a value? E.g. `value-of(width)` if we do this, what about container width and non CSS properties like DOM order or line length? Magic keywords? `value-of(dom-order)`. I don't know!\n\nPerhaps you don't agree with any of this. Perhaps you think we shouldn't introduce more functional features to CSS. That's ok. I hope you will agree that there is a need for discussion, that break-points don't necessarily match the intentions of designers and that interpolation will become a more significant feature of web design with the introduction of variable fonts, and an increasing adoption of viewport units and dynamic layout features.\n\nI'd like to start a discussion and if you have ideas please [let me know](https://twitter.com/MikeRiethmuller) or consider [contributing to the issue](https://github.com/w3c/csswg-drafts/issues/581) on the CSS Working Group's, GitHub page.\n"
    },
    "526e9e64-6d53-52d0-bcaa-5aa949032b59": {
      "id": "526e9e64-6d53-52d0-bcaa-5aa949032b59",
      "children": [],
      "parent": "a7bdaa30-4cbf-5a24-8f2c-0cb4eb0eef41",
      "internal": {
        "content": "A very tongue-in-cheek article about why jQuery is good for the web.",
        "type": "MarkdownRemark",
        "contentDigest": "8ca649c88d7c00159602f7a387d4e2c1",
        "owner": "gatsby-transformer-remark"
      },
      "frontmatter": {
        "title": ""
      },
      "excerpt": "",
      "rawMarkdownBody": "A very tongue-in-cheek article about why jQuery is good for the web."
    },
    "a1d227e0-244f-51ef-b713-c361cf1fc45d": {
      "id": "a1d227e0-244f-51ef-b713-c361cf1fc45d",
      "children": [],
      "parent": "8882dfb4-a256-5f64-9b6c-abaa1bf71b86",
      "internal": {
        "content": "jQuery I love you. We've been together for 10 years and that's more than 50 years in JavaScript framework lifetimes. I might see you now less often than I did once, but I need you now no less than when we first met.\n\nI’ll never forget our first function together:\n\n```javascript\n$(document).ready(function(){\n  alert(‘page loaded’);\n});\n```\nHa! I hope you will forgive me for that alert. That’s how we did things then and I wanted to be sure you worked; of course you worked, I would never doubt it now. We don’t do `$(document).ready()` very much these days, but I still remember the good times we had. I also remember the pain I had trying to do this without you!\n\nYou were always there for me when things were tough. You made things consistent, how they should be, often without me even realising you were doing it. The web was a scary place and you brought order to it. You gave me confidence.\n\nYou were there for me too when I had no clue what I was doing. You helped me achieve things I would have never achieved on my own. In some ways, you made it too easy for me and I did some things I should have never done; I'm sorry, that was my fault not yours.\n\nShallow though it might be, I like the way you look. I can recognise your form anywhere. I love your neat and tidy closures and your chainable methods that keep me wanting more. I look upon you with comfort and familiarity. You always make me smile.  \n\nYou are selfless. So selfless in fact, that you made me less reliant on you. You taught me how to think. And not just me, but the world around us has been shaped by your influence. Everytime I hear someone say “Native JavaScript” I smile and I think of you. You are so brilliant they needed a term to describe your absence. You have been my fearless leader and guiding light. That’s why I love you jQuery.\n\nI wish those that didn't know you as well as I do, would treat you with more respect. Younger suitors like Angular and React will come and go; some will make their mark and one day they might even be worthy of comparison. But you will always be my first love; my one true love.\n\nIt hurts me when I hear them say things like “you don’t need jQuery”. They don’t remember how dark it was before your light. We needed you then and we still need you now. I like the way you do things and although the years have passed, for certain tasks, you still do what you do better than anyone else could. I trust you. I know you and you know me. There will always be other ways we could do things, but I know I can rely on you and you’re always there when I need you to be.\n\nSo thank you jQuery! It’s been a wonderful 10 years. I hope we have another 10, but if we don’t it will always be with dignity and respect that I remember you and never less, because you do the perfect job of making yourself redundant. It is befitting that you do this so gracefully. If the time does come to say goodbye it will be because you have given us all that you can. To not be needed does not mean you will not forever be important to the me and the web.\n\nThank you jQuery.",
        "type": "MarkdownRemark",
        "contentDigest": "a6764d013db62224b68acff7342c7752",
        "owner": "gatsby-transformer-remark"
      },
      "frontmatter": {
        "title": ""
      },
      "excerpt": "",
      "rawMarkdownBody": "jQuery I love you. We've been together for 10 years and that's more than 50 years in JavaScript framework lifetimes. I might see you now less often than I did once, but I need you now no less than when we first met.\n\nI’ll never forget our first function together:\n\n```javascript\n$(document).ready(function(){\n  alert(‘page loaded’);\n});\n```\nHa! I hope you will forgive me for that alert. That’s how we did things then and I wanted to be sure you worked; of course you worked, I would never doubt it now. We don’t do `$(document).ready()` very much these days, but I still remember the good times we had. I also remember the pain I had trying to do this without you!\n\nYou were always there for me when things were tough. You made things consistent, how they should be, often without me even realising you were doing it. The web was a scary place and you brought order to it. You gave me confidence.\n\nYou were there for me too when I had no clue what I was doing. You helped me achieve things I would have never achieved on my own. In some ways, you made it too easy for me and I did some things I should have never done; I'm sorry, that was my fault not yours.\n\nShallow though it might be, I like the way you look. I can recognise your form anywhere. I love your neat and tidy closures and your chainable methods that keep me wanting more. I look upon you with comfort and familiarity. You always make me smile.  \n\nYou are selfless. So selfless in fact, that you made me less reliant on you. You taught me how to think. And not just me, but the world around us has been shaped by your influence. Everytime I hear someone say “Native JavaScript” I smile and I think of you. You are so brilliant they needed a term to describe your absence. You have been my fearless leader and guiding light. That’s why I love you jQuery.\n\nI wish those that didn't know you as well as I do, would treat you with more respect. Younger suitors like Angular and React will come and go; some will make their mark and one day they might even be worthy of comparison. But you will always be my first love; my one true love.\n\nIt hurts me when I hear them say things like “you don’t need jQuery”. They don’t remember how dark it was before your light. We needed you then and we still need you now. I like the way you do things and although the years have passed, for certain tasks, you still do what you do better than anyone else could. I trust you. I know you and you know me. There will always be other ways we could do things, but I know I can rely on you and you’re always there when I need you to be.\n\nSo thank you jQuery! It’s been a wonderful 10 years. I hope we have another 10, but if we don’t it will always be with dignity and respect that I remember you and never less, because you do the perfect job of making yourself redundant. It is befitting that you do this so gracefully. If the time does come to say goodbye it will be because you have given us all that you can. To not be needed does not mean you will not forever be important to the me and the web.\n\nThank you jQuery."
    },
    "f8c5451f-cb6a-56aa-8ed3-cd4cd9822c3d": {
      "id": "f8c5451f-cb6a-56aa-8ed3-cd4cd9822c3d",
      "children": [],
      "parent": "94f77e6c-3427-56f8-beb5-984846348062",
      "internal": {
        "content": "A more personal article on being a developer and having an average mathematical ability.",
        "type": "MarkdownRemark",
        "contentDigest": "6b42187dfd68352827526ca73fd4f53e",
        "owner": "gatsby-transformer-remark"
      },
      "frontmatter": {
        "title": ""
      },
      "excerpt": "",
      "rawMarkdownBody": "A more personal article on being a developer and having an average mathematical ability."
    },
    "85655e10-d94f-5cba-aa70-fa3425dff26f": {
      "id": "85655e10-d94f-5cba-aa70-fa3425dff26f",
      "children": [],
      "parent": "0d3f20f9-0a59-5827-93be-03b9ec6df855",
      "internal": {
        "content": "When I was at school I had a strong interest in learning to code, but I was terrible at maths. My teachers and parents told me I would need strong mathematical abilities to be a good developer and although they didn't mean it to be, I found this discouraging. I really wasn't good with numbers and I couldn't see this changing.\n\nOn the one hand I was right, it didn't change and I've only recently learnt to use maths to great effect when coding. On the other hand, although my abilities haven't changed, my approach and appreciation for maths has.\n\nAnother thing I was wrong about was that I hated maths. This turned out to be a symptom of a different problem. For whatever reason, and to this day still, my brain sometimes freaks out when asked to do simple mental arithmetic.\n\nThis has been a real issue for me. If you ask me to calculate something in my head, there is a small but very real chance my brain will have a kernel panic. Sometimes it recovers and I get the answer in about the same time as an average 5 year old. On other occasions my brain just shuts down. At this point I have the choice to reboot and start the problem again from the beginning, or I could just run away. It can be embarrassing, so in public I avoid situations where I might be asked to do maths and if stuck try to divert attention from myself. This has led to me avoiding maths in general and downplaying any ability in this area.\n\nIt was eventually coding that allowed me to realise that my handicap with mental arithmetic was not an in indication of my overall ability or my capacity to enjoy mathematical problems, and it does not need to be a limiting factor me as a developer.\n\nObviously there are many different roles that you can choose as a developer. Some of these probably do require a greater affinity for maths. I'm not making physics engines, 3D rendering applications, or sending spacecraft to Mars. If you are doing these things, and I'm just guessing here, maybe my experience doesn't apply to you.\n\nPrimarily, I'm a web developer and I consider myself more of a front-end developer as well. At any level this is still a highly technical role and there is a lot that [front-end developers need to be aware](https://css-tricks.com/front-end-developer-aware/) of, but for the most part, hard maths is not one of those things.\n\nSo for a long time, despite my job as a developer, I successfully avoided thinking about maths in a direct way. This was particularly true early on in my career, but at some point I started to see maths in the things I was doing. Things like animation, colour, layout, typography, almost everywhere actually. Do you know what else I realised? I was actually good at many of these things!\n\nI was confidently tweaking numbers that represent bezier curves to manipulate motion in animation. I was using modular scales and other ratios in my designs. I understood colour theory and contrast.\n\nBut whilst I understood the results of what I was doing, initially I didn't deeply understand the maths behind a lot of these concepts. I wanted to explore this more and in my spare time I started experimenting with creative coding.\n\nThis opened my eyes to a lot of maths I already knew. I found I already had a reasonable understanding of how colour transitions worked in different 2D and 3D colour spaces. I was already using triangles and circles to calculate distance like Pythagoras himself. Occasionally, I was even playing with vectors, calculus and trigonometry in HTML canvas to create complex physics based animation.\n\nExperimenting with these things does not require any mental arithmetic. With code it's easy for me to visualise mathematical concepts and for once I can begin to understand how and why maths works. This was completely different from my attempts at school to understand a black-box with several disconnected, one dimensional experiments.\n\nSuddenly I was not hating maths any more. I looked at the things I was doing with my eyes more open. The more I learnt, the more I discovered mathamatical rules underpin a lot of my work. Daniel Shiffman's book [The Nature of Code](http://natureofcode.com/) and [his videos](https://www.youtube.com/user/shiffman) showed me even more examples and formulas I could use. I found new practical applications for mathematical concepts everywhere.\n\nMaths now inspires me as much as it scares and I'm willing to engage with more advanced concepts even those I don't fully understand. YouTube channels like [Numberphile](https://www.youtube.com/user/numberphile) and [Standup Maths](https://www.youtube.com/user/standupmaths) have shown me it is possible to understand and appreciate mathematics on a higher level while a deeper understanding may be out of reach. I feel proud that can understand concepts, implications, connections and the beauty of complexity, rather than let down that I can't compute the details. This is the same effect that coding had for me. I never got this inspiration in school.\n\nMy brain still crashes sometimes when attempting to do mental arithmetic, but that's ok. Although you can probably do it 10 times faster than me, it doesn't count if you're not solving the right problem. When working on problems I don't fully understand I no longer feel the pressure to solve them in the same 90 minutes as everyone else. I feel my slower pace sometimes allows me to focus better.\n\nAlthough I haven't become great at maths, with more willingness to engage, my ability has gradually improved. Maybe one day I'll fix whatever bug there is in my brain code, that causes me crash when attempting mental arithmetic.\n",
        "type": "MarkdownRemark",
        "contentDigest": "617f2c188406a21be74afec48e7132d3",
        "owner": "gatsby-transformer-remark"
      },
      "frontmatter": {
        "title": ""
      },
      "excerpt": "",
      "rawMarkdownBody": "When I was at school I had a strong interest in learning to code, but I was terrible at maths. My teachers and parents told me I would need strong mathematical abilities to be a good developer and although they didn't mean it to be, I found this discouraging. I really wasn't good with numbers and I couldn't see this changing.\n\nOn the one hand I was right, it didn't change and I've only recently learnt to use maths to great effect when coding. On the other hand, although my abilities haven't changed, my approach and appreciation for maths has.\n\nAnother thing I was wrong about was that I hated maths. This turned out to be a symptom of a different problem. For whatever reason, and to this day still, my brain sometimes freaks out when asked to do simple mental arithmetic.\n\nThis has been a real issue for me. If you ask me to calculate something in my head, there is a small but very real chance my brain will have a kernel panic. Sometimes it recovers and I get the answer in about the same time as an average 5 year old. On other occasions my brain just shuts down. At this point I have the choice to reboot and start the problem again from the beginning, or I could just run away. It can be embarrassing, so in public I avoid situations where I might be asked to do maths and if stuck try to divert attention from myself. This has led to me avoiding maths in general and downplaying any ability in this area.\n\nIt was eventually coding that allowed me to realise that my handicap with mental arithmetic was not an in indication of my overall ability or my capacity to enjoy mathematical problems, and it does not need to be a limiting factor me as a developer.\n\nObviously there are many different roles that you can choose as a developer. Some of these probably do require a greater affinity for maths. I'm not making physics engines, 3D rendering applications, or sending spacecraft to Mars. If you are doing these things, and I'm just guessing here, maybe my experience doesn't apply to you.\n\nPrimarily, I'm a web developer and I consider myself more of a front-end developer as well. At any level this is still a highly technical role and there is a lot that [front-end developers need to be aware](https://css-tricks.com/front-end-developer-aware/) of, but for the most part, hard maths is not one of those things.\n\nSo for a long time, despite my job as a developer, I successfully avoided thinking about maths in a direct way. This was particularly true early on in my career, but at some point I started to see maths in the things I was doing. Things like animation, colour, layout, typography, almost everywhere actually. Do you know what else I realised? I was actually good at many of these things!\n\nI was confidently tweaking numbers that represent bezier curves to manipulate motion in animation. I was using modular scales and other ratios in my designs. I understood colour theory and contrast.\n\nBut whilst I understood the results of what I was doing, initially I didn't deeply understand the maths behind a lot of these concepts. I wanted to explore this more and in my spare time I started experimenting with creative coding.\n\nThis opened my eyes to a lot of maths I already knew. I found I already had a reasonable understanding of how colour transitions worked in different 2D and 3D colour spaces. I was already using triangles and circles to calculate distance like Pythagoras himself. Occasionally, I was even playing with vectors, calculus and trigonometry in HTML canvas to create complex physics based animation.\n\nExperimenting with these things does not require any mental arithmetic. With code it's easy for me to visualise mathematical concepts and for once I can begin to understand how and why maths works. This was completely different from my attempts at school to understand a black-box with several disconnected, one dimensional experiments.\n\nSuddenly I was not hating maths any more. I looked at the things I was doing with my eyes more open. The more I learnt, the more I discovered mathamatical rules underpin a lot of my work. Daniel Shiffman's book [The Nature of Code](http://natureofcode.com/) and [his videos](https://www.youtube.com/user/shiffman) showed me even more examples and formulas I could use. I found new practical applications for mathematical concepts everywhere.\n\nMaths now inspires me as much as it scares and I'm willing to engage with more advanced concepts even those I don't fully understand. YouTube channels like [Numberphile](https://www.youtube.com/user/numberphile) and [Standup Maths](https://www.youtube.com/user/standupmaths) have shown me it is possible to understand and appreciate mathematics on a higher level while a deeper understanding may be out of reach. I feel proud that can understand concepts, implications, connections and the beauty of complexity, rather than let down that I can't compute the details. This is the same effect that coding had for me. I never got this inspiration in school.\n\nMy brain still crashes sometimes when attempting to do mental arithmetic, but that's ok. Although you can probably do it 10 times faster than me, it doesn't count if you're not solving the right problem. When working on problems I don't fully understand I no longer feel the pressure to solve them in the same 90 minutes as everyone else. I feel my slower pace sometimes allows me to focus better.\n\nAlthough I haven't become great at maths, with more willingness to engage, my ability has gradually improved. Maybe one day I'll fix whatever bug there is in my brain code, that causes me crash when attempting mental arithmetic.\n"
    },
    "d49a5870-a6dd-54ca-a3ce-5362458f6c86": {
      "id": "d49a5870-a6dd-54ca-a3ce-5362458f6c86",
      "children": [],
      "parent": "b9f2ada5-ca57-5d1a-9ba3-629df8351a6d",
      "internal": {
        "content": "Merging deeply nested data in JSON is more difficult than it might seem.\n\nIn the past I've used a brute force approach when dealing with small and well structured data. This approach proved completely inadequate for large volumes of real world data.\n\nImagine we have a monthly darts competition and at the end of each month record the scores in a JSON file:\n\n```javascript\ndata_jan = { \"name\": \"mike\", \"score\": 47 }\ndata_feb = { \"name\": \"mike\", \"score\": 25 }\n```\n(I have no clue what a darts score should look like)\n\nAt this level getting mike's total score is trivial `data_jan.score +  data_feb.score`. But if we add more players, more months or more data getting totals quickly becomes a bit more involved.\n\n```javascript\ndata_jan = [\n  { \"name\": \"mike\", \"score\": 47, \"team\": \"A\" },\n  { \"name\": \"jill\", \"score\": 51, \"team\": \"B\" }\n]\ndata_feb = [\n  { \"name\": \"mike\", \"score\": 25, \"team\": \"A\" },\n  { \"name\": \"jill\", \"score\": 41, \"team\": \"B\" }\n]\n```\n\nYour first instinct might be to find all the players then for each player, loop over all the months, find score and add this to the current players total.\n\nWith help from something like [jQuery](http://jquery.com/) or [Underscore](http://underscorejs.org/), enough nested loops and liberal use filter and map statements you might get a result.\n\nThis will work until you run into some real world situations like players absent or a need for both team and player totals. In short this type of solution is a bit of a house of cards.\n\nThinking more about the problem I soon realised that it is similar to the use case for `.extend()` that both jQuery and Underscore provide. The only difference is I want control when merging so that I can change values and not just overwrite.\n\nIt was eventually suggested that I checkout [Lodash](http://lodash.com/) and I found the `.merge()` function allows a callback for data manipulation. So to get player totals all we need is:\n\n```javascript\n_.merge(data_jan, data_feb, function(a,b){\n  if(_.isNumber(a) && _.isNumber(b)){\n  \treturn a + b\n  }\n  return undefined\n})\n```\n\nThis is much faster and easier to follow than nested loops.\n\nOne small downside is you can only merge 2 objects at a time and my only other complaint is I don't have access to the key in the callback.\n\nBonus: If you are using Underscore, Lodash is almost a one for one replacement so it's easy to switch.\n\n**Update**\n\nIf you're using jQuery and do not want to add another library to the mix I wrote a jQuery extension to merge objects:\n\nhttps://gist.github.com/MadeByMike/e57dd16797acf5d105b5\n\nIt works much like `jQuery.extend()` however the first parameter is an array containing the objects to merge. The 2nd parameter is a callback that allows you to modify the data while merging.\n\n```javascript\n$.mergeObjects(merge_array, callback)\n```\n\nE.g.\n\n```javascript\nmerge_array = [{ \"name\": \"mike\", \"score\": 47},{ \"name\": \"mike\", \"score\": 11}];\n$.mergeObjects(merge_array, function(a,b){\n\tif($.isNumeric( a ) && $.isNumeric( a )){\n    \treturn a+b;\n    }\n    return b;\n});\n// Will return: { \"name\": \"mike\", \"score\": 58}\n```",
        "type": "MarkdownRemark",
        "contentDigest": "3f2c526283597dd1403a877ab9d549d8",
        "owner": "gatsby-transformer-remark"
      },
      "frontmatter": {
        "title": ""
      },
      "excerpt": "",
      "rawMarkdownBody": "Merging deeply nested data in JSON is more difficult than it might seem.\n\nIn the past I've used a brute force approach when dealing with small and well structured data. This approach proved completely inadequate for large volumes of real world data.\n\nImagine we have a monthly darts competition and at the end of each month record the scores in a JSON file:\n\n```javascript\ndata_jan = { \"name\": \"mike\", \"score\": 47 }\ndata_feb = { \"name\": \"mike\", \"score\": 25 }\n```\n(I have no clue what a darts score should look like)\n\nAt this level getting mike's total score is trivial `data_jan.score +  data_feb.score`. But if we add more players, more months or more data getting totals quickly becomes a bit more involved.\n\n```javascript\ndata_jan = [\n  { \"name\": \"mike\", \"score\": 47, \"team\": \"A\" },\n  { \"name\": \"jill\", \"score\": 51, \"team\": \"B\" }\n]\ndata_feb = [\n  { \"name\": \"mike\", \"score\": 25, \"team\": \"A\" },\n  { \"name\": \"jill\", \"score\": 41, \"team\": \"B\" }\n]\n```\n\nYour first instinct might be to find all the players then for each player, loop over all the months, find score and add this to the current players total.\n\nWith help from something like [jQuery](http://jquery.com/) or [Underscore](http://underscorejs.org/), enough nested loops and liberal use filter and map statements you might get a result.\n\nThis will work until you run into some real world situations like players absent or a need for both team and player totals. In short this type of solution is a bit of a house of cards.\n\nThinking more about the problem I soon realised that it is similar to the use case for `.extend()` that both jQuery and Underscore provide. The only difference is I want control when merging so that I can change values and not just overwrite.\n\nIt was eventually suggested that I checkout [Lodash](http://lodash.com/) and I found the `.merge()` function allows a callback for data manipulation. So to get player totals all we need is:\n\n```javascript\n_.merge(data_jan, data_feb, function(a,b){\n  if(_.isNumber(a) && _.isNumber(b)){\n  \treturn a + b\n  }\n  return undefined\n})\n```\n\nThis is much faster and easier to follow than nested loops.\n\nOne small downside is you can only merge 2 objects at a time and my only other complaint is I don't have access to the key in the callback.\n\nBonus: If you are using Underscore, Lodash is almost a one for one replacement so it's easy to switch.\n\n**Update**\n\nIf you're using jQuery and do not want to add another library to the mix I wrote a jQuery extension to merge objects:\n\nhttps://gist.github.com/MadeByMike/e57dd16797acf5d105b5\n\nIt works much like `jQuery.extend()` however the first parameter is an array containing the objects to merge. The 2nd parameter is a callback that allows you to modify the data while merging.\n\n```javascript\n$.mergeObjects(merge_array, callback)\n```\n\nE.g.\n\n```javascript\nmerge_array = [{ \"name\": \"mike\", \"score\": 47},{ \"name\": \"mike\", \"score\": 11}];\n$.mergeObjects(merge_array, function(a,b){\n\tif($.isNumeric( a ) && $.isNumeric( a )){\n    \treturn a+b;\n    }\n    return b;\n});\n// Will return: { \"name\": \"mike\", \"score\": 58}\n```"
    },
    "43ff1ece-e5b7-5d9f-9ead-0230390b9c56": {
      "id": "43ff1ece-e5b7-5d9f-9ead-0230390b9c56",
      "children": [],
      "parent": "953a7add-782d-5c98-9b05-db47236fa8cd",
      "internal": {
        "content": "Creating fluid responsive typography with calc and viewport units.",
        "type": "MarkdownRemark",
        "contentDigest": "4ba9ec50388aad0c8c4750382d531ab0",
        "owner": "gatsby-transformer-remark"
      },
      "frontmatter": {
        "title": ""
      },
      "excerpt": "",
      "rawMarkdownBody": "Creating fluid responsive typography with calc and viewport units."
    },
    "27c62192-a391-5b17-858b-b7d510546866": {
      "id": "27c62192-a391-5b17-858b-b7d510546866",
      "children": [],
      "parent": "4d8876be-0337-50e2-9044-eb7bc16b973c",
      "internal": {
        "content": "It is possible to have precise control over responsive typography. Using calc() and viewport units you can create fluid type that scales perfectly between specific pixel values, within a specific viewport range.\n\n<p>\n<a href=\"http://codepen.io/MadeByMike/pen/YPJJYv\" class=\"responsive-type\">\n  This text is limited to between 20px and 40px, over a viewport range of 600px to 800px.\n</a>\n</p>\n\nI don’t know why we don’t see viewport units being used more extensively for creating designs with responsive typography.\n\nViewport units have been around since 2012 and are [fairly well supported](http://caniuse.com/#feat=viewport-units). In fact Internet Explorer was an early mover on this and supports viewport units as far back as IE9.\n\nThey are also really easy to understand. One viewport unit is simply 1% of the viewport and there are 4 types of viewport units:\n\n  * vw - viewport width,\n  * vh - viewport height,\n  * vmin - height or width, whichever is smaller,\n  * vmax - height or width, whichever is larger\n\nSo the reason viewport units are not used more extensively is probably not due to a lack of browser support or developers' understanding. My guess is it’s probably more likely to do with the lack of precise control designers have over the font-size.\n\nDesigners that love typography often really love typography and they enjoy precise control over line-height, font-size, letter-spacing and other elements of typography those of us not in the club might not even know exist.\n\nThis desire for precise control is the reason that some designers still prefer to declare these properties using pixels. But it doesn’t really matter, whether they use ems, rems or percentages the truth is, they are all just abstractions of a base font size and that is usually 16 pixels. So they have never really had to give up complete control. It’s not difficult to work out what font-size an element is, as long as we know the base font-size.\n\nBut viewport units are different! They represent a fundamental change in approach. Unlike all the other units, viewport units are not relative to the base font size in any way. Instead they are relative to the viewport, which the user controls, and that might be scary for some.\n\nBut there are advantages to using viewport units, a font-size declared with viewport units is fluid, meaning it will scale smoothly. This is a clearly a better experience than [clunky responsive typography techniques](http://codepen.io/MadeByMike/pen/c54dfa521cf08e0439943b7a745f77f0) that require multiple media queries.\n\nResponsive typography with viewport units is really easy to implement, just declare the base font-size using vw; as long as you are not using pixels elsewhere in your stylesheet, other units are relative to the base font-size, (which is now viewport units) so they will all scale accordingly.\n\nBut there are a few rough edges you will need to sand back. Firstly when you get down to a very small viewport scaling is problematic. Luckily there are a few good methods for avoiding this.\n\n## Limit font scaling with calc()\n\nIf you would like set an exact minimum font-size in pixels you can use calc().\n\n```css\n:root{\n  font-size: calc(16px + 3vw);\n}\n```\n\nThis example says set the default size to 16px + 3vw.\n\n**Note**: There are still issues in some browsers when using viewport units and calc() together, so for now media queries is probably safer.\n\n## Limit font scaling with media queries\n\nYou can prevent the text from scaling below a specific threshold simply by using a media query and only applying viewport units above a certain device resolution.\n\n```css\n:root { font-size: 18px;  /* default below 600px */ }\n@media (min-width: 600px){\n  :root {\n    font-size: 3vw;\n  }\n}\n```\n\nWe can also stop scaling above a specific font-size, but for this we need to first work out what the viewport size will be at the font-size we want to stop scaling. For that we need a bit of maths:\n\n```text\nfont-size / ( number of viewport units / 100 )\nEg. 24 / ( 3 / 100 ) = 800px\n```\n\nWith that result just set another media query to change the root font-size back to a fixed unit.\n\n```css\n...\n@media (min-width: 800px){\n  :root {\n    font-size: 24px;  /*above 800px */\n  }\n}\n```\n\nThe calculations are not that hard but I find it easier to look at a simple table. This helps me visualise the change in font-size across different resolutions.\n\n<table>\n  <tbody>\n    <tr>\n      <th>Viewport units:</th><th>1vw</th><th>2vw</th><th>3vw</th><th>4vw</th><th>5vw</th>\n    </tr>\n    <tr>\n      <th>Viewport size</th><th colspan=\"5\">font-size in pixels</th>\n    </tr>\n    <tr>\n      <th>400px</th><td>4px</td><td>8px</td><td>12px</td><td>16px</td><td>20px</td>\n    </tr>\n    <tr>\n      <th>500px</th><td>5px</td><td>10px</td><td>15px</td><td>20px</td><td>25px</td>\n    </tr>\n    <tr>\n      <th>600px</th><td>6px</td><td>12px</td><td>18px</td><td>24px</td><td>30px</td>\n    </tr>\n    <tr>\n      <th>700px</th><td>7px</td><td>14px</td><td>21px</td><td>28px</td><td>35px</td>\n    </tr>\n    <tr>\n      <th>800px</th><td>8px</td><td>16px</td><td>24px</td><td>32px</td><td>40px</td>\n    </tr>\n    <tr>\n      <th>900px</th><td>9px</td><td>18px</td><td>27px</td><td>36px</td><td>45px</td>\n    </tr>\n    <tr>\n      <th>1000px</th><td>10px</td><td>20px</td><td>30px</td><td>40px</td><td>50px</td>\n    </tr>\n  </tbody>\n</table>\n\nLooking at the table you can see there are many limitations. We have little control over the rate at which viewport units change and we are confined to the options available in the table.\n\n## Precise control with calc()\n\nIn his 2012 article on [Fluid Type](http://trentwalton.com/2012/06/19/fluid-type/) Trent Walton said:\n\n<blockquote>\"It's been hard to let go of setting a static font-size for a site and calling things done. I’m realizing that the predictability & control we've had over web type is becoming a thing of the past.\"</blockquote>\n\nBut perhaps not all predictability and control is lost.\n\nLet's imagine that as a typography nerd with an eye for absolute precision, you want the font-size at a resolution of 600px to be 12px. Great! Looking at the table, setting a font-size of 2vw will achieve this. But you also want the font-size at 800px to be 32px. It seems you can’t do this without changing from 2vw to 4vw and this means a break-point and our font scaling will be jumpy and not fluid. I consider this a pretty significant limitation.\n\nThere is a solution to this! It's not exactly pretty but it works – at least in modern browsers. As stated earlier, some browser have bugs when using calc() and viewport units together, so this might be buggy in some older browsers. (This is not really a concern anymore, just set sensible default font sizes before declaring a fluid type calc() expression.)\n\nIt appears that by using calc() and vw we can get responsive typography that scales perfectly between specific pixel values within a specific viewport range.\n\nThis means you can have perfect smooth scaling between any 2 font sizes over any viewport range. The font will start scaling and stop scaling exactly where you want.\n\nTry the demo: [Precise control over responsive typography](http://codepen.io/MadeByMike/pen/YPJJYv?editors=110)\nThe demo uses SASS so you can easily change the upper and lower limits of the font-size and media queries. But the important part looks something like this:\n\n```css\n  font-size: calc( 12px + (24 - 12) * ( (100vw - 400px) / ( 800 - 400) ));\n```\n**Note**: In the example above, 12px is the minimum font-size and 24px is the maximum. 400px is the start of the viewport range and 800px is where it should stop scaling. The inclusion or absence of the units after each value is important.\n\nPut simply, it is a function that takes a value within a range and works out what the new value would be if applied to a different range. I can take the current viewport width (100vw) as input into this ‘function’. For example if I had viewport range of 500px to 1000px, and let’s imagine the current viewport is 750px, I then apply this to a font-size range. If my font-size range was 20px to 30px, because the input of 750px is right in the middle of 500px and 1000px my new font-size will also be right in the middle, 25px. Simple right?\n\nThis seems like it could be a pretty useful way to control the scaling of viewport units. It could also have uses beyond typography. You can do other interesting things, by inverting the range for example, you can have font sizes that get smaller as the viewport gets larger. Perhaps there is a use for this? I’d love to hear your thoughts and see other applications or extensions of this idea.\n\n**Update**: Each of the methods above use pixels for 'precise' control, however some readers have expressed concern that this will override user preferences for default font size. This is true, however all methods also work equally well with rem or any other unit type.\n\n## More info\n\n  - [Fluid Type](http://trentwalton.com/2012/06/19/fluid-type/), Trent Walton\n  - [Viewport units](https://web-design-weekly.com/2014/11/18/viewport-units-vw-vh-vmin-vmax/), Tim Severien\n  - [CSS Viewport Units](https://dev.opera.com/articles/css-viewport-units/), Chris Mills\n  - [FitText](http://fittextjs.com/), Dave Rupert\n  - [Viewport sized typography](https://eduardoboucas.com/blog/2015/06/18/viewport-sized-typography-with-minimum-and-maximum-sizes.html), a similar concept by Eduardo Bouças\n  - [Molten leading](http://nicewebtype.com/notes/2012/02/03/molten-leading-or-fluid-line-height/)\n",
        "type": "MarkdownRemark",
        "contentDigest": "17e51a61779a068647addcc30853fd73",
        "owner": "gatsby-transformer-remark"
      },
      "frontmatter": {
        "title": ""
      },
      "excerpt": "",
      "rawMarkdownBody": "It is possible to have precise control over responsive typography. Using calc() and viewport units you can create fluid type that scales perfectly between specific pixel values, within a specific viewport range.\n\n<p>\n<a href=\"http://codepen.io/MadeByMike/pen/YPJJYv\" class=\"responsive-type\">\n  This text is limited to between 20px and 40px, over a viewport range of 600px to 800px.\n</a>\n</p>\n\nI don’t know why we don’t see viewport units being used more extensively for creating designs with responsive typography.\n\nViewport units have been around since 2012 and are [fairly well supported](http://caniuse.com/#feat=viewport-units). In fact Internet Explorer was an early mover on this and supports viewport units as far back as IE9.\n\nThey are also really easy to understand. One viewport unit is simply 1% of the viewport and there are 4 types of viewport units:\n\n  * vw - viewport width,\n  * vh - viewport height,\n  * vmin - height or width, whichever is smaller,\n  * vmax - height or width, whichever is larger\n\nSo the reason viewport units are not used more extensively is probably not due to a lack of browser support or developers' understanding. My guess is it’s probably more likely to do with the lack of precise control designers have over the font-size.\n\nDesigners that love typography often really love typography and they enjoy precise control over line-height, font-size, letter-spacing and other elements of typography those of us not in the club might not even know exist.\n\nThis desire for precise control is the reason that some designers still prefer to declare these properties using pixels. But it doesn’t really matter, whether they use ems, rems or percentages the truth is, they are all just abstractions of a base font size and that is usually 16 pixels. So they have never really had to give up complete control. It’s not difficult to work out what font-size an element is, as long as we know the base font-size.\n\nBut viewport units are different! They represent a fundamental change in approach. Unlike all the other units, viewport units are not relative to the base font size in any way. Instead they are relative to the viewport, which the user controls, and that might be scary for some.\n\nBut there are advantages to using viewport units, a font-size declared with viewport units is fluid, meaning it will scale smoothly. This is a clearly a better experience than [clunky responsive typography techniques](http://codepen.io/MadeByMike/pen/c54dfa521cf08e0439943b7a745f77f0) that require multiple media queries.\n\nResponsive typography with viewport units is really easy to implement, just declare the base font-size using vw; as long as you are not using pixels elsewhere in your stylesheet, other units are relative to the base font-size, (which is now viewport units) so they will all scale accordingly.\n\nBut there are a few rough edges you will need to sand back. Firstly when you get down to a very small viewport scaling is problematic. Luckily there are a few good methods for avoiding this.\n\n## Limit font scaling with calc()\n\nIf you would like set an exact minimum font-size in pixels you can use calc().\n\n```css\n:root{\n  font-size: calc(16px + 3vw);\n}\n```\n\nThis example says set the default size to 16px + 3vw.\n\n**Note**: There are still issues in some browsers when using viewport units and calc() together, so for now media queries is probably safer.\n\n## Limit font scaling with media queries\n\nYou can prevent the text from scaling below a specific threshold simply by using a media query and only applying viewport units above a certain device resolution.\n\n```css\n:root { font-size: 18px;  /* default below 600px */ }\n@media (min-width: 600px){\n  :root {\n    font-size: 3vw;\n  }\n}\n```\n\nWe can also stop scaling above a specific font-size, but for this we need to first work out what the viewport size will be at the font-size we want to stop scaling. For that we need a bit of maths:\n\n```text\nfont-size / ( number of viewport units / 100 )\nEg. 24 / ( 3 / 100 ) = 800px\n```\n\nWith that result just set another media query to change the root font-size back to a fixed unit.\n\n```css\n...\n@media (min-width: 800px){\n  :root {\n    font-size: 24px;  /*above 800px */\n  }\n}\n```\n\nThe calculations are not that hard but I find it easier to look at a simple table. This helps me visualise the change in font-size across different resolutions.\n\n<table>\n  <tbody>\n    <tr>\n      <th>Viewport units:</th><th>1vw</th><th>2vw</th><th>3vw</th><th>4vw</th><th>5vw</th>\n    </tr>\n    <tr>\n      <th>Viewport size</th><th colspan=\"5\">font-size in pixels</th>\n    </tr>\n    <tr>\n      <th>400px</th><td>4px</td><td>8px</td><td>12px</td><td>16px</td><td>20px</td>\n    </tr>\n    <tr>\n      <th>500px</th><td>5px</td><td>10px</td><td>15px</td><td>20px</td><td>25px</td>\n    </tr>\n    <tr>\n      <th>600px</th><td>6px</td><td>12px</td><td>18px</td><td>24px</td><td>30px</td>\n    </tr>\n    <tr>\n      <th>700px</th><td>7px</td><td>14px</td><td>21px</td><td>28px</td><td>35px</td>\n    </tr>\n    <tr>\n      <th>800px</th><td>8px</td><td>16px</td><td>24px</td><td>32px</td><td>40px</td>\n    </tr>\n    <tr>\n      <th>900px</th><td>9px</td><td>18px</td><td>27px</td><td>36px</td><td>45px</td>\n    </tr>\n    <tr>\n      <th>1000px</th><td>10px</td><td>20px</td><td>30px</td><td>40px</td><td>50px</td>\n    </tr>\n  </tbody>\n</table>\n\nLooking at the table you can see there are many limitations. We have little control over the rate at which viewport units change and we are confined to the options available in the table.\n\n## Precise control with calc()\n\nIn his 2012 article on [Fluid Type](http://trentwalton.com/2012/06/19/fluid-type/) Trent Walton said:\n\n<blockquote>\"It's been hard to let go of setting a static font-size for a site and calling things done. I’m realizing that the predictability & control we've had over web type is becoming a thing of the past.\"</blockquote>\n\nBut perhaps not all predictability and control is lost.\n\nLet's imagine that as a typography nerd with an eye for absolute precision, you want the font-size at a resolution of 600px to be 12px. Great! Looking at the table, setting a font-size of 2vw will achieve this. But you also want the font-size at 800px to be 32px. It seems you can’t do this without changing from 2vw to 4vw and this means a break-point and our font scaling will be jumpy and not fluid. I consider this a pretty significant limitation.\n\nThere is a solution to this! It's not exactly pretty but it works – at least in modern browsers. As stated earlier, some browser have bugs when using calc() and viewport units together, so this might be buggy in some older browsers. (This is not really a concern anymore, just set sensible default font sizes before declaring a fluid type calc() expression.)\n\nIt appears that by using calc() and vw we can get responsive typography that scales perfectly between specific pixel values within a specific viewport range.\n\nThis means you can have perfect smooth scaling between any 2 font sizes over any viewport range. The font will start scaling and stop scaling exactly where you want.\n\nTry the demo: [Precise control over responsive typography](http://codepen.io/MadeByMike/pen/YPJJYv?editors=110)\nThe demo uses SASS so you can easily change the upper and lower limits of the font-size and media queries. But the important part looks something like this:\n\n```css\n  font-size: calc( 12px + (24 - 12) * ( (100vw - 400px) / ( 800 - 400) ));\n```\n**Note**: In the example above, 12px is the minimum font-size and 24px is the maximum. 400px is the start of the viewport range and 800px is where it should stop scaling. The inclusion or absence of the units after each value is important.\n\nPut simply, it is a function that takes a value within a range and works out what the new value would be if applied to a different range. I can take the current viewport width (100vw) as input into this ‘function’. For example if I had viewport range of 500px to 1000px, and let’s imagine the current viewport is 750px, I then apply this to a font-size range. If my font-size range was 20px to 30px, because the input of 750px is right in the middle of 500px and 1000px my new font-size will also be right in the middle, 25px. Simple right?\n\nThis seems like it could be a pretty useful way to control the scaling of viewport units. It could also have uses beyond typography. You can do other interesting things, by inverting the range for example, you can have font sizes that get smaller as the viewport gets larger. Perhaps there is a use for this? I’d love to hear your thoughts and see other applications or extensions of this idea.\n\n**Update**: Each of the methods above use pixels for 'precise' control, however some readers have expressed concern that this will override user preferences for default font size. This is true, however all methods also work equally well with rem or any other unit type.\n\n## More info\n\n  - [Fluid Type](http://trentwalton.com/2012/06/19/fluid-type/), Trent Walton\n  - [Viewport units](https://web-design-weekly.com/2014/11/18/viewport-units-vw-vh-vmin-vmax/), Tim Severien\n  - [CSS Viewport Units](https://dev.opera.com/articles/css-viewport-units/), Chris Mills\n  - [FitText](http://fittextjs.com/), Dave Rupert\n  - [Viewport sized typography](https://eduardoboucas.com/blog/2015/06/18/viewport-sized-typography-with-minimum-and-maximum-sizes.html), a similar concept by Eduardo Bouças\n  - [Molten leading](http://nicewebtype.com/notes/2012/02/03/molten-leading-or-fluid-line-height/)\n"
    },
    "19f7c7b5-34e2-5045-a101-7aa54f8dfd6f": {
      "id": "19f7c7b5-34e2-5045-a101-7aa54f8dfd6f",
      "children": [],
      "parent": "9f99c124-9efc-5525-889e-5b3a2e97152f",
      "internal": {
        "content": "A detailed exploration of how the space and size of items are determined when using flexbox.",
        "type": "MarkdownRemark",
        "contentDigest": "55c9125cb49e1343b138d07d60512d91",
        "owner": "gatsby-transformer-remark"
      },
      "frontmatter": {
        "title": ""
      },
      "excerpt": "",
      "rawMarkdownBody": "A detailed exploration of how the space and size of items are determined when using flexbox."
    },
    "3ce7ed04-e965-55f6-ab77-5ca4d40f841c": {
      "id": "3ce7ed04-e965-55f6-ab77-5ca4d40f841c",
      "children": [],
      "parent": "26d7a417-f231-572e-9c83-fd12952aa7bf",
      "internal": {
        "content": "Instead of covering all properties of Flexbox this article focuses on understanding how Flexbox calculates the width of items. The examples in this article are all in the context of a horizontal layout, but the same logic applies if you use a vertical layout.\n\nIf you don't know what Flexbox is, it's a layout method best suited for distributing the available space inside a container, amongst child items, even when the number of child items, their size and even their DOM order is not known or might change. [Have a look at this guide](http://css-tricks.com/snippets/css/a-guide-to-flexbox/), and [take a look at some examples](http://codepen.io/MadeByMike/pen/26cb650eaef356da925e75139537f74e) it might look like magic, but it's not, there is a method for calculating the size of child items.\n\nThe full algorithm for working out a flexbox layout in any situation is [available here](http://dev.w3.org/csswg/css-flexbox/#layout-algorithm), but as the spec rightly states:\n\n<blockquote>Authors writing web pages should generally be served well by the individual property descriptions, and do not need to read this section unless they have a deep-seated urge to understand arcane details of CSS layout.</blockquote>\n\nWhile this is true, I believe that designers and developers will still want to understand some parts of the layout algorithm. In particular so that they can roughly estimate width or height of flex items and confidently assign flex values without excessive trial and error.\n\n## How does it work?\n\nFlexbox wants to fit in. If a flex item is allowed to be itself the flex-basis tells the browser what size it wants to be. Think of the flex-basis as a suggested size or ideal size. If a flex-basis is not set, or if it is set to 'auto', it will equal the initial size of the element. In other words, it will be the width of its inner content.\n\n**Note:** If a flex item has borders, margin or padding these values need to be added to the flex-basis according to the current box-sizing method when calculating the remaining space. They should also be added to the values at the end of calculation to get the final outer width of each flex item.\n\nOnce each flex-basis has been determined the browser adds these together along with any margins, borders or padding and checks to see if there is any space remaining in the container. If there is space remaining it will distribute this proportionally amongst the flex items, according to their flex-grow values. Similarly, if the space remaining is negative it will shrink each item proportionately, according to their flex-shrink values. Of course if the remaining space is 0, nothing more needs to be done.\n\n### Increasing the size of flex items (flex-growing)\n\nWhen the combined size of all the flex items is less than their container, the remaining space is distributed amongst all the items. The flex-grow attribute is used to determine how the remaining space should be allocated. To work out how much space is allocated to each item, take the ratio of the item's flex-grow value, over the total of all the other flex-grow values in the same container and multiply this by the space remaining. Here is an example:\n\n<div id=\"example-static-flex-1\" class=\"flex-container\">\n\t<div class=\"flex-item flex-item-1\"><span>Item 1</span></div>\n\t<div class=\"flex-item flex-item-2\"><span>Item 2</span></div>\n</div>\n<div class=\"example-container pre\">\n.flex-container{ width: 600px; }\n.flex-item-1{ flex-basis: 200px; flex-grow: 3; }\n.flex-item-2{ flex-basis: 200px; flex-grow: 1; }\n\nTotal basis: 400px\nSpace remaining:  200px\n\nItem 1 grow factor: 3/4 &times; 200px = 150px\nItem 2 grow factor: 1/4 &times; 200px = 50px\n</div>\n\nThe space remaining is 200px, this is equal to the width of the flex container (600px) minus the total basis (400px). Of the remaining space (200px), ¾ (150px) is allocated to item 1 and ¼ (50px) to item 2.\n\nThese fractions are determined by taking the items individual flex-grow value over the combined flex-grow value of all items. To get the final width of each item, add this result to the initial flex-basis (350px and 250px).\n\nTo give another example; if both items had a flex-grow value of 1, or in any case where they had the same number, they would each be allocated half the remaining space. If one item had a value of 2 and the other 1, the first flex item would be allocated ⅔ of the remaining space and the other ⅓. This works the same with 3, 4, 5 or any number of items although obviously the fractions will differ.\n\n### Decreasing the size of flex items (flex-shrinking)\n\nIf the space remaining is a negative this means that the flex container is smaller than the preferred width of all the flex items. They are going to have to shrink. By assigning a flex-shrink value we can control much space each flex item will surrender.\n\nFor some reason the method for working out flex shrink differs slightly and is a little harder.\n\nRather than working out the ratio of an items flex-shrink value against the total of all flex-shrink values, for each item we first multiply its flex shrink value by its basis and then workout the ratio of this number against the sum of all flex-basis values, and multiply by the space remaining.\n\n<div id=\"example-static-flex-2\" class=\"flex-container\">\n\t<div class=\"flex-item flex-item-1\"><span>Item 1</span></div>\n\t<div class=\"flex-item flex-item-2\"><span>Item 2</span></div>\n\t<div class=\"flex-item flex-item-3\"><span>Item 2</span></div>\n</div>  \n<div class=\"example-container pre\">\n.flex-container{ width: 600px; }\n.flex-item-1{ flex-basis: 100px; flex-shrink: 1; }\n.flex-item-2{ flex-basis: 400px; flex-shrink: 1; }\n.flex-item-3{ flex-basis: 400px; flex-shrink: 1; }\n\nTotal basis: 900px\nSpace remaining: -300px\n\nItem 1 shrink factor: (1&times;100) / (100px + 400px + 400px) = .111 &times; -300px = -33.333px\nItem 2 shrink factor: (1&times;400) / (100px + 400px + 400px) = .444 &times; -300px = -133.333px\nItem 3 shrink factor: (1&times;400) / (100px + 400px + 400px) = .444 &times; -300px = -133.333px\n</div>\n\nThe space remaining is -300px, this is equal to the width of the flex container (600px) minus the total basis (900px). To find the shrink factor for each, multiply its flex-shrink value by its flex-basis value (1&times;100px or 1&times;400px), then divide this by the combined sum of the flex-shrink multiply the flex-basis for all items (1&times;100px) + (1&times;400px) + (1&times;400px).\n\nFinally multiply this number by the space remaining (-300px) to get the amount to reduce each item by (33.33px and 66.66px).\n\nIn the above example if the flex shrink of the first item was to change to 2 the result would differ as follows:\n\n<div class=\"example-container pre\">.flex-container{ width: 600px; }\n.flex-item-1{ flex-basis: 100px; flex-shrink: 2; }\n.flex-item-2{ flex-basis: 400px; flex-shrink: 1; }\n.flex-item-3{ flex-basis: 400px; flex-shrink: 1; }\n\nTotal basis: 900px\nSpace remaining: -300px\n\nItem 1 shrink factor: (2&times;100) / (200px + 400px + 400px) = .2 &times; -300px = -60px\nItem 2 shrink factor: (1&times;400) / (200px + 400px + 400px) = .4 &times; -300px = -120px\nItem 3 shrink factor: (1&times;400) / (200px + 400px + 400px) = .4 &times; -300px = -120px\n</div>\n\n## More info\n\n  - I built a little [tool for testing flexbox calculations](/demos/flexbox-tester/),\n  - Chris Wright covers his [adventures with flexbox](http://chriswrightdesign.com/experiments/flexbox-adventures/),\n  - Chris Coyier [a Complete Guide to Flexbox](http://css-tricks.com/snippets/css/a-guide-to-flexbox/),\n  - Chris Mills, wrote a great [introduction to flexbox](https://dev.opera.com/articles/flexbox-basics/),\n  - If you really must, every detail is available [in the spec](http://dev.w3.org/csswg/css-flexbox/#layout-algorithm)",
        "type": "MarkdownRemark",
        "contentDigest": "21c78bbd9871bfb3d0fc70986881df20",
        "owner": "gatsby-transformer-remark"
      },
      "frontmatter": {
        "title": ""
      },
      "excerpt": "",
      "rawMarkdownBody": "Instead of covering all properties of Flexbox this article focuses on understanding how Flexbox calculates the width of items. The examples in this article are all in the context of a horizontal layout, but the same logic applies if you use a vertical layout.\n\nIf you don't know what Flexbox is, it's a layout method best suited for distributing the available space inside a container, amongst child items, even when the number of child items, their size and even their DOM order is not known or might change. [Have a look at this guide](http://css-tricks.com/snippets/css/a-guide-to-flexbox/), and [take a look at some examples](http://codepen.io/MadeByMike/pen/26cb650eaef356da925e75139537f74e) it might look like magic, but it's not, there is a method for calculating the size of child items.\n\nThe full algorithm for working out a flexbox layout in any situation is [available here](http://dev.w3.org/csswg/css-flexbox/#layout-algorithm), but as the spec rightly states:\n\n<blockquote>Authors writing web pages should generally be served well by the individual property descriptions, and do not need to read this section unless they have a deep-seated urge to understand arcane details of CSS layout.</blockquote>\n\nWhile this is true, I believe that designers and developers will still want to understand some parts of the layout algorithm. In particular so that they can roughly estimate width or height of flex items and confidently assign flex values without excessive trial and error.\n\n## How does it work?\n\nFlexbox wants to fit in. If a flex item is allowed to be itself the flex-basis tells the browser what size it wants to be. Think of the flex-basis as a suggested size or ideal size. If a flex-basis is not set, or if it is set to 'auto', it will equal the initial size of the element. In other words, it will be the width of its inner content.\n\n**Note:** If a flex item has borders, margin or padding these values need to be added to the flex-basis according to the current box-sizing method when calculating the remaining space. They should also be added to the values at the end of calculation to get the final outer width of each flex item.\n\nOnce each flex-basis has been determined the browser adds these together along with any margins, borders or padding and checks to see if there is any space remaining in the container. If there is space remaining it will distribute this proportionally amongst the flex items, according to their flex-grow values. Similarly, if the space remaining is negative it will shrink each item proportionately, according to their flex-shrink values. Of course if the remaining space is 0, nothing more needs to be done.\n\n### Increasing the size of flex items (flex-growing)\n\nWhen the combined size of all the flex items is less than their container, the remaining space is distributed amongst all the items. The flex-grow attribute is used to determine how the remaining space should be allocated. To work out how much space is allocated to each item, take the ratio of the item's flex-grow value, over the total of all the other flex-grow values in the same container and multiply this by the space remaining. Here is an example:\n\n<div id=\"example-static-flex-1\" class=\"flex-container\">\n\t<div class=\"flex-item flex-item-1\"><span>Item 1</span></div>\n\t<div class=\"flex-item flex-item-2\"><span>Item 2</span></div>\n</div>\n<div class=\"example-container pre\">\n.flex-container{ width: 600px; }\n.flex-item-1{ flex-basis: 200px; flex-grow: 3; }\n.flex-item-2{ flex-basis: 200px; flex-grow: 1; }\n\nTotal basis: 400px\nSpace remaining:  200px\n\nItem 1 grow factor: 3/4 &times; 200px = 150px\nItem 2 grow factor: 1/4 &times; 200px = 50px\n</div>\n\nThe space remaining is 200px, this is equal to the width of the flex container (600px) minus the total basis (400px). Of the remaining space (200px), ¾ (150px) is allocated to item 1 and ¼ (50px) to item 2.\n\nThese fractions are determined by taking the items individual flex-grow value over the combined flex-grow value of all items. To get the final width of each item, add this result to the initial flex-basis (350px and 250px).\n\nTo give another example; if both items had a flex-grow value of 1, or in any case where they had the same number, they would each be allocated half the remaining space. If one item had a value of 2 and the other 1, the first flex item would be allocated ⅔ of the remaining space and the other ⅓. This works the same with 3, 4, 5 or any number of items although obviously the fractions will differ.\n\n### Decreasing the size of flex items (flex-shrinking)\n\nIf the space remaining is a negative this means that the flex container is smaller than the preferred width of all the flex items. They are going to have to shrink. By assigning a flex-shrink value we can control much space each flex item will surrender.\n\nFor some reason the method for working out flex shrink differs slightly and is a little harder.\n\nRather than working out the ratio of an items flex-shrink value against the total of all flex-shrink values, for each item we first multiply its flex shrink value by its basis and then workout the ratio of this number against the sum of all flex-basis values, and multiply by the space remaining.\n\n<div id=\"example-static-flex-2\" class=\"flex-container\">\n\t<div class=\"flex-item flex-item-1\"><span>Item 1</span></div>\n\t<div class=\"flex-item flex-item-2\"><span>Item 2</span></div>\n\t<div class=\"flex-item flex-item-3\"><span>Item 2</span></div>\n</div>  \n<div class=\"example-container pre\">\n.flex-container{ width: 600px; }\n.flex-item-1{ flex-basis: 100px; flex-shrink: 1; }\n.flex-item-2{ flex-basis: 400px; flex-shrink: 1; }\n.flex-item-3{ flex-basis: 400px; flex-shrink: 1; }\n\nTotal basis: 900px\nSpace remaining: -300px\n\nItem 1 shrink factor: (1&times;100) / (100px + 400px + 400px) = .111 &times; -300px = -33.333px\nItem 2 shrink factor: (1&times;400) / (100px + 400px + 400px) = .444 &times; -300px = -133.333px\nItem 3 shrink factor: (1&times;400) / (100px + 400px + 400px) = .444 &times; -300px = -133.333px\n</div>\n\nThe space remaining is -300px, this is equal to the width of the flex container (600px) minus the total basis (900px). To find the shrink factor for each, multiply its flex-shrink value by its flex-basis value (1&times;100px or 1&times;400px), then divide this by the combined sum of the flex-shrink multiply the flex-basis for all items (1&times;100px) + (1&times;400px) + (1&times;400px).\n\nFinally multiply this number by the space remaining (-300px) to get the amount to reduce each item by (33.33px and 66.66px).\n\nIn the above example if the flex shrink of the first item was to change to 2 the result would differ as follows:\n\n<div class=\"example-container pre\">.flex-container{ width: 600px; }\n.flex-item-1{ flex-basis: 100px; flex-shrink: 2; }\n.flex-item-2{ flex-basis: 400px; flex-shrink: 1; }\n.flex-item-3{ flex-basis: 400px; flex-shrink: 1; }\n\nTotal basis: 900px\nSpace remaining: -300px\n\nItem 1 shrink factor: (2&times;100) / (200px + 400px + 400px) = .2 &times; -300px = -60px\nItem 2 shrink factor: (1&times;400) / (200px + 400px + 400px) = .4 &times; -300px = -120px\nItem 3 shrink factor: (1&times;400) / (200px + 400px + 400px) = .4 &times; -300px = -120px\n</div>\n\n## More info\n\n  - I built a little [tool for testing flexbox calculations](/demos/flexbox-tester/),\n  - Chris Wright covers his [adventures with flexbox](http://chriswrightdesign.com/experiments/flexbox-adventures/),\n  - Chris Coyier [a Complete Guide to Flexbox](http://css-tricks.com/snippets/css/a-guide-to-flexbox/),\n  - Chris Mills, wrote a great [introduction to flexbox](https://dev.opera.com/articles/flexbox-basics/),\n  - If you really must, every detail is available [in the spec](http://dev.w3.org/csswg/css-flexbox/#layout-algorithm)"
    },
    "e7425620-202f-5349-a861-7d420bd3ba99": {
      "id": "e7425620-202f-5349-a861-7d420bd3ba99",
      "children": [],
      "parent": "c0b00b48-7402-5d9f-971c-61d3cfab3fbe",
      "internal": {
        "content": "A tutorial for Codrops on using HTML5 canvas to crop and resize images on the client side.",
        "type": "MarkdownRemark",
        "contentDigest": "e59e8047ee02fe6c6a99c2fdc2c6441b",
        "owner": "gatsby-transformer-remark"
      },
      "frontmatter": {
        "title": ""
      },
      "excerpt": "",
      "rawMarkdownBody": "A tutorial for Codrops on using HTML5 canvas to crop and resize images on the client side."
    },
    "a25ddaf6-c3cd-5995-9ca7-fcfc9df530e1": {
      "id": "a25ddaf6-c3cd-5995-9ca7-fcfc9df530e1",
      "children": [],
      "parent": "6d09f4e3-b5f4-5745-ab25-8247ae61a599",
      "internal": {
        "content": "Learn how to resize and crop images using JavaScript and the HTML5 Canvas element using controls, commonly seen in photo editing applications.\n\nI published an article on the Codrops website: [Resizing and Cropping Images with Canvas](http://tympanus.net/codrops/2014/10/30/resizing-cropping-images-canvas/)\n\nThis tutorial focuses on the interaction and design aspects of this task rather than just the technical details of using Canvas for image resampling.\n\nI also recommend using this example with the FileReader and Drag and Drop APIs which are not covered in this tutorial.\n\nA huge thanks to Mary Lou (Manoela Ilic) for support with the design and much more!",
        "type": "MarkdownRemark",
        "contentDigest": "d526c877251623fc0f5a69e40cbc0337",
        "owner": "gatsby-transformer-remark"
      },
      "frontmatter": {
        "title": ""
      },
      "excerpt": "",
      "rawMarkdownBody": "Learn how to resize and crop images using JavaScript and the HTML5 Canvas element using controls, commonly seen in photo editing applications.\n\nI published an article on the Codrops website: [Resizing and Cropping Images with Canvas](http://tympanus.net/codrops/2014/10/30/resizing-cropping-images-canvas/)\n\nThis tutorial focuses on the interaction and design aspects of this task rather than just the technical details of using Canvas for image resampling.\n\nI also recommend using this example with the FileReader and Drag and Drop APIs which are not covered in this tutorial.\n\nA huge thanks to Mary Lou (Manoela Ilic) for support with the design and much more!"
    },
    "6ad3e664-a44e-5355-a9d9-f48f976b2be5": {
      "id": "6ad3e664-a44e-5355-a9d9-f48f976b2be5",
      "children": [],
      "parent": "894edf2d-e701-5b58-8997-646afa8f834a",
      "internal": {
        "content": "Sharing some experiences trying to get a design system\\living style guide working in a corporate environment.",
        "type": "MarkdownRemark",
        "contentDigest": "cc49a7d0e439c09406792b08ef2f6df5",
        "owner": "gatsby-transformer-remark"
      },
      "frontmatter": {
        "title": ""
      },
      "excerpt": "",
      "rawMarkdownBody": "Sharing some experiences trying to get a design system\\living style guide working in a corporate environment."
    },
    "b899bbbf-97a6-5195-9c80-e4cfb9cf094c": {
      "id": "b899bbbf-97a6-5195-9c80-e4cfb9cf094c",
      "children": [],
      "parent": "5890fe96-7bd1-56b5-b84d-9facc5a27739",
      "internal": {
        "content": "\nI recently completed my third attempt at implementing a style guide within my organisation. So far this is the first attempt that looks to be maintainable and has some traction outside the development team. I want to share with you how we got there and what I learnt from 2 failed attempts.\n\nMy first attempt at a style guide used an automated tool called [KSS](http://warpspire.com/kss/styleguides/), it automatically generated a style guide from comments in the CSS. It was clever. I was sold by the efficiency. It failed quickly. I don't think it failed because of the choice of tool. I just hadn't adequately prepared. I hadn't discussed the objectives with other developers and definitely not more broadly with the team.\n\nHowever before I could learn that lesson there was an immediate barrier of technical debt. At the time we didn't use build tools or even SASS. I'm ashamed to say that despite my best efforts the CSS was a little all over the place. This meant that the style guide was difficult to maintain. As well as this, people in the development team were also used to working reactively. The style guide was not being used as a tool for development and planning, so inevitably it became a post implementation task to update and it quickly fell behind production.\n\n\nWe needed to change how we worked. I began the mammoth task of refactoring seven thousand lines of CSS as well as making preprocessors and build tools a part our toolkit. We started discussing our prefered approach to CSS architecture and other development principles and guidelines. We settled on [SMACSS](https://smacss.com/) for naming conventions, [Mark Otto’s Code guide](http://codeguide.co/) and [Atomic Design](http://patternlab.io/about.html) principles. We were not instant experts at any of these things and developing discipline takes time. You never arrive at perfect and it’s a moving target anyway, so we just kept working towards it. I wrote about this in [another blog post on how I CSS](http://madebymike.com.au/writing/how-do-I-css).\nWe worked with these principles without a style guide for a while. Everyone up-skilled and we noticed better consistency and maintainability of our code. We were pretty sure we were ready and style guide version 2.0 was going to be brilliant. It was for a while. We used [Fabricator](https://fbrctr.github.io/) and [Gulp](http://gulpjs.com/) to create a custom style guide. Unlike KSS we manually created a markdown file for each component. The extra work was offset by a high degree of flexibility and the live reload features meant the style guide became the place for development and testing.\n\nThis worked really well for developers with only a slightly steeper learning curve and set-up cost for new staff.\n\nThe next thing I learnt was that the success of a style guide depends as much on the processes you have within your organisation as it does on on the discipline of your development team. It's not just the development process that matters, content and design processes also influence your chance of success.\n\nThis matters even more in large organisations. Unfortunately a lot of developers focus on the build process and no matter how clever that is it's not going to be successful if it doesn't enable content writers and designers to do their job better. They don't care how efficient your build process is. It also has to enable managers and decision makers to get an overview of how isolated changes are going to influence the boarded aesthetic. Only then will they see value in it.\n\nDone well style guides reduce conflict and lead to better design decisions, at worst they cause friction and the development team will soon be seen as a blocker rather than an enabler. Right from the beginning start thinking about how your style guide is going to make other people's jobs easier not your own.\n\nYou might need to influence people's thinking and modify existing processes to move to a place in your organisation where a style guide will be accepted as an important design tool. A strong foundation in the concepts of atomic design is important but do not try to sell these concepts to non technical staff. Instead talk about the benefits of visual consistency from a user experience perspective and how patterns help streamline the design process and lead to better business outcomes.\n\nThis is easy to say now but this is not how I did it. Instead I harped on about maintainability of stylesheets, about reducing lines of code and more efficient development processes. \"So what\", was often the response, “I want that button, on that page only, to be corporate bule” and I would fight the good fight, but in the end, more often than not I found myself saying “which of the 49 shades of corporate blue we have, would you like to use”. No doubt only because I'd made such a fuss about it, “can I have a new one?” was the answer.\n\nEventually I clicked and I started talking about what does blue represent to our customers, where and why do we use buttons and what are the business rules that govern or guide our decisions to use these indicators. Everything in design conveys meaning and if you can define it on a per component basis, you can start to get non-technical people to understand the design language.\n\nFor the most part managers, designers and developers are all out to achieve the same goals and style guides can give you a common language to discuss this. Who’d have thought that style guides were not just a vanity exercise in developer tooling.\n\nI started focusing on what purpose each component has on the site. Asking questions like: \"What is its function?\" and \"Where should it be used?\" I also realised that it is equally important to define where something should not be used. Soon I found we were wanting to put even more business logic in there, things like “What are the character limits?” and “How many times can a component be used on a single page?”.\n\nNow we have a tool that is a lot more than a style guide it is a framework for discussion. When new feature is proposed we see if we have an existing component that fulfills the stated need. If we do, we use that. If we don’t we create a new one, modify an existing one or create a new variation of a base component. This forces more stringent thinking. Firstly am I happy with an existing feature, secondly am I prepared to modify something globally and if not, can I describe the reason and purpose for a variation.\n\nDoes this always work? It’s early days and we need more time to see how much influence this process will actually have. Although I’m optimistic, I don’t think it will always work. At the end of the day a process only works as long as people are prepared to follow it. The style guide now gives us a really good chance of showcasing the value of our process and the reason behind them but if someone high enough up the food chain says \"it must be this shade of blue\", I guess we'll just have to put that reason in the style guide.",
        "type": "MarkdownRemark",
        "contentDigest": "784935a6dedf8a92873e429e9740f2bb",
        "owner": "gatsby-transformer-remark"
      },
      "frontmatter": {
        "title": ""
      },
      "excerpt": "",
      "rawMarkdownBody": "\nI recently completed my third attempt at implementing a style guide within my organisation. So far this is the first attempt that looks to be maintainable and has some traction outside the development team. I want to share with you how we got there and what I learnt from 2 failed attempts.\n\nMy first attempt at a style guide used an automated tool called [KSS](http://warpspire.com/kss/styleguides/), it automatically generated a style guide from comments in the CSS. It was clever. I was sold by the efficiency. It failed quickly. I don't think it failed because of the choice of tool. I just hadn't adequately prepared. I hadn't discussed the objectives with other developers and definitely not more broadly with the team.\n\nHowever before I could learn that lesson there was an immediate barrier of technical debt. At the time we didn't use build tools or even SASS. I'm ashamed to say that despite my best efforts the CSS was a little all over the place. This meant that the style guide was difficult to maintain. As well as this, people in the development team were also used to working reactively. The style guide was not being used as a tool for development and planning, so inevitably it became a post implementation task to update and it quickly fell behind production.\n\n\nWe needed to change how we worked. I began the mammoth task of refactoring seven thousand lines of CSS as well as making preprocessors and build tools a part our toolkit. We started discussing our prefered approach to CSS architecture and other development principles and guidelines. We settled on [SMACSS](https://smacss.com/) for naming conventions, [Mark Otto’s Code guide](http://codeguide.co/) and [Atomic Design](http://patternlab.io/about.html) principles. We were not instant experts at any of these things and developing discipline takes time. You never arrive at perfect and it’s a moving target anyway, so we just kept working towards it. I wrote about this in [another blog post on how I CSS](http://madebymike.com.au/writing/how-do-I-css).\nWe worked with these principles without a style guide for a while. Everyone up-skilled and we noticed better consistency and maintainability of our code. We were pretty sure we were ready and style guide version 2.0 was going to be brilliant. It was for a while. We used [Fabricator](https://fbrctr.github.io/) and [Gulp](http://gulpjs.com/) to create a custom style guide. Unlike KSS we manually created a markdown file for each component. The extra work was offset by a high degree of flexibility and the live reload features meant the style guide became the place for development and testing.\n\nThis worked really well for developers with only a slightly steeper learning curve and set-up cost for new staff.\n\nThe next thing I learnt was that the success of a style guide depends as much on the processes you have within your organisation as it does on on the discipline of your development team. It's not just the development process that matters, content and design processes also influence your chance of success.\n\nThis matters even more in large organisations. Unfortunately a lot of developers focus on the build process and no matter how clever that is it's not going to be successful if it doesn't enable content writers and designers to do their job better. They don't care how efficient your build process is. It also has to enable managers and decision makers to get an overview of how isolated changes are going to influence the boarded aesthetic. Only then will they see value in it.\n\nDone well style guides reduce conflict and lead to better design decisions, at worst they cause friction and the development team will soon be seen as a blocker rather than an enabler. Right from the beginning start thinking about how your style guide is going to make other people's jobs easier not your own.\n\nYou might need to influence people's thinking and modify existing processes to move to a place in your organisation where a style guide will be accepted as an important design tool. A strong foundation in the concepts of atomic design is important but do not try to sell these concepts to non technical staff. Instead talk about the benefits of visual consistency from a user experience perspective and how patterns help streamline the design process and lead to better business outcomes.\n\nThis is easy to say now but this is not how I did it. Instead I harped on about maintainability of stylesheets, about reducing lines of code and more efficient development processes. \"So what\", was often the response, “I want that button, on that page only, to be corporate bule” and I would fight the good fight, but in the end, more often than not I found myself saying “which of the 49 shades of corporate blue we have, would you like to use”. No doubt only because I'd made such a fuss about it, “can I have a new one?” was the answer.\n\nEventually I clicked and I started talking about what does blue represent to our customers, where and why do we use buttons and what are the business rules that govern or guide our decisions to use these indicators. Everything in design conveys meaning and if you can define it on a per component basis, you can start to get non-technical people to understand the design language.\n\nFor the most part managers, designers and developers are all out to achieve the same goals and style guides can give you a common language to discuss this. Who’d have thought that style guides were not just a vanity exercise in developer tooling.\n\nI started focusing on what purpose each component has on the site. Asking questions like: \"What is its function?\" and \"Where should it be used?\" I also realised that it is equally important to define where something should not be used. Soon I found we were wanting to put even more business logic in there, things like “What are the character limits?” and “How many times can a component be used on a single page?”.\n\nNow we have a tool that is a lot more than a style guide it is a framework for discussion. When new feature is proposed we see if we have an existing component that fulfills the stated need. If we do, we use that. If we don’t we create a new one, modify an existing one or create a new variation of a base component. This forces more stringent thinking. Firstly am I happy with an existing feature, secondly am I prepared to modify something globally and if not, can I describe the reason and purpose for a variation.\n\nDoes this always work? It’s early days and we need more time to see how much influence this process will actually have. Although I’m optimistic, I don’t think it will always work. At the end of the day a process only works as long as people are prepared to follow it. The style guide now gives us a really good chance of showcasing the value of our process and the reason behind them but if someone high enough up the food chain says \"it must be this shade of blue\", I guess we'll just have to put that reason in the style guide."
    },
    "f35395be-8f5f-5883-abcd-ecfe7ae1165e": {
      "id": "f35395be-8f5f-5883-abcd-ecfe7ae1165e",
      "children": [],
      "parent": "0dbc01af-f742-5068-843d-77a80963ed36",
      "internal": {
        "content": "A technique for loading animations that can be applied to existing elements.",
        "type": "MarkdownRemark",
        "contentDigest": "2fd82ade35c9a960bf0fde6f2d1988fb",
        "owner": "gatsby-transformer-remark"
      },
      "frontmatter": {
        "title": ""
      },
      "excerpt": "",
      "rawMarkdownBody": "A technique for loading animations that can be applied to existing elements."
    },
    "42e07311-fc68-573b-ba82-5e2ed7690dbf": {
      "id": "42e07311-fc68-573b-ba82-5e2ed7690dbf",
      "children": [],
      "parent": "e447a460-b7ae-56db-992b-7a982f9c1c63",
      "internal": {
        "content": "With a \"zero element\" loading animation, a loading state can be applied to any element with just the addition of a class name.\n\n<div class=\"row\">\n  <div class=\"col col-6\">\n    <a href=\"http://codepen.io/MadeByMike/pen/LEbYgr?editors=110\">\n      <div class=\"loading horizontal-example\"></div>\n    </a>\n    <p class=\"caption\"><a href=\"http://codepen.io/MadeByMike/pen/LEbYgr?editors=110\">view examples on codepen</a></p>\n  </div>\n  <div class=\"col col-6\">\n    <a href=\"http://codepen.io/MadeByMike/pen/bNeyEj?editors=110\">\n      <div class=\"loading radial-example\"></div>\n    </a>\n    <p class=\"caption\"><a href=\"http://codepen.io/MadeByMike/pen/bNeyEj?editors=110\">view examples on codepen</a></p>\n  </div>\n</div>\n\nFirst of all, I'm not a huge fan of loading animations and neither are your users but sometimes, for various reasons an action is going to take time and we need to let people know we're working on it. So if we must use a loading animation we want it to have a light footprint and be easy to toggle on and off when and where we need it.\n\nI've seen a lot of css only loading animations. A quick search on CodePen will find thousands of examples. They are popular because they are relatively quick and easy to make, yet can be creatively challenging and the result is usually visually pleasing. These type of experiments are fun and can be a rewarding and worthwhile exercise, but the practicality of many examples is more questionable.\n\nThere are definite benefits to css only solutions such as improving the number of network requests, page weight and animation performance. But in my opinion these benefits are often outweighed by the need to insert a div soup into the mark-up. Not only that, positioning a css only \"spinner\" can be challenging, it often requires changes to the surrounding mark-up to avoid breaking the layout.\n\nPerhaps slightly more practical are the \"single element\" examples. They tend to be a bit more robust and whilst it's simple enough to toggle a single element to show and hide the loading animation, I don't like toggling element visibility or adding and removing elements with JavaScript. To me this seems to defeat the purpose of a CSS only solution. It feels like the correct way to approach a css loading animation would be for it to work simply by adding a class name such as `loading` to an element to indicate that it's in a loading state.\n\nAfter all loading is a \"describing word\", it indicates the state of something and is not an object itself. Maybe it is a little silly to think we should apply this logic to our mark-up, but it feels right to me. So I set out to make a \"zero element\" loading animation, one that can be applied simply by adding a class name.\n\nI eventually settled on a solution that works almost everywhere. There are only 2 conditions. The element we're adding the loading animation to:\n\n - cannot have `:before` or `:after` pseudo-elements applied\n - must be possible to change the `position` property to `relative`\n\nThis works in every situation I’ve ever needed a loading animation but if we want to apply this technique to an element that requires absolute positioning or already has pseudo-elements, it’s usually possible to add the loading class to a container or child element.\n\n## How it works\n\nThis technique works by using `:before` and `:after` pseudo-elements to create the different parts of the animation. CSS transformations and absolute positioning are applied and these properties are animated to create different types of loading indicators.\n\nThe difficult part is working out how to position and animate the various parts, taking into account the width, height, borders and css transformations.\n\nFor a typical horizontal loading animation we can work this out without too much trouble but to create a smooth radial animation or anything more complex you will probably want to rely on something like sass or a generator.\n\nIf you want to understand how it works let’s look at making a simple horizontal example.\n\n```css\n.loading{\n  position: relative;\n  background: rgba(255,255,255,.8);\n}\n\n.loading:before{\n  content:'';\n  box-sizing: border-box;\n\n  /* centre everything */\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n\n  width: 200px;\n  height: 30px;\n\n  border: solid 1px #000;\n  border-radius: 30px;\n}\n\n.loading:after{\n  content:'';\n  box-sizing: border-box;\n\n  /* centre everything */\n  position: absolute;\n  transform: translate(-50%, -50%);\n  top: 50%;\n  left: 50%;\n\n  border: solid 5px #000;\n  width: 28px;\n  height: 28px;\n  border-radius: 50%;\n}\n```\n\nWith the above css we can add a class name `loading` to any element on the page and we should get something like the following, positioned in the centre:\n\n<img style=\"margin: 0 auto; display:block;\" src=\"/img/zero-element-example.png\">\n\nIf you want to apply this to the whole page, by applying the class name to the body element, you will also need to add the following css:\n\n```css\nhtml, body { height: 100%; }\n```\n\nTo complete the loading animation we need to move the circle back and forward along the bar.\n\nTo our circle add the following css:\n\n```css\n.loading:after{\n\n  ...\n\n  -webkit-animation: loading 3s ease-in-out infinite alternate;\n  animation: loading 3s ease-in-out infinite alternate;\n}\n```\n\nImportant animation properties in this example are the `animation-timing-function` and `animation-direction`. For the timing function I selected `ease-in-out` which causes it to slow before changing direction, although `linear` also works, however for this example the animation direction must be set to `alternate`. Next we add the animation keyframes.\n\n```css\n@keyframes loading {\n  0% { transform: translate(-99px, -50%); }\n  100% { transform: translate(71px, -50%); }\n}\n\n@-webkit-keyframes loading {\n  0% { transform: translate(-99px, -50%); }\n  100% { transform: translate(71px, -50%); }\n}\n```\n\nFor the animation keyframes we translate the position of the circle so that is starts with its left edge against the left edge of the bar and ends with its right edge against the right edge of the bar. We also need to translate the vertical position by `-50%` to maintain its vertical centring. We do not change the vertical position in this animation.\n\nWithout any transformations applied, the left edge of the circle is positioned in the centre of the bar. Since we know the width of the bar is 200px, to position the left edge of the circle against the left edge of the bar we need to move it `-100px` horizontally. So why in the example do I have `-99px`? This is simply because I want the circle to bounce against the inside edge of the bar. In the css I have `box-sizing: border-box;` applied to the bar so I need to account for the border width. It’s barely noticeable with a border width of 1px but with a thick border it will make a difference. This is the same reason the width and height of the circle are `28px` rather than `30px`.\n\nThe full calculation for the first keyframe is:\n\n```\n-(half the width of the bar - border width of the bar)\n-(100 - 1) = -99\n```\n\nFor the final keyframe the calculation is similar however as already stated positions in css are relative to the top left corner of the element, so we need to take off the width of the circle.\n\nThe full calculation is for the final keyframe is:\n\n```\n(half the width of the bar - border width of the bar – width of circle)\n100-1-28 = 71\n```\n\n**Note**: You might not want to confine the circle to the inner width of the bar. Take a look at some of the examples I’ve done in the links at end of this article.\n\nYou can of course change the sizes and colors to suit your preferences, as well as the border width or other properties, just remember if you change these adjust the calculations accordingly.\n\nIf you’d like to make a horizontal zero element loading animation you can, [fork my zero element animation boilerplate](http://codepen.io/MadeByMike/pen/6fced0cf51ce07ef6833aa775d254652).\n\nThis is of course only one possible type of loading animation. There are plenty of alternatives that could be made using the same technique.\n\nI’ve created some other examples such as a radial loading animation - I'll admit, this one generates some lengthy css, but in most cases it is still smaller than an image or even an SVG. To create more complex animations like this you are going to need a preprocessor or some kind of script to generate the keyframes. Otherwise minor changes are going to result in a significant re-calculations and this is not something you would want to do by hand.\n\nPlease let me know on [twitter](https://twitter.com/MikeRiethmuller) if you find this useful, if you have some more examples or if you have any questions. I'll be happy to add your examples here.\n\n## Examples\n\n - [Horizontal zero element loaders](http://codepen.io/MadeByMike/pen/LEbYgr?editors=110)\n - [Radial loaders zero element](http://codepen.io/MadeByMike/pen/bNeyEj?editors=110)\n",
        "type": "MarkdownRemark",
        "contentDigest": "3441f27f92b80ea3a07c3ed89a79119e",
        "owner": "gatsby-transformer-remark"
      },
      "frontmatter": {
        "title": ""
      },
      "excerpt": "",
      "rawMarkdownBody": "With a \"zero element\" loading animation, a loading state can be applied to any element with just the addition of a class name.\n\n<div class=\"row\">\n  <div class=\"col col-6\">\n    <a href=\"http://codepen.io/MadeByMike/pen/LEbYgr?editors=110\">\n      <div class=\"loading horizontal-example\"></div>\n    </a>\n    <p class=\"caption\"><a href=\"http://codepen.io/MadeByMike/pen/LEbYgr?editors=110\">view examples on codepen</a></p>\n  </div>\n  <div class=\"col col-6\">\n    <a href=\"http://codepen.io/MadeByMike/pen/bNeyEj?editors=110\">\n      <div class=\"loading radial-example\"></div>\n    </a>\n    <p class=\"caption\"><a href=\"http://codepen.io/MadeByMike/pen/bNeyEj?editors=110\">view examples on codepen</a></p>\n  </div>\n</div>\n\nFirst of all, I'm not a huge fan of loading animations and neither are your users but sometimes, for various reasons an action is going to take time and we need to let people know we're working on it. So if we must use a loading animation we want it to have a light footprint and be easy to toggle on and off when and where we need it.\n\nI've seen a lot of css only loading animations. A quick search on CodePen will find thousands of examples. They are popular because they are relatively quick and easy to make, yet can be creatively challenging and the result is usually visually pleasing. These type of experiments are fun and can be a rewarding and worthwhile exercise, but the practicality of many examples is more questionable.\n\nThere are definite benefits to css only solutions such as improving the number of network requests, page weight and animation performance. But in my opinion these benefits are often outweighed by the need to insert a div soup into the mark-up. Not only that, positioning a css only \"spinner\" can be challenging, it often requires changes to the surrounding mark-up to avoid breaking the layout.\n\nPerhaps slightly more practical are the \"single element\" examples. They tend to be a bit more robust and whilst it's simple enough to toggle a single element to show and hide the loading animation, I don't like toggling element visibility or adding and removing elements with JavaScript. To me this seems to defeat the purpose of a CSS only solution. It feels like the correct way to approach a css loading animation would be for it to work simply by adding a class name such as `loading` to an element to indicate that it's in a loading state.\n\nAfter all loading is a \"describing word\", it indicates the state of something and is not an object itself. Maybe it is a little silly to think we should apply this logic to our mark-up, but it feels right to me. So I set out to make a \"zero element\" loading animation, one that can be applied simply by adding a class name.\n\nI eventually settled on a solution that works almost everywhere. There are only 2 conditions. The element we're adding the loading animation to:\n\n - cannot have `:before` or `:after` pseudo-elements applied\n - must be possible to change the `position` property to `relative`\n\nThis works in every situation I’ve ever needed a loading animation but if we want to apply this technique to an element that requires absolute positioning or already has pseudo-elements, it’s usually possible to add the loading class to a container or child element.\n\n## How it works\n\nThis technique works by using `:before` and `:after` pseudo-elements to create the different parts of the animation. CSS transformations and absolute positioning are applied and these properties are animated to create different types of loading indicators.\n\nThe difficult part is working out how to position and animate the various parts, taking into account the width, height, borders and css transformations.\n\nFor a typical horizontal loading animation we can work this out without too much trouble but to create a smooth radial animation or anything more complex you will probably want to rely on something like sass or a generator.\n\nIf you want to understand how it works let’s look at making a simple horizontal example.\n\n```css\n.loading{\n  position: relative;\n  background: rgba(255,255,255,.8);\n}\n\n.loading:before{\n  content:'';\n  box-sizing: border-box;\n\n  /* centre everything */\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n\n  width: 200px;\n  height: 30px;\n\n  border: solid 1px #000;\n  border-radius: 30px;\n}\n\n.loading:after{\n  content:'';\n  box-sizing: border-box;\n\n  /* centre everything */\n  position: absolute;\n  transform: translate(-50%, -50%);\n  top: 50%;\n  left: 50%;\n\n  border: solid 5px #000;\n  width: 28px;\n  height: 28px;\n  border-radius: 50%;\n}\n```\n\nWith the above css we can add a class name `loading` to any element on the page and we should get something like the following, positioned in the centre:\n\n<img style=\"margin: 0 auto; display:block;\" src=\"/img/zero-element-example.png\">\n\nIf you want to apply this to the whole page, by applying the class name to the body element, you will also need to add the following css:\n\n```css\nhtml, body { height: 100%; }\n```\n\nTo complete the loading animation we need to move the circle back and forward along the bar.\n\nTo our circle add the following css:\n\n```css\n.loading:after{\n\n  ...\n\n  -webkit-animation: loading 3s ease-in-out infinite alternate;\n  animation: loading 3s ease-in-out infinite alternate;\n}\n```\n\nImportant animation properties in this example are the `animation-timing-function` and `animation-direction`. For the timing function I selected `ease-in-out` which causes it to slow before changing direction, although `linear` also works, however for this example the animation direction must be set to `alternate`. Next we add the animation keyframes.\n\n```css\n@keyframes loading {\n  0% { transform: translate(-99px, -50%); }\n  100% { transform: translate(71px, -50%); }\n}\n\n@-webkit-keyframes loading {\n  0% { transform: translate(-99px, -50%); }\n  100% { transform: translate(71px, -50%); }\n}\n```\n\nFor the animation keyframes we translate the position of the circle so that is starts with its left edge against the left edge of the bar and ends with its right edge against the right edge of the bar. We also need to translate the vertical position by `-50%` to maintain its vertical centring. We do not change the vertical position in this animation.\n\nWithout any transformations applied, the left edge of the circle is positioned in the centre of the bar. Since we know the width of the bar is 200px, to position the left edge of the circle against the left edge of the bar we need to move it `-100px` horizontally. So why in the example do I have `-99px`? This is simply because I want the circle to bounce against the inside edge of the bar. In the css I have `box-sizing: border-box;` applied to the bar so I need to account for the border width. It’s barely noticeable with a border width of 1px but with a thick border it will make a difference. This is the same reason the width and height of the circle are `28px` rather than `30px`.\n\nThe full calculation for the first keyframe is:\n\n```\n-(half the width of the bar - border width of the bar)\n-(100 - 1) = -99\n```\n\nFor the final keyframe the calculation is similar however as already stated positions in css are relative to the top left corner of the element, so we need to take off the width of the circle.\n\nThe full calculation is for the final keyframe is:\n\n```\n(half the width of the bar - border width of the bar – width of circle)\n100-1-28 = 71\n```\n\n**Note**: You might not want to confine the circle to the inner width of the bar. Take a look at some of the examples I’ve done in the links at end of this article.\n\nYou can of course change the sizes and colors to suit your preferences, as well as the border width or other properties, just remember if you change these adjust the calculations accordingly.\n\nIf you’d like to make a horizontal zero element loading animation you can, [fork my zero element animation boilerplate](http://codepen.io/MadeByMike/pen/6fced0cf51ce07ef6833aa775d254652).\n\nThis is of course only one possible type of loading animation. There are plenty of alternatives that could be made using the same technique.\n\nI’ve created some other examples such as a radial loading animation - I'll admit, this one generates some lengthy css, but in most cases it is still smaller than an image or even an SVG. To create more complex animations like this you are going to need a preprocessor or some kind of script to generate the keyframes. Otherwise minor changes are going to result in a significant re-calculations and this is not something you would want to do by hand.\n\nPlease let me know on [twitter](https://twitter.com/MikeRiethmuller) if you find this useful, if you have some more examples or if you have any questions. I'll be happy to add your examples here.\n\n## Examples\n\n - [Horizontal zero element loaders](http://codepen.io/MadeByMike/pen/LEbYgr?editors=110)\n - [Radial loaders zero element](http://codepen.io/MadeByMike/pen/bNeyEj?editors=110)\n"
    },
    "2a1bfe1e-bb0b-50e7-a43c-ed69f78c8101": {
      "id": "2a1bfe1e-bb0b-50e7-a43c-ed69f78c8101",
      "children": [],
      "parent": "3efb439f-b7ac-543d-baf6-ece41d990898",
      "internal": {
        "content": "My experience implementing service workers to cache and serve content offline.",
        "type": "MarkdownRemark",
        "contentDigest": "651d3a891c32fbf1eeb5a29446fe38aa",
        "owner": "gatsby-transformer-remark"
      },
      "frontmatter": {
        "title": ""
      },
      "excerpt": "",
      "rawMarkdownBody": "My experience implementing service workers to cache and serve content offline."
    },
    "9ff5728a-3db0-5a4c-b0a2-e4b5aa030ec9": {
      "id": "9ff5728a-3db0-5a4c-b0a2-e4b5aa030ec9",
      "children": [],
      "parent": "edfd379f-9adc-5b92-baeb-ecae57cff7a1",
      "internal": {
        "content": "Service workers can do a lot more than make web pages work offline but for most people, myself included, this will be their first experience with them. I recently implemented a simple offline page for my blog and was surprised with how easy it was. Full of confidence, I wanted to do more. I decided to start saving blog posts for offline reading and things escalated quickly. I soon learnt the rabbit hole is deep.\n\nThis is not a criticism of service workers, it's an indication of how powerful and versatile they are. I think in time, as the concepts become more familiar, and the complexities are abstracted away, offline content will become common place. In fact, I drank the kool-aid and can see why many people think that, within a few years, offline content will become as ubiquitous in web development as responsive design today.\n\nHaving said that, there are a few things I wish I had known before getting started.\n\n## Browser support & caching\n\nService workers are an easy candidate for progressive enhancement and on the surface, it's easy to check for support before registering a service worker. You do that like this:\n\n```javascript\nif ('serviceWorker' in navigator) {\n  // Yay, service workers work!\n  navigator.serviceWorker.register('/sw.js');\n}\n```\n\nIt seems simple enough but there is one gotcha. If you look at the [MDN page for the service worker cache API](https://developer.mozilla.org/en-US/docs/Web/API/Cache), you will see that different versions of Chrome support different caching methods. This means that, despite diligently checking for feature support, versions of Chrome between 40 and 45 will get an error when using the `addAll` method. This is less of a problem now than it was when these versions were more widely used. I checked [Can I Use](http://caniuse.com/usage-table) and at the time of writing this, it looks like it might impact around 1.15% of users.  \n\nI read several blogs and tutorials on getting started with service workers, some advocate using only `put` rather than `addAll`, others recommend using a [cache pollyfill](https://github.com/dominiccooney/cache-polyfill), while others still make no mention of it. Obviously these were all written at different times and it took me a lot of research to work out what the right approach was.\n\nIn the end, with such a small number of users, that is only getting smaller, I opted to check for the `addAll` method and treat browsers that don't support it, like those that don't support service workers at all.\n\nSo, my feature detection now becomes:\n\n```javascript\nif ( 'serviceWorker' in navigator && (typeof Cache !== 'undefined' && Cache.prototype.addAll) ) {\n  // Yay, this is a problem we didn't need to have!\n  navigator.serviceWorker.register('/sw.js');\n}\n```\n\nThis is a bit verbose, and I'm really going out of my way here just to avoid a console error, but I tested this in all major browsers, including critical versions that don't support the `addAll` method, and I'm happy with it. It was so much fun!\n\n## Where to put service workers\n\nWhen you register a service worker you point to a JavaScript file with the service worker logic, and this brings me to the second thing I wish I'd known. That is, if you want to implement service workers across your domain, you **must place the service worker in the root directory of your site**. For security reasons, service workers only control pages in the same directory as the service worker or below. Effectively this means, not in your site's JavaScript directory as I attempted at first. I'm sure this was written as clear as day, somewhere that was obvious to everyone but me.\n\nWhile on this topic, it's worth mentioning that service workers only work over HTTPS or localhost domains. Luckily for me my blog was already configured to redirect HTTP traffic to HTTPS. If you can do this, it's a great idea, if not, you could check you are on a secure domain before registering a service worker.\n\n## Can we service worker yet?\n\nYes, we are now ready to service worker! When getting started I recommend reading, Jake \"The Service Worker\" Archibald's [Offline Cookbook](https://jakearchibald.com/2014/offline-cookbook/). It's still a great place to start and the links and references contain a wealth of information.\n\nYou'll soon learn that, where offline content is concerned, there are 3 main events we listen for in a service worker:\n\n  - install,\n  - activate, and\n  - fetch.\n\nThe **install** event is fired only once when the service worker is first registered. Here we setup the cache prime it with essential resources. My install event is pretty simple, nothing special here. I cache the homepage, CSS and an offline page:\n\n```javascript\nvar CACHE_NAME = 'v1::madebymike';\nvar urlsToCache = [\n  '/',\n  '/offline.html',\n  '/css/styles.min.css'\n];\n\n// Install\nself.addEventListener('install', function(event) {\n  event.waitUntil(\n    caches.open(CACHE_NAME).then(function(cache) {\n      return cache.addAll(urlsToCache);\n    })\n  );\n});\n```\n\nThe **activate** event is fired after install and every time you navigate to the domain managed by the service worker. It's not fired for subsequent navigation between pages on the same domain.  \n\nMy activate event is also pretty standard. I'm only using one cache for my service worker. This pattern checks the names of any caches to ensure they match the variable `CACHE_NAME`, if they don't, it will delete them. This gives me a manual means of invalidating my service worker cache.     \n\n```javascript\nself.addEventListener('activate', function(event) {\n  event.waitUntil(\n    caches.keys().then(function(cacheNames) {\n      return Promise.all(\n        cacheNames.filter(function(cacheName) {\n          return cacheName !== CACHE_NAME;\n        }).map(function(cacheName) {\n          console.log('Deleting '+ cacheName);\n          return caches.delete(cacheName);\n        })\n      );\n    })\n  );\n});\n```\n\nFinally, the **fetch** event is fired every time a page is requested. The fetch event is intercepted regardless of whether the user is offline or not. Like I said earlier service workers != offline content. Offline content is just one implementation of service workers. And this is really good news! Service workers have the ability speed up everyday web browsing, like, a lot.\n\nHere is my first example of a fetch event. It's really little more than custom error page, but it's a start.\n\n```javascript\nself.addEventListener('fetch', function(event) {\n  e.respondWith(\n    // If network fetch fails serve offline page form cache\n    fetch(event.request).catch(function(error) {\n      return caches.open(CACHE_NAME).then(function(cache) {\n        return cache.match('/offline.html');\n      });\n    })\n  );\n});\n```\n\n## A better service worker (down the rabbit hole)\n\nAt this point I was pretty happy with myself and if you want to implement offline content, aiming for the above is a great start. Brazened by my success I could see the potential. I needed to cache blog posts for offline reading, and where possible, I needed to return pages from the cache for connected users.\n\nIt took me a lot of testing and several mistakes to finally arrive at this pattern. You need to be really careful when serving cached pages by default. You could end up showing really old content, or even breaking your site.\n\n```javascript\nself.addEventListener('fetch', function(event) {\n\n  var requestURL = new URL(event.request.url);\n\n  event.respondWith(\n    caches.open(CACHE_NAME).then(function(cache) {\n      return cache.match(event.request).then(function(response) {\n\n        // If there is a cached response return this otherwise grab from network\n        return response || fetch(event.request).then(function(response) {\n\n          // Check if the network request is successful\n          // don't update the cache with error pages!!\n          // Also check the request domain matches service worker domain\n          if (response.ok && requestURL.origin == location.origin){\n            // All good? Update the cache with the network response\n            cache.put(event.request, response.clone());\n          }\n\n          return response;\n\n        }).catch(function() {\n\n          // We can't access the network, return an offline page from the cache\n          return caches.match('/offline.html');\n\n        });\n\n      });\n    });\n  );\n\n});\n\n```\n\nThis pattern always attempts to serve content from the cache first, but at the same time I start a network request. If the network request resolves successfully, and is not an error page, I update the cache. This means that when a user visits my website, they will see the last cached version, not necessarily the latest version. On a subsequent visit or a refresh, they will retrieve the updated page from the cache. If I make major changes, such as to CSS and I want to manually invalidate the service worker cache, I can change the `CACHE_NAME` in my service worker script.\n\n## A better offline page (deeper down the rabbit hole)\n\nThe generic offline page, from my first fetch example, is still served when the content is not cached and the network request fails. I wanted to do more with this. If we can't show the page they want, I thought it would be helpful to list pages the user has available in their cache. So I went down the rabbit hole again.\n\nThere is a method for communicating with service workers and web workers called the [channel messaging API](https://developer.mozilla.org/en-US/docs/Web/API/Channel_Messaging_API).\n\n**IMPORTANT UPDATE** \n\nI don't need to use the channel messaging API to get a URL from the cache in this example (Thanks to [Nicolas Hoizey](https://twitter.com/nhoizey) for brining that to my attention). The channel messaging API is useful when you want to respond to an event that only the service worker is aware of. In this case, since I am only grabbing a list of pages fron the cache I can access the `window.caches` object in the offline page. The only thing the service worker is aware of that my ofline page is not, is the `CACHE_NAME` variable. It contains the cache version and I didn't want to update it in multiple places each time it changed, but since it follows a predictable pattern I can do something like the following:\n\n```javascript\n// Get a list of cache keys\nwindow.caches.keys().then(function(cacheNames){\n  \n  // Find the key that matches my cacheName\n  cacheName = cacheNames.filter(function(cacheName) {\n    return cacheName.indexOf(\"::madebymike\") !== -1;\n  })[0]\n\n  // Open the cache for that key\n  caches.open(cacheName).then(function(cache) {\n\n    // The rest of this function is very similar to the Channel messaging API example\n    // where I fetch and return a list of URLs that are cached for offline reading\n\n  })\n}\n```\n\n## Channel messaging API\n\nThis is the old method I used to fetch cached pages from the service worker. Although it turned out I didn't need to message the service worker to do this, it's still a valuable technique for other purposes. \n\nIn the service worker, I listen for a `message` event. Once received, I get a list of pages from the cache that match the URL pattern for blog posts on my site and post a response back to the offline page.\n\n```javascript\nself.addEventListener('message', function(event) {\n  caches.open(CACHE_NAME).then(function(cache) {\n\n    return cache.keys().then(function(requests) {\n\n      var urls = requests.filter(function(request){\n        return request.url.indexOf(\"/writing/\") !== -1;\n      }).map(function(request) {\n        return request.url;\n      });\n      return urls.sort();\n\n    }).then(function(urls) {\n      event.ports[0].postMessage(urls);\n    });\n\n  });\n});\n```\n\nIn my offline page I send a message to the service worker and listen for a response. It's not very clever. At the moment it doesn't matter what message I post, I will always get the same response. But this is sufficient for now and I didn't want to complicate it more than necessary.  \n\n```javascript\nvar messageChannel = new MessageChannel();\nmessageChannel.port1.onmessage = function(event) {\n  // Add list of offline pages to body with JavaScript\n  // `event.data` contains an array of cached URLs\n};\nnavigator.serviceWorker.controller.postMessage(\"get-pages\", [messageChannel.port2]);  \n```\nMy worst case offline experience now looks something like this:\n\n<img src=\"/img/offline.png\" style=\"border: solid 1px #999\">\n\n## What next?\n\nI'd like to give users an indication of when they are reading something offline. I think this could be helpful, and in poor network conditions it might not always be obvious. This would probably would use the message API as well, but I might also investigate push notifications. I'll update this post if I ever get around to it.\n\nI hope explaining my experience implementing offline content can help make it easier for you or just inspire you to get started. I think the most difficult thing was understanding the impact of choices when serving cached content to all users. Making sure you get this right is important and it takes some time to understanding how service workers, and caching in general works. I'm not an expert at this so please, if I've got anything wrong, let me know so I can update it.",
        "type": "MarkdownRemark",
        "contentDigest": "2fabf72929762506c911a46ba6588e8b",
        "owner": "gatsby-transformer-remark"
      },
      "frontmatter": {
        "title": ""
      },
      "excerpt": "",
      "rawMarkdownBody": "Service workers can do a lot more than make web pages work offline but for most people, myself included, this will be their first experience with them. I recently implemented a simple offline page for my blog and was surprised with how easy it was. Full of confidence, I wanted to do more. I decided to start saving blog posts for offline reading and things escalated quickly. I soon learnt the rabbit hole is deep.\n\nThis is not a criticism of service workers, it's an indication of how powerful and versatile they are. I think in time, as the concepts become more familiar, and the complexities are abstracted away, offline content will become common place. In fact, I drank the kool-aid and can see why many people think that, within a few years, offline content will become as ubiquitous in web development as responsive design today.\n\nHaving said that, there are a few things I wish I had known before getting started.\n\n## Browser support & caching\n\nService workers are an easy candidate for progressive enhancement and on the surface, it's easy to check for support before registering a service worker. You do that like this:\n\n```javascript\nif ('serviceWorker' in navigator) {\n  // Yay, service workers work!\n  navigator.serviceWorker.register('/sw.js');\n}\n```\n\nIt seems simple enough but there is one gotcha. If you look at the [MDN page for the service worker cache API](https://developer.mozilla.org/en-US/docs/Web/API/Cache), you will see that different versions of Chrome support different caching methods. This means that, despite diligently checking for feature support, versions of Chrome between 40 and 45 will get an error when using the `addAll` method. This is less of a problem now than it was when these versions were more widely used. I checked [Can I Use](http://caniuse.com/usage-table) and at the time of writing this, it looks like it might impact around 1.15% of users.  \n\nI read several blogs and tutorials on getting started with service workers, some advocate using only `put` rather than `addAll`, others recommend using a [cache pollyfill](https://github.com/dominiccooney/cache-polyfill), while others still make no mention of it. Obviously these were all written at different times and it took me a lot of research to work out what the right approach was.\n\nIn the end, with such a small number of users, that is only getting smaller, I opted to check for the `addAll` method and treat browsers that don't support it, like those that don't support service workers at all.\n\nSo, my feature detection now becomes:\n\n```javascript\nif ( 'serviceWorker' in navigator && (typeof Cache !== 'undefined' && Cache.prototype.addAll) ) {\n  // Yay, this is a problem we didn't need to have!\n  navigator.serviceWorker.register('/sw.js');\n}\n```\n\nThis is a bit verbose, and I'm really going out of my way here just to avoid a console error, but I tested this in all major browsers, including critical versions that don't support the `addAll` method, and I'm happy with it. It was so much fun!\n\n## Where to put service workers\n\nWhen you register a service worker you point to a JavaScript file with the service worker logic, and this brings me to the second thing I wish I'd known. That is, if you want to implement service workers across your domain, you **must place the service worker in the root directory of your site**. For security reasons, service workers only control pages in the same directory as the service worker or below. Effectively this means, not in your site's JavaScript directory as I attempted at first. I'm sure this was written as clear as day, somewhere that was obvious to everyone but me.\n\nWhile on this topic, it's worth mentioning that service workers only work over HTTPS or localhost domains. Luckily for me my blog was already configured to redirect HTTP traffic to HTTPS. If you can do this, it's a great idea, if not, you could check you are on a secure domain before registering a service worker.\n\n## Can we service worker yet?\n\nYes, we are now ready to service worker! When getting started I recommend reading, Jake \"The Service Worker\" Archibald's [Offline Cookbook](https://jakearchibald.com/2014/offline-cookbook/). It's still a great place to start and the links and references contain a wealth of information.\n\nYou'll soon learn that, where offline content is concerned, there are 3 main events we listen for in a service worker:\n\n  - install,\n  - activate, and\n  - fetch.\n\nThe **install** event is fired only once when the service worker is first registered. Here we setup the cache prime it with essential resources. My install event is pretty simple, nothing special here. I cache the homepage, CSS and an offline page:\n\n```javascript\nvar CACHE_NAME = 'v1::madebymike';\nvar urlsToCache = [\n  '/',\n  '/offline.html',\n  '/css/styles.min.css'\n];\n\n// Install\nself.addEventListener('install', function(event) {\n  event.waitUntil(\n    caches.open(CACHE_NAME).then(function(cache) {\n      return cache.addAll(urlsToCache);\n    })\n  );\n});\n```\n\nThe **activate** event is fired after install and every time you navigate to the domain managed by the service worker. It's not fired for subsequent navigation between pages on the same domain.  \n\nMy activate event is also pretty standard. I'm only using one cache for my service worker. This pattern checks the names of any caches to ensure they match the variable `CACHE_NAME`, if they don't, it will delete them. This gives me a manual means of invalidating my service worker cache.     \n\n```javascript\nself.addEventListener('activate', function(event) {\n  event.waitUntil(\n    caches.keys().then(function(cacheNames) {\n      return Promise.all(\n        cacheNames.filter(function(cacheName) {\n          return cacheName !== CACHE_NAME;\n        }).map(function(cacheName) {\n          console.log('Deleting '+ cacheName);\n          return caches.delete(cacheName);\n        })\n      );\n    })\n  );\n});\n```\n\nFinally, the **fetch** event is fired every time a page is requested. The fetch event is intercepted regardless of whether the user is offline or not. Like I said earlier service workers != offline content. Offline content is just one implementation of service workers. And this is really good news! Service workers have the ability speed up everyday web browsing, like, a lot.\n\nHere is my first example of a fetch event. It's really little more than custom error page, but it's a start.\n\n```javascript\nself.addEventListener('fetch', function(event) {\n  e.respondWith(\n    // If network fetch fails serve offline page form cache\n    fetch(event.request).catch(function(error) {\n      return caches.open(CACHE_NAME).then(function(cache) {\n        return cache.match('/offline.html');\n      });\n    })\n  );\n});\n```\n\n## A better service worker (down the rabbit hole)\n\nAt this point I was pretty happy with myself and if you want to implement offline content, aiming for the above is a great start. Brazened by my success I could see the potential. I needed to cache blog posts for offline reading, and where possible, I needed to return pages from the cache for connected users.\n\nIt took me a lot of testing and several mistakes to finally arrive at this pattern. You need to be really careful when serving cached pages by default. You could end up showing really old content, or even breaking your site.\n\n```javascript\nself.addEventListener('fetch', function(event) {\n\n  var requestURL = new URL(event.request.url);\n\n  event.respondWith(\n    caches.open(CACHE_NAME).then(function(cache) {\n      return cache.match(event.request).then(function(response) {\n\n        // If there is a cached response return this otherwise grab from network\n        return response || fetch(event.request).then(function(response) {\n\n          // Check if the network request is successful\n          // don't update the cache with error pages!!\n          // Also check the request domain matches service worker domain\n          if (response.ok && requestURL.origin == location.origin){\n            // All good? Update the cache with the network response\n            cache.put(event.request, response.clone());\n          }\n\n          return response;\n\n        }).catch(function() {\n\n          // We can't access the network, return an offline page from the cache\n          return caches.match('/offline.html');\n\n        });\n\n      });\n    });\n  );\n\n});\n\n```\n\nThis pattern always attempts to serve content from the cache first, but at the same time I start a network request. If the network request resolves successfully, and is not an error page, I update the cache. This means that when a user visits my website, they will see the last cached version, not necessarily the latest version. On a subsequent visit or a refresh, they will retrieve the updated page from the cache. If I make major changes, such as to CSS and I want to manually invalidate the service worker cache, I can change the `CACHE_NAME` in my service worker script.\n\n## A better offline page (deeper down the rabbit hole)\n\nThe generic offline page, from my first fetch example, is still served when the content is not cached and the network request fails. I wanted to do more with this. If we can't show the page they want, I thought it would be helpful to list pages the user has available in their cache. So I went down the rabbit hole again.\n\nThere is a method for communicating with service workers and web workers called the [channel messaging API](https://developer.mozilla.org/en-US/docs/Web/API/Channel_Messaging_API).\n\n**IMPORTANT UPDATE** \n\nI don't need to use the channel messaging API to get a URL from the cache in this example (Thanks to [Nicolas Hoizey](https://twitter.com/nhoizey) for brining that to my attention). The channel messaging API is useful when you want to respond to an event that only the service worker is aware of. In this case, since I am only grabbing a list of pages fron the cache I can access the `window.caches` object in the offline page. The only thing the service worker is aware of that my ofline page is not, is the `CACHE_NAME` variable. It contains the cache version and I didn't want to update it in multiple places each time it changed, but since it follows a predictable pattern I can do something like the following:\n\n```javascript\n// Get a list of cache keys\nwindow.caches.keys().then(function(cacheNames){\n  \n  // Find the key that matches my cacheName\n  cacheName = cacheNames.filter(function(cacheName) {\n    return cacheName.indexOf(\"::madebymike\") !== -1;\n  })[0]\n\n  // Open the cache for that key\n  caches.open(cacheName).then(function(cache) {\n\n    // The rest of this function is very similar to the Channel messaging API example\n    // where I fetch and return a list of URLs that are cached for offline reading\n\n  })\n}\n```\n\n## Channel messaging API\n\nThis is the old method I used to fetch cached pages from the service worker. Although it turned out I didn't need to message the service worker to do this, it's still a valuable technique for other purposes. \n\nIn the service worker, I listen for a `message` event. Once received, I get a list of pages from the cache that match the URL pattern for blog posts on my site and post a response back to the offline page.\n\n```javascript\nself.addEventListener('message', function(event) {\n  caches.open(CACHE_NAME).then(function(cache) {\n\n    return cache.keys().then(function(requests) {\n\n      var urls = requests.filter(function(request){\n        return request.url.indexOf(\"/writing/\") !== -1;\n      }).map(function(request) {\n        return request.url;\n      });\n      return urls.sort();\n\n    }).then(function(urls) {\n      event.ports[0].postMessage(urls);\n    });\n\n  });\n});\n```\n\nIn my offline page I send a message to the service worker and listen for a response. It's not very clever. At the moment it doesn't matter what message I post, I will always get the same response. But this is sufficient for now and I didn't want to complicate it more than necessary.  \n\n```javascript\nvar messageChannel = new MessageChannel();\nmessageChannel.port1.onmessage = function(event) {\n  // Add list of offline pages to body with JavaScript\n  // `event.data` contains an array of cached URLs\n};\nnavigator.serviceWorker.controller.postMessage(\"get-pages\", [messageChannel.port2]);  \n```\nMy worst case offline experience now looks something like this:\n\n<img src=\"/img/offline.png\" style=\"border: solid 1px #999\">\n\n## What next?\n\nI'd like to give users an indication of when they are reading something offline. I think this could be helpful, and in poor network conditions it might not always be obvious. This would probably would use the message API as well, but I might also investigate push notifications. I'll update this post if I ever get around to it.\n\nI hope explaining my experience implementing offline content can help make it easier for you or just inspire you to get started. I think the most difficult thing was understanding the impact of choices when serving cached content to all users. Making sure you get this right is important and it takes some time to understanding how service workers, and caching in general works. I'm not an expert at this so please, if I've got anything wrong, let me know so I can update it."
    },
    "d9691426-ce96-5049-a9f4-f12125a1665e": {
      "id": "d9691426-ce96-5049-a9f4-f12125a1665e",
      "children": [],
      "parent": "5e46b326-64db-572b-a140-15a2fe4bfdf1",
      "internal": {
        "content": "I've updated my blog platform and am now using a workbox configuration with Gatsby. I'd still recommend the methods listed here for simple static sites or where you want greater control over service workers.",
        "type": "MarkdownRemark",
        "contentDigest": "3fd2a29043d1b1646b87d3de931e5e97",
        "owner": "gatsby-transformer-remark"
      },
      "frontmatter": {
        "title": ""
      },
      "excerpt": "",
      "rawMarkdownBody": "I've updated my blog platform and am now using a workbox configuration with Gatsby. I'd still recommend the methods listed here for simple static sites or where you want greater control over service workers."
    },
    "e1dba7d6-a4ec-5896-83e9-63041d471206": {
      "id": "e1dba7d6-a4ec-5896-83e9-63041d471206",
      "children": [],
      "parent": "08d59f81-40d2-5a28-a903-20f2237756f7",
      "internal": {
        "content": "I build innovative applications,  data visualisations and websites. I want to make amazing user experiences that focus on quality, performance and great design, with built-in accessibility. I write maintainable, future-proof code with the latest tools and techniques.",
        "type": "MarkdownRemark",
        "contentDigest": "d031b71cec77aeab9939164f9e5881c7",
        "owner": "gatsby-transformer-remark"
      },
      "frontmatter": {
        "title": ""
      },
      "excerpt": "",
      "rawMarkdownBody": "I build innovative applications,  data visualisations and websites. I want to make amazing user experiences that focus on quality, performance and great design, with built-in accessibility. I write maintainable, future-proof code with the latest tools and techniques."
    },
    "96aa0a75-7b72-5d6e-a493-3e8408c55856": {
      "id": "96aa0a75-7b72-5d6e-a493-3e8408c55856",
      "children": [],
      "parent": "f38021cd-33c9-50fb-97f3-d4abbb271e15",
      "internal": {
        "content": "I'm a skilled engineer. I'm comfortable with tools such as React, Node, ES6, Webpack etc. but I don't like listing tools and libraries. I am comfortable learning new languages, libraries and tools when required. I have done this before and I will no doubt have to do it again.\n\nI'm a creative, innovative and dedicated developer. I have a deep understanding front-end technologies such as CSS and SVG, but also of the web as a platform. I know how browsers work. I read specifications and so many blog posts. There is a good chance I know how to solve specific problems or where to find the answer.\n\nI am an effective team builder. I've led teams. I've worked remotely and I'm a mentor in my community. I've worked for myself, in small agencies and in large corporate environments. I know the many shapes teams can take and how to be effective in each case. I value diversity that's why I help organise a program called [CodeBar in Sydney](https://codebar.io/sydney) to support underrepresented groups in tech. I don't just build teams I build community. I can do this for you too.\n\nI'm adaptable. I've worked on some of Australia's largest websites as well as the smallest community sites. I've built websites, applications and data visualisations on numerous platforms. \n\nI have spoken at dozens of conferences and community-level events around Australia, Europe, UK, and the US. I have written numerous technical articles some of which are here on my personal blog, as well as on websites like Smashing Magazine and Codrops. \n\n\n## What can I help with?\n* Ready to make use of CSS Grid or Custom Properties and not sure where to start?\n* Want to write better responsive design patterns?\n* Need help implementing a design system or building a UI library?\n* Have an innovative application, visualisation or product idea?\n* Have a team that needs help or training with any of the above?  \n* Working on something larger? Let's put together a world class team.\n\nGot something else you think I would be good at or interested in that doesn’t fit with the above? That’s great! <a href=\"mailto:mike@madebymike.com.au\">Get in touch</a>. Let’s do something amazing together. Let’s win the internet!",
        "type": "MarkdownRemark",
        "contentDigest": "35afab82dce33965c305d8ff8f5cb0cd",
        "owner": "gatsby-transformer-remark"
      },
      "frontmatter": {
        "title": ""
      },
      "excerpt": "",
      "rawMarkdownBody": "I'm a skilled engineer. I'm comfortable with tools such as React, Node, ES6, Webpack etc. but I don't like listing tools and libraries. I am comfortable learning new languages, libraries and tools when required. I have done this before and I will no doubt have to do it again.\n\nI'm a creative, innovative and dedicated developer. I have a deep understanding front-end technologies such as CSS and SVG, but also of the web as a platform. I know how browsers work. I read specifications and so many blog posts. There is a good chance I know how to solve specific problems or where to find the answer.\n\nI am an effective team builder. I've led teams. I've worked remotely and I'm a mentor in my community. I've worked for myself, in small agencies and in large corporate environments. I know the many shapes teams can take and how to be effective in each case. I value diversity that's why I help organise a program called [CodeBar in Sydney](https://codebar.io/sydney) to support underrepresented groups in tech. I don't just build teams I build community. I can do this for you too.\n\nI'm adaptable. I've worked on some of Australia's largest websites as well as the smallest community sites. I've built websites, applications and data visualisations on numerous platforms. \n\nI have spoken at dozens of conferences and community-level events around Australia, Europe, UK, and the US. I have written numerous technical articles some of which are here on my personal blog, as well as on websites like Smashing Magazine and Codrops. \n\n\n## What can I help with?\n* Ready to make use of CSS Grid or Custom Properties and not sure where to start?\n* Want to write better responsive design patterns?\n* Need help implementing a design system or building a UI library?\n* Have an innovative application, visualisation or product idea?\n* Have a team that needs help or training with any of the above?  \n* Working on something larger? Let's put together a world class team.\n\nGot something else you think I would be good at or interested in that doesn’t fit with the above? That’s great! <a href=\"mailto:mike@madebymike.com.au\">Get in touch</a>. Let’s do something amazing together. Let’s win the internet!"
    },
    "fbd2a532-272b-5830-85c2-5c8b140ba892": {
      "id": "fbd2a532-272b-5830-85c2-5c8b140ba892",
      "children": [],
      "parent": "be6af314-ebc7-5fef-92b1-7c3b6e86fe98",
      "internal": {
        "content": "<figure class=\"nice-pic\">\n  <img src=\"https://images.ctfassets.net/2cb7djx9f8kv/4QWrnDKzZK6eugwYS4ScSM/2d97538e8b969ebdbf0362ee9874a1c5/mike.jpg\" />\n</figure>\nGet in touch:\n<a href=\"mailto:mike@madebymike.com.au\">mike@madebymike.com.au</a>\n",
        "type": "MarkdownRemark",
        "contentDigest": "e65aee6ac14df203c04569d4dd4f8a5a",
        "owner": "gatsby-transformer-remark"
      },
      "frontmatter": {
        "title": ""
      },
      "excerpt": "",
      "rawMarkdownBody": "<figure class=\"nice-pic\">\n  <img src=\"https://images.ctfassets.net/2cb7djx9f8kv/4QWrnDKzZK6eugwYS4ScSM/2d97538e8b969ebdbf0362ee9874a1c5/mike.jpg\" />\n</figure>\nGet in touch:\n<a href=\"mailto:mike@madebymike.com.au\">mike@madebymike.com.au</a>\n"
    },
    "b1f09196-55a0-5b6c-83e7-555ec6006b12": {
      "id": "b1f09196-55a0-5b6c-83e7-555ec6006b12",
      "children": [],
      "parent": "995d7aad-5031-54b4-b808-245353aa9e5c",
      "internal": {
        "content": "A talk I gave at Smashing Conference in Freiburg 2017 about the changing role of media queries and alternative techniques for responsive design.",
        "type": "MarkdownRemark",
        "contentDigest": "f29d0b05ecf1bb58caccdcb20ed0a6ff",
        "owner": "gatsby-transformer-remark"
      },
      "frontmatter": {
        "title": ""
      },
      "excerpt": "",
      "rawMarkdownBody": "A talk I gave at Smashing Conference in Freiburg 2017 about the changing role of media queries and alternative techniques for responsive design."
    },
    "7ff93b7c-fa19-5835-9f80-fba76a467f5f": {
      "id": "7ff93b7c-fa19-5835-9f80-fba76a467f5f",
      "children": [],
      "parent": "23cdebc3-6994-58dc-aa58-16513593783e",
      "internal": {
        "content": "A talk I gave at Smashing Conference in San Francisco 2018 about the changing role of media queries and alternative techniques for responsive design.",
        "type": "MarkdownRemark",
        "contentDigest": "7bc1b4f40e6a45ab293b1c61556f5d63",
        "owner": "gatsby-transformer-remark"
      },
      "frontmatter": {
        "title": ""
      },
      "excerpt": "",
      "rawMarkdownBody": "A talk I gave at Smashing Conference in San Francisco 2018 about the changing role of media queries and alternative techniques for responsive design."
    },
    "bd35813f-364f-5b26-af20-22409663f27c": {
      "id": "bd35813f-364f-5b26-af20-22409663f27c",
      "children": [],
      "parent": "0c2e2d87-a2ce-569d-b44f-18dce18657c8",
      "internal": {
        "content": "* [CSS Grid Gotchas And Stumbling\n  Blocks](https://www.smashingmagazine.com/2017/09/css-grid-gotchas-stumbling-blocks/)\n\n  * [The Difference Between Explicit and Implicit\n  Grids](https://css-tricks.com/difference-explicit-implicit-grids/)\n\n  * [Breaking the Grid](http://daverupert.com/2017/09/breaking-the-grid/)\n\n  * [Naming Things In CSS Grid\n  Layout](https://www.smashingmagazine.com/2017/10/naming-things-css-grid-layout/)\n\n  * [Introduction to CSS Grid\n  Layout](https://mozilladevelopers.github.io/playground/css-grid/)\n\n  * [Grid Garden](http://cssgridgarden.com/)\n\n  * [Auto-Sizing Columns in CSS Grid: auto-fill vs auto-fit](https://css-tricks.com/auto-sizing-columns-css-grid-auto-fill-vs-auto-fit/)\n\n  * [Debugging CSS Grid Layouts With Firefox Grid Inspector](https://www.smashingmagazine.com/2017/12/grid-inspector/)\n\n  * [Using CSS Grid: Supporting Browsers Without Grid](https://www.smashingmagazine.com/2017/11/css-grid-supporting-browsers-without-grid/)\n\n  * [Faux Grid Tracks](http://alistapart.com/article/faux-grid-tracks)",
        "type": "MarkdownRemark",
        "contentDigest": "c307ea08463dc3e531b35327c017998a",
        "owner": "gatsby-transformer-remark"
      },
      "frontmatter": {
        "title": ""
      },
      "excerpt": "",
      "rawMarkdownBody": "* [CSS Grid Gotchas And Stumbling\n  Blocks](https://www.smashingmagazine.com/2017/09/css-grid-gotchas-stumbling-blocks/)\n\n  * [The Difference Between Explicit and Implicit\n  Grids](https://css-tricks.com/difference-explicit-implicit-grids/)\n\n  * [Breaking the Grid](http://daverupert.com/2017/09/breaking-the-grid/)\n\n  * [Naming Things In CSS Grid\n  Layout](https://www.smashingmagazine.com/2017/10/naming-things-css-grid-layout/)\n\n  * [Introduction to CSS Grid\n  Layout](https://mozilladevelopers.github.io/playground/css-grid/)\n\n  * [Grid Garden](http://cssgridgarden.com/)\n\n  * [Auto-Sizing Columns in CSS Grid: auto-fill vs auto-fit](https://css-tricks.com/auto-sizing-columns-css-grid-auto-fill-vs-auto-fit/)\n\n  * [Debugging CSS Grid Layouts With Firefox Grid Inspector](https://www.smashingmagazine.com/2017/12/grid-inspector/)\n\n  * [Using CSS Grid: Supporting Browsers Without Grid](https://www.smashingmagazine.com/2017/11/css-grid-supporting-browsers-without-grid/)\n\n  * [Faux Grid Tracks](http://alistapart.com/article/faux-grid-tracks)"
    },
    "6bb9ecd1-8610-5bf9-a2ad-1b83da6d4729": {
      "id": "6bb9ecd1-8610-5bf9-a2ad-1b83da6d4729",
      "children": [],
      "parent": "0b9cc435-f213-5f02-a13b-ada210048d1e",
      "internal": {
        "content": "* [Using CSS variables correctly](https://madebymike.com.au/writing/using-css-variables/)\n* [Unlocking the Benefits of CSS Variables](https://jonathan-harrell.com/unlocking-benefits-css-variables/)\n* [The CSS attr() function got nothin’ on custom properties](https://css-tricks.com/css-attr-function-got-nothin-custom-properties/)\n* [It's Time To Start Using CSS Custom Properties](https://www.smashingmagazine.com/2017/04/start-using-css-custom-properties/)\n* [Locally Scoped CSS Variables: What, How, and Why](https://una.im/local-css-vars/)\n* [Bridging CSS and JS with Custom Properties](https://sgom.es/posts/2017-02-10-bridging-css-and-js-with-custom-properties/)\n* [Control CSS loading with custom properties](https://jakearchibald.com/2016/css-loading-with-custom-props/)\n* [CSS Custom Properties and Theming](https://css-tricks.com/css-custom-properties-theming/)",
        "type": "MarkdownRemark",
        "contentDigest": "18b3d22db19cbd01f98cc1af737910a8",
        "owner": "gatsby-transformer-remark"
      },
      "frontmatter": {
        "title": ""
      },
      "excerpt": "",
      "rawMarkdownBody": "* [Using CSS variables correctly](https://madebymike.com.au/writing/using-css-variables/)\n* [Unlocking the Benefits of CSS Variables](https://jonathan-harrell.com/unlocking-benefits-css-variables/)\n* [The CSS attr() function got nothin’ on custom properties](https://css-tricks.com/css-attr-function-got-nothin-custom-properties/)\n* [It's Time To Start Using CSS Custom Properties](https://www.smashingmagazine.com/2017/04/start-using-css-custom-properties/)\n* [Locally Scoped CSS Variables: What, How, and Why](https://una.im/local-css-vars/)\n* [Bridging CSS and JS with Custom Properties](https://sgom.es/posts/2017-02-10-bridging-css-and-js-with-custom-properties/)\n* [Control CSS loading with custom properties](https://jakearchibald.com/2016/css-loading-with-custom-props/)\n* [CSS Custom Properties and Theming](https://css-tricks.com/css-custom-properties-theming/)"
    },
    "6186dd06-7b1c-5395-b68b-77ec11f5fd04": {
      "id": "6186dd06-7b1c-5395-b68b-77ec11f5fd04",
      "children": [],
      "parent": "ae744db3-b0fd-5eb0-ab23-5a68e523c210",
      "internal": {
        "content": "\n- [An Abridged Cartoon Introduction To WebAssembly](https://www.smashingmagazine.com/2017/05/abridged-cartoon-introduction-webassembly/)\n- [World Wide Web, Not Wealthy Western Web](https://www.smashingmagazine.com/2017/03/world-wide-web-not-wealthy-western-web-part-1/)\n- [AMPersand](https://ethanmarcotte.com/wrote/ampersand/)\n- [Migrating from Jekyll+Github Pages to Hugo+Netlify](https://www.sarasoueidan.com/blog/jekyll-ghpages-to-hugo-netlify/)\n- [Designing Tables to be Read, Not Looked At](http://alistapart.com/article/web-typography-tables)\n- [Yes, That Web Project Should Be a PWA](http://alistapart.com/article/yes-that-web-project-should-be-a-pwa)\n- [The Critical Request](https://medium.com/@benschwarz/the-critical-request-90bb47da5769)\n- [Most Hearted Pens of 2017](https://codepen.io/2017/popular/pens/#)\n- [A Unified Styling Language](https://medium.com/seek-blog/a-unified-styling-language-d0c208de2660)\n- [Building a Visual Language](https://airbnb.design/building-a-visual-language/)",
        "type": "MarkdownRemark",
        "contentDigest": "083f09b2577a3fc307d4c077aa273614",
        "owner": "gatsby-transformer-remark"
      },
      "frontmatter": {
        "title": ""
      },
      "excerpt": "",
      "rawMarkdownBody": "\n- [An Abridged Cartoon Introduction To WebAssembly](https://www.smashingmagazine.com/2017/05/abridged-cartoon-introduction-webassembly/)\n- [World Wide Web, Not Wealthy Western Web](https://www.smashingmagazine.com/2017/03/world-wide-web-not-wealthy-western-web-part-1/)\n- [AMPersand](https://ethanmarcotte.com/wrote/ampersand/)\n- [Migrating from Jekyll+Github Pages to Hugo+Netlify](https://www.sarasoueidan.com/blog/jekyll-ghpages-to-hugo-netlify/)\n- [Designing Tables to be Read, Not Looked At](http://alistapart.com/article/web-typography-tables)\n- [Yes, That Web Project Should Be a PWA](http://alistapart.com/article/yes-that-web-project-should-be-a-pwa)\n- [The Critical Request](https://medium.com/@benschwarz/the-critical-request-90bb47da5769)\n- [Most Hearted Pens of 2017](https://codepen.io/2017/popular/pens/#)\n- [A Unified Styling Language](https://medium.com/seek-blog/a-unified-styling-language-d0c208de2660)\n- [Building a Visual Language](https://airbnb.design/building-a-visual-language/)"
    },
    "96591036-1a23-5f3e-bdc3-0da7e77a7614": {
      "id": "96591036-1a23-5f3e-bdc3-0da7e77a7614",
      "children": [],
      "parent": "4b43b077-20e6-5f99-8f1b-9a3a310423e5",
      "internal": {
        "content": "In March 2018 I spoke about CSS custom properties at .concat(), a fantastic community run conference in Austria.",
        "type": "MarkdownRemark",
        "contentDigest": "84ad8d002bc88eaf28fe6e91b0283ac4",
        "owner": "gatsby-transformer-remark"
      },
      "frontmatter": {
        "title": ""
      },
      "excerpt": "",
      "rawMarkdownBody": "In March 2018 I spoke about CSS custom properties at .concat(), a fantastic community run conference in Austria."
    },
    "66fd2765-0ca6-59b8-926a-a9afe47fb853": {
      "id": "66fd2765-0ca6-59b8-926a-a9afe47fb853",
      "children": [],
      "parent": "3805ff28-5c9a-5d5d-8df7-74bc59fff16f",
      "internal": {
        "content": "A collection of examples using custom properties for theming and responsive design.",
        "type": "MarkdownRemark",
        "contentDigest": "969408407c0ac799ef82dcb6db06fd07",
        "owner": "gatsby-transformer-remark"
      },
      "frontmatter": {
        "title": ""
      },
      "excerpt": "",
      "rawMarkdownBody": "A collection of examples using custom properties for theming and responsive design."
    },
    "95f25e61-ae2c-58c8-b40a-e4b78f53f834": {
      "id": "95f25e61-ae2c-58c8-b40a-e4b78f53f834",
      "children": [],
      "parent": "cdec7352-a10c-5151-87e6-7ed1944951cd",
      "internal": {
        "content": "A collection of examples for using fluid responsive typography on the web.",
        "type": "MarkdownRemark",
        "contentDigest": "ee96d6c75e23c4a58c8728cbd8d3981f",
        "owner": "gatsby-transformer-remark"
      },
      "frontmatter": {
        "title": ""
      },
      "excerpt": "",
      "rawMarkdownBody": "A collection of examples for using fluid responsive typography on the web."
    },
    "ad791795-fd76-5ebb-92aa-c9740498ebf9": {
      "id": "ad791795-fd76-5ebb-92aa-c9740498ebf9",
      "children": [],
      "parent": "5d1e67dd-cd7a-529d-84e9-09e2444c2a49",
      "internal": {
        "content": "Custom properties provide opportunities for new creative ideas, but also the potential to add complexity to CSS. To get the most out of them, we might need a strategy for how we write and structure CSS with custom properties.",
        "type": "MarkdownRemark",
        "contentDigest": "f95717e12db2e54eed06b40cbb4f3586",
        "owner": "gatsby-transformer-remark"
      },
      "frontmatter": {
        "title": ""
      },
      "excerpt": "",
      "rawMarkdownBody": "Custom properties provide opportunities for new creative ideas, but also the potential to add complexity to CSS. To get the most out of them, we might need a strategy for how we write and structure CSS with custom properties."
    },
    "SitePage /offline-plugin-app-shell-fallback/": {
      "jsonName": "offline-plugin-app-shell-fallback-a30",
      "internalComponentName": "ComponentOfflinePluginAppShellFallback",
      "path": "/offline-plugin-app-shell-fallback/",
      "component": "/c/Users/mike/Development/madebymike/madebymike.github.io/node_modules/gatsby-plugin-offline/app-shell.js",
      "componentChunkName": "component---node-modules-gatsby-plugin-offline-app-shell-js",
      "context": {},
      "pluginCreator___NODE": "532fe8a8-ccb9-5f0a-bdf0-d6e7af8e1fde",
      "pluginCreatorId": "532fe8a8-ccb9-5f0a-bdf0-d6e7af8e1fde",
      "componentPath": "/c/Users/mike/Development/madebymike/madebymike.github.io/node_modules/gatsby-plugin-offline/app-shell.js",
      "id": "SitePage /offline-plugin-app-shell-fallback/",
      "parent": null,
      "children": [],
      "internal": {
        "type": "SitePage",
        "contentDigest": "c00154c312b3f86776769b0b786fd2d3",
        "description": "532fe8a8-ccb9-5f0a-bdf0-d6e7af8e1fde",
        "owner": "internal-data-bridge"
      }
    },
    "SitePage /writing/getting-the-heck-out-of-react/": {
      "jsonName": "writing-getting-the-heck-out-of-react-0f2",
      "internalComponentName": "ComponentWritingGettingTheHeckOutOfReact",
      "path": "/writing/getting-the-heck-out-of-react/",
      "component": "/c/Users/mike/Development/madebymike/madebymike.github.io/src/templates/writing.js",
      "componentChunkName": "component---src-templates-writing-js",
      "context": {
        "slug": "getting-the-heck-out-of-react"
      },
      "pluginCreator___NODE": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
      "pluginCreatorId": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
      "componentPath": "/c/Users/mike/Development/madebymike/madebymike.github.io/src/templates/writing.js",
      "id": "SitePage /writing/getting-the-heck-out-of-react/",
      "parent": null,
      "children": [],
      "internal": {
        "type": "SitePage",
        "contentDigest": "c20a126c0e47c8dad5c2bf57bd366dda",
        "description": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
        "owner": "internal-data-bridge"
      }
    },
    "SitePage /writing/this-in-javascript/": {
      "jsonName": "writing-this-in-javascript-54b",
      "internalComponentName": "ComponentWritingThisInJavascript",
      "path": "/writing/this-in-javascript/",
      "component": "/c/Users/mike/Development/madebymike/madebymike.github.io/src/templates/writing.js",
      "componentChunkName": "component---src-templates-writing-js",
      "context": {
        "slug": "this-in-javascript"
      },
      "pluginCreator___NODE": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
      "pluginCreatorId": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
      "componentPath": "/c/Users/mike/Development/madebymike/madebymike.github.io/src/templates/writing.js",
      "id": "SitePage /writing/this-in-javascript/",
      "parent": null,
      "children": [],
      "internal": {
        "type": "SitePage",
        "contentDigest": "f244d50e45bac69f6183145dd80c8b46",
        "description": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
        "owner": "internal-data-bridge"
      }
    },
    "SitePage /writing/currentcolor-and-custom-properties/": {
      "jsonName": "writing-currentcolor-and-custom-properties-1d0",
      "internalComponentName": "ComponentWritingCurrentcolorAndCustomProperties",
      "path": "/writing/currentcolor-and-custom-properties/",
      "component": "/c/Users/mike/Development/madebymike/madebymike.github.io/src/templates/writing.js",
      "componentChunkName": "component---src-templates-writing-js",
      "context": {
        "slug": "currentcolor-and-custom-properties"
      },
      "pluginCreator___NODE": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
      "pluginCreatorId": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
      "componentPath": "/c/Users/mike/Development/madebymike/madebymike.github.io/src/templates/writing.js",
      "id": "SitePage /writing/currentcolor-and-custom-properties/",
      "parent": null,
      "children": [],
      "internal": {
        "type": "SitePage",
        "contentDigest": "ae507fe03a29a0fc562eefb85e687111",
        "description": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
        "owner": "internal-data-bridge"
      }
    },
    "SitePage /writing/new-website-new-css-tricks/": {
      "jsonName": "writing-new-website-new-css-tricks-7ef",
      "internalComponentName": "ComponentWritingNewWebsiteNewCssTricks",
      "path": "/writing/new-website-new-css-tricks/",
      "component": "/c/Users/mike/Development/madebymike/madebymike.github.io/src/templates/writing.js",
      "componentChunkName": "component---src-templates-writing-js",
      "context": {
        "slug": "new-website-new-css-tricks"
      },
      "pluginCreator___NODE": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
      "pluginCreatorId": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
      "componentPath": "/c/Users/mike/Development/madebymike/madebymike.github.io/src/templates/writing.js",
      "id": "SitePage /writing/new-website-new-css-tricks/",
      "parent": null,
      "children": [],
      "internal": {
        "type": "SitePage",
        "contentDigest": "e988b193cc09ae43274d39bc2007f851",
        "description": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
        "owner": "internal-data-bridge"
      }
    },
    "SitePage /writing/using-css-variables/": {
      "jsonName": "writing-using-css-variables-aec",
      "internalComponentName": "ComponentWritingUsingCssVariables",
      "path": "/writing/using-css-variables/",
      "component": "/c/Users/mike/Development/madebymike/madebymike.github.io/src/templates/writing.js",
      "componentChunkName": "component---src-templates-writing-js",
      "context": {
        "slug": "using-css-variables"
      },
      "pluginCreator___NODE": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
      "pluginCreatorId": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
      "componentPath": "/c/Users/mike/Development/madebymike/madebymike.github.io/src/templates/writing.js",
      "id": "SitePage /writing/using-css-variables/",
      "parent": null,
      "children": [],
      "internal": {
        "type": "SitePage",
        "contentDigest": "14283096822bc3fc453c41833b63fd27",
        "description": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
        "owner": "internal-data-bridge"
      }
    },
    "SitePage /writing/non-linear-interpolation-in-css/": {
      "jsonName": "writing-non-linear-interpolation-in-css-d25",
      "internalComponentName": "ComponentWritingNonLinearInterpolationInCss",
      "path": "/writing/non-linear-interpolation-in-css/",
      "component": "/c/Users/mike/Development/madebymike/madebymike.github.io/src/templates/writing.js",
      "componentChunkName": "component---src-templates-writing-js",
      "context": {
        "slug": "non-linear-interpolation-in-css"
      },
      "pluginCreator___NODE": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
      "pluginCreatorId": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
      "componentPath": "/c/Users/mike/Development/madebymike/madebymike.github.io/src/templates/writing.js",
      "id": "SitePage /writing/non-linear-interpolation-in-css/",
      "parent": null,
      "children": [],
      "internal": {
        "type": "SitePage",
        "contentDigest": "b932b134058e5e5ffb948ba5c39762cd",
        "description": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
        "owner": "internal-data-bridge"
      }
    },
    "SitePage /writing/the-invisible-parts-of-css/": {
      "jsonName": "writing-the-invisible-parts-of-css-b5d",
      "internalComponentName": "ComponentWritingTheInvisiblePartsOfCss",
      "path": "/writing/the-invisible-parts-of-css/",
      "component": "/c/Users/mike/Development/madebymike/madebymike.github.io/src/templates/writing.js",
      "componentChunkName": "component---src-templates-writing-js",
      "context": {
        "slug": "the-invisible-parts-of-css"
      },
      "pluginCreator___NODE": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
      "pluginCreatorId": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
      "componentPath": "/c/Users/mike/Development/madebymike/madebymike.github.io/src/templates/writing.js",
      "id": "SitePage /writing/the-invisible-parts-of-css/",
      "parent": null,
      "children": [],
      "internal": {
        "type": "SitePage",
        "contentDigest": "9bac9eb97e0c815a9bc63149859d2f01",
        "description": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
        "owner": "internal-data-bridge"
      }
    },
    "SitePage /writing/interpolation-without-animation/": {
      "jsonName": "writing-interpolation-without-animation-3ae",
      "internalComponentName": "ComponentWritingInterpolationWithoutAnimation",
      "path": "/writing/interpolation-without-animation/",
      "component": "/c/Users/mike/Development/madebymike/madebymike.github.io/src/templates/writing.js",
      "componentChunkName": "component---src-templates-writing-js",
      "context": {
        "slug": "interpolation-without-animation"
      },
      "pluginCreator___NODE": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
      "pluginCreatorId": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
      "componentPath": "/c/Users/mike/Development/madebymike/madebymike.github.io/src/templates/writing.js",
      "id": "SitePage /writing/interpolation-without-animation/",
      "parent": null,
      "children": [],
      "internal": {
        "type": "SitePage",
        "contentDigest": "40709cac9d019b17e6d3b6de19c60a3d",
        "description": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
        "owner": "internal-data-bridge"
      }
    },
    "SitePage /writing/maths-and-code/": {
      "jsonName": "writing-maths-and-code-df9",
      "internalComponentName": "ComponentWritingMathsAndCode",
      "path": "/writing/maths-and-code/",
      "component": "/c/Users/mike/Development/madebymike/madebymike.github.io/src/templates/writing.js",
      "componentChunkName": "component---src-templates-writing-js",
      "context": {
        "slug": "maths-and-code"
      },
      "pluginCreator___NODE": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
      "pluginCreatorId": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
      "componentPath": "/c/Users/mike/Development/madebymike/madebymike.github.io/src/templates/writing.js",
      "id": "SitePage /writing/maths-and-code/",
      "parent": null,
      "children": [],
      "internal": {
        "type": "SitePage",
        "contentDigest": "8c9b2759e15a14f0f42a80c0ad17d017",
        "description": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
        "owner": "internal-data-bridge"
      }
    },
    "SitePage /writing/svg-has-more-potential/": {
      "jsonName": "writing-svg-has-more-potential-4fb",
      "internalComponentName": "ComponentWritingSvgHasMorePotential",
      "path": "/writing/svg-has-more-potential/",
      "component": "/c/Users/mike/Development/madebymike/madebymike.github.io/src/templates/writing.js",
      "componentChunkName": "component---src-templates-writing-js",
      "context": {
        "slug": "svg-has-more-potential"
      },
      "pluginCreator___NODE": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
      "pluginCreatorId": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
      "componentPath": "/c/Users/mike/Development/madebymike/madebymike.github.io/src/templates/writing.js",
      "id": "SitePage /writing/svg-has-more-potential/",
      "parent": null,
      "children": [],
      "internal": {
        "type": "SitePage",
        "contentDigest": "1e00fb6f304f94285e2487373170ffbf",
        "description": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
        "owner": "internal-data-bridge"
      }
    },
    "SitePage /writing/service-workers/": {
      "jsonName": "writing-service-workers-75a",
      "internalComponentName": "ComponentWritingServiceWorkers",
      "path": "/writing/service-workers/",
      "component": "/c/Users/mike/Development/madebymike/madebymike.github.io/src/templates/writing.js",
      "componentChunkName": "component---src-templates-writing-js",
      "context": {
        "slug": "service-workers"
      },
      "pluginCreator___NODE": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
      "pluginCreatorId": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
      "componentPath": "/c/Users/mike/Development/madebymike/madebymike.github.io/src/templates/writing.js",
      "id": "SitePage /writing/service-workers/",
      "parent": null,
      "children": [],
      "internal": {
        "type": "SitePage",
        "contentDigest": "34320b2bf43aacb3d819a2ca94d65924",
        "description": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
        "owner": "internal-data-bridge"
      }
    },
    "SitePage /writing/canvas-image-manipulation/": {
      "jsonName": "writing-canvas-image-manipulation-430",
      "internalComponentName": "ComponentWritingCanvasImageManipulation",
      "path": "/writing/canvas-image-manipulation/",
      "component": "/c/Users/mike/Development/madebymike/madebymike.github.io/src/templates/writing.js",
      "componentChunkName": "component---src-templates-writing-js",
      "context": {
        "slug": "canvas-image-manipulation"
      },
      "pluginCreator___NODE": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
      "pluginCreatorId": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
      "componentPath": "/c/Users/mike/Development/madebymike/madebymike.github.io/src/templates/writing.js",
      "id": "SitePage /writing/canvas-image-manipulation/",
      "parent": null,
      "children": [],
      "internal": {
        "type": "SitePage",
        "contentDigest": "079bf71a6da7ba1ba91dd9abe49022a5",
        "description": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
        "owner": "internal-data-bridge"
      }
    },
    "SitePage /writing/style-guides-50-shades-of-corporate-blue/": {
      "jsonName": "writing-style-guides-50-shades-of-corporate-blue-3d3",
      "internalComponentName": "ComponentWritingStyleGuides50ShadesOfCorporateBlue",
      "path": "/writing/style-guides-50-shades-of-corporate-blue/",
      "component": "/c/Users/mike/Development/madebymike/madebymike.github.io/src/templates/writing.js",
      "componentChunkName": "component---src-templates-writing-js",
      "context": {
        "slug": "style-guides-50-shades-of-corporate-blue"
      },
      "pluginCreator___NODE": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
      "pluginCreatorId": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
      "componentPath": "/c/Users/mike/Development/madebymike/madebymike.github.io/src/templates/writing.js",
      "id": "SitePage /writing/style-guides-50-shades-of-corporate-blue/",
      "parent": null,
      "children": [],
      "internal": {
        "type": "SitePage",
        "contentDigest": "491c1aa60a7b67fbcc224438a9866d80",
        "description": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
        "owner": "internal-data-bridge"
      }
    },
    "SitePage /writing/love-letter-to-jquery/": {
      "jsonName": "writing-love-letter-to-jquery-bab",
      "internalComponentName": "ComponentWritingLoveLetterToJquery",
      "path": "/writing/love-letter-to-jquery/",
      "component": "/c/Users/mike/Development/madebymike/madebymike.github.io/src/templates/writing.js",
      "componentChunkName": "component---src-templates-writing-js",
      "context": {
        "slug": "love-letter-to-jquery"
      },
      "pluginCreator___NODE": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
      "pluginCreatorId": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
      "componentPath": "/c/Users/mike/Development/madebymike/madebymike.github.io/src/templates/writing.js",
      "id": "SitePage /writing/love-letter-to-jquery/",
      "parent": null,
      "children": [],
      "internal": {
        "type": "SitePage",
        "contentDigest": "104bdfb03ba8a6c1fcf1427dd5e09384",
        "description": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
        "owner": "internal-data-bridge"
      }
    },
    "SitePage /writing/pattern-robust-icons/": {
      "jsonName": "writing-pattern-robust-icons-a82",
      "internalComponentName": "ComponentWritingPatternRobustIcons",
      "path": "/writing/pattern-robust-icons/",
      "component": "/c/Users/mike/Development/madebymike/madebymike.github.io/src/templates/writing.js",
      "componentChunkName": "component---src-templates-writing-js",
      "context": {
        "slug": "pattern-robust-icons"
      },
      "pluginCreator___NODE": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
      "pluginCreatorId": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
      "componentPath": "/c/Users/mike/Development/madebymike/madebymike.github.io/src/templates/writing.js",
      "id": "SitePage /writing/pattern-robust-icons/",
      "parent": null,
      "children": [],
      "internal": {
        "type": "SitePage",
        "contentDigest": "40479c224a5452b63d8ac58ed16a1d9e",
        "description": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
        "owner": "internal-data-bridge"
      }
    },
    "SitePage /writing/fluid-type-calc-examples/": {
      "jsonName": "writing-fluid-type-calc-examples-b25",
      "internalComponentName": "ComponentWritingFluidTypeCalcExamples",
      "path": "/writing/fluid-type-calc-examples/",
      "component": "/c/Users/mike/Development/madebymike/madebymike.github.io/src/templates/writing.js",
      "componentChunkName": "component---src-templates-writing-js",
      "context": {
        "slug": "fluid-type-calc-examples"
      },
      "pluginCreator___NODE": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
      "pluginCreatorId": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
      "componentPath": "/c/Users/mike/Development/madebymike/madebymike.github.io/src/templates/writing.js",
      "id": "SitePage /writing/fluid-type-calc-examples/",
      "parent": null,
      "children": [],
      "internal": {
        "type": "SitePage",
        "contentDigest": "6b4ea5741ce8c55226bd95b5c7a3afc8",
        "description": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
        "owner": "internal-data-bridge"
      }
    },
    "SitePage /writing/how-do-i-css/": {
      "jsonName": "writing-how-do-i-css-7f2",
      "internalComponentName": "ComponentWritingHowDoICss",
      "path": "/writing/how-do-i-css/",
      "component": "/c/Users/mike/Development/madebymike/madebymike.github.io/src/templates/writing.js",
      "componentChunkName": "component---src-templates-writing-js",
      "context": {
        "slug": "how-do-i-css"
      },
      "pluginCreator___NODE": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
      "pluginCreatorId": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
      "componentPath": "/c/Users/mike/Development/madebymike/madebymike.github.io/src/templates/writing.js",
      "id": "SitePage /writing/how-do-i-css/",
      "parent": null,
      "children": [],
      "internal": {
        "type": "SitePage",
        "contentDigest": "1b03a14dc370d8e95f46dab25405db90",
        "description": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
        "owner": "internal-data-bridge"
      }
    },
    "SitePage /writing/html5-periodic-table-dmca-takedown-request/": {
      "jsonName": "writing-html-5-periodic-table-dmca-takedown-request-a5c",
      "internalComponentName": "ComponentWritingHtml5PeriodicTableDmcaTakedownRequest",
      "path": "/writing/html5-periodic-table-dmca-takedown-request/",
      "component": "/c/Users/mike/Development/madebymike/madebymike.github.io/src/templates/writing.js",
      "componentChunkName": "component---src-templates-writing-js",
      "context": {
        "slug": "html5-periodic-table-dmca-takedown-request"
      },
      "pluginCreator___NODE": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
      "pluginCreatorId": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
      "componentPath": "/c/Users/mike/Development/madebymike/madebymike.github.io/src/templates/writing.js",
      "id": "SitePage /writing/html5-periodic-table-dmca-takedown-request/",
      "parent": null,
      "children": [],
      "internal": {
        "type": "SitePage",
        "contentDigest": "717b5ae5964d19f23cdac270dcb1e9ff",
        "description": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
        "owner": "internal-data-bridge"
      }
    },
    "SitePage /writing/precise-control-responsive-typography/": {
      "jsonName": "writing-precise-control-responsive-typography-183",
      "internalComponentName": "ComponentWritingPreciseControlResponsiveTypography",
      "path": "/writing/precise-control-responsive-typography/",
      "component": "/c/Users/mike/Development/madebymike/madebymike.github.io/src/templates/writing.js",
      "componentChunkName": "component---src-templates-writing-js",
      "context": {
        "slug": "precise-control-responsive-typography"
      },
      "pluginCreator___NODE": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
      "pluginCreatorId": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
      "componentPath": "/c/Users/mike/Development/madebymike/madebymike.github.io/src/templates/writing.js",
      "id": "SitePage /writing/precise-control-responsive-typography/",
      "parent": null,
      "children": [],
      "internal": {
        "type": "SitePage",
        "contentDigest": "6e066b434b00865b78232c2c68032c02",
        "description": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
        "owner": "internal-data-bridge"
      }
    },
    "SitePage /writing/zero-element-loading-animations/": {
      "jsonName": "writing-zero-element-loading-animations-26f",
      "internalComponentName": "ComponentWritingZeroElementLoadingAnimations",
      "path": "/writing/zero-element-loading-animations/",
      "component": "/c/Users/mike/Development/madebymike/madebymike.github.io/src/templates/writing.js",
      "componentChunkName": "component---src-templates-writing-js",
      "context": {
        "slug": "zero-element-loading-animations"
      },
      "pluginCreator___NODE": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
      "pluginCreatorId": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
      "componentPath": "/c/Users/mike/Development/madebymike/madebymike.github.io/src/templates/writing.js",
      "id": "SitePage /writing/zero-element-loading-animations/",
      "parent": null,
      "children": [],
      "internal": {
        "type": "SitePage",
        "contentDigest": "fe6d28a51cb8d9643d117ad7885ad74a",
        "description": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
        "owner": "internal-data-bridge"
      }
    },
    "SitePage /writing/html5-video-streaming/": {
      "jsonName": "writing-html-5-video-streaming-442",
      "internalComponentName": "ComponentWritingHtml5VideoStreaming",
      "path": "/writing/html5-video-streaming/",
      "component": "/c/Users/mike/Development/madebymike/madebymike.github.io/src/templates/writing.js",
      "componentChunkName": "component---src-templates-writing-js",
      "context": {
        "slug": "html5-video-streaming"
      },
      "pluginCreator___NODE": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
      "pluginCreatorId": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
      "componentPath": "/c/Users/mike/Development/madebymike/madebymike.github.io/src/templates/writing.js",
      "id": "SitePage /writing/html5-video-streaming/",
      "parent": null,
      "children": [],
      "internal": {
        "type": "SitePage",
        "contentDigest": "b5434d6173a83be68d3a0e4e7fb58270",
        "description": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
        "owner": "internal-data-bridge"
      }
    },
    "SitePage /writing/resizing-and-cropping-images-with-canvas/": {
      "jsonName": "writing-resizing-and-cropping-images-with-canvas-791",
      "internalComponentName": "ComponentWritingResizingAndCroppingImagesWithCanvas",
      "path": "/writing/resizing-and-cropping-images-with-canvas/",
      "component": "/c/Users/mike/Development/madebymike/madebymike.github.io/src/templates/writing.js",
      "componentChunkName": "component---src-templates-writing-js",
      "context": {
        "slug": "resizing-and-cropping-images-with-canvas"
      },
      "pluginCreator___NODE": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
      "pluginCreatorId": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
      "componentPath": "/c/Users/mike/Development/madebymike/madebymike.github.io/src/templates/writing.js",
      "id": "SitePage /writing/resizing-and-cropping-images-with-canvas/",
      "parent": null,
      "children": [],
      "internal": {
        "type": "SitePage",
        "contentDigest": "1f27fb53b991c68f1df678ece76f87d8",
        "description": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
        "owner": "internal-data-bridge"
      }
    },
    "SitePage /writing/understanding-flexbox/": {
      "jsonName": "writing-understanding-flexbox-0b4",
      "internalComponentName": "ComponentWritingUnderstandingFlexbox",
      "path": "/writing/understanding-flexbox/",
      "component": "/c/Users/mike/Development/madebymike/madebymike.github.io/src/templates/writing.js",
      "componentChunkName": "component---src-templates-writing-js",
      "context": {
        "slug": "understanding-flexbox"
      },
      "pluginCreator___NODE": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
      "pluginCreatorId": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
      "componentPath": "/c/Users/mike/Development/madebymike/madebymike.github.io/src/templates/writing.js",
      "id": "SitePage /writing/understanding-flexbox/",
      "parent": null,
      "children": [],
      "internal": {
        "type": "SitePage",
        "contentDigest": "16cabc59fdb280bee1ac37c59bae7d22",
        "description": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
        "owner": "internal-data-bridge"
      }
    },
    "SitePage /writing/merging-json-data-sets/": {
      "jsonName": "writing-merging-json-data-sets-1b7",
      "internalComponentName": "ComponentWritingMergingJsonDataSets",
      "path": "/writing/merging-json-data-sets/",
      "component": "/c/Users/mike/Development/madebymike/madebymike.github.io/src/templates/writing.js",
      "componentChunkName": "component---src-templates-writing-js",
      "context": {
        "slug": "merging-json-data-sets"
      },
      "pluginCreator___NODE": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
      "pluginCreatorId": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
      "componentPath": "/c/Users/mike/Development/madebymike/madebymike.github.io/src/templates/writing.js",
      "id": "SitePage /writing/merging-json-data-sets/",
      "parent": null,
      "children": [],
      "internal": {
        "type": "SitePage",
        "contentDigest": "52972e050732745f0f3ff5ee216f9b27",
        "description": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
        "owner": "internal-data-bridge"
      }
    },
    "SitePage /writing/accessible-contrast-with-less-and-sass/": {
      "jsonName": "writing-accessible-contrast-with-less-and-sass-ace",
      "internalComponentName": "ComponentWritingAccessibleContrastWithLessAndSass",
      "path": "/writing/accessible-contrast-with-less-and-sass/",
      "component": "/c/Users/mike/Development/madebymike/madebymike.github.io/src/templates/writing.js",
      "componentChunkName": "component---src-templates-writing-js",
      "context": {
        "slug": "accessible-contrast-with-less-and-sass"
      },
      "pluginCreator___NODE": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
      "pluginCreatorId": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
      "componentPath": "/c/Users/mike/Development/madebymike/madebymike.github.io/src/templates/writing.js",
      "id": "SitePage /writing/accessible-contrast-with-less-and-sass/",
      "parent": null,
      "children": [],
      "internal": {
        "type": "SitePage",
        "contentDigest": "2a1182779aa487dd0cceb37222719ac0",
        "description": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
        "owner": "internal-data-bridge"
      }
    },
    "SitePage /writing/detecting-transition-start/": {
      "jsonName": "writing-detecting-transition-start-5d4",
      "internalComponentName": "ComponentWritingDetectingTransitionStart",
      "path": "/writing/detecting-transition-start/",
      "component": "/c/Users/mike/Development/madebymike/madebymike.github.io/src/templates/writing.js",
      "componentChunkName": "component---src-templates-writing-js",
      "context": {
        "slug": "detecting-transition-start"
      },
      "pluginCreator___NODE": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
      "pluginCreatorId": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
      "componentPath": "/c/Users/mike/Development/madebymike/madebymike.github.io/src/templates/writing.js",
      "id": "SitePage /writing/detecting-transition-start/",
      "parent": null,
      "children": [],
      "internal": {
        "type": "SitePage",
        "contentDigest": "c3d416814ea14f4013ef4e1dd749bdbf",
        "description": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
        "owner": "internal-data-bridge"
      }
    },
    "SitePage /writing/thoughts-on-design-patterns-in-css/": {
      "jsonName": "writing-thoughts-on-design-patterns-in-css-2f1",
      "internalComponentName": "ComponentWritingThoughtsOnDesignPatternsInCss",
      "path": "/writing/thoughts-on-design-patterns-in-css/",
      "component": "/c/Users/mike/Development/madebymike/madebymike.github.io/src/templates/writing.js",
      "componentChunkName": "component---src-templates-writing-js",
      "context": {
        "slug": "thoughts-on-design-patterns-in-css"
      },
      "pluginCreator___NODE": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
      "pluginCreatorId": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
      "componentPath": "/c/Users/mike/Development/madebymike/madebymike.github.io/src/templates/writing.js",
      "id": "SitePage /writing/thoughts-on-design-patterns-in-css/",
      "parent": null,
      "children": [],
      "internal": {
        "type": "SitePage",
        "contentDigest": "54716e34ffc5989039593b1be09d5c63",
        "description": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
        "owner": "internal-data-bridge"
      }
    },
    "SitePage /writing": {
      "jsonName": "writing-e3d",
      "internalComponentName": "ComponentWriting",
      "path": "/writing",
      "component": "/c/Users/mike/Development/madebymike/madebymike.github.io/src/templates/writing-index.js",
      "componentChunkName": "component---src-templates-writing-index-js",
      "context": {
        "group": [
          {
            "node": {
              "id": "9f8ce28c-46ed-53e2-953e-c137a753c839",
              "title": "Getting the heck out of React",
              "slug": "getting-the-heck-out-of-react",
              "publishDate": "2018-11-28T00:00+11:00",
              "dateString": "November 27th, 2018",
              "tags": [
                "React",
                "JavaScript"
              ],
              "description": {
                "childMarkdownRemark": {
                  "html": "<p>React has limitations when it comes to working with persistent stateful media objects. In this article I discuss techniques for working with media elements like canvas, video and third-party libraries in React.</p>"
                }
              },
              "color": "Gold"
            }
          },
          {
            "node": {
              "id": "2cc84a29-b335-555a-a3e4-c99f05b52ad7",
              "title": "What is this in JavaScript?",
              "slug": "this-in-javascript",
              "publishDate": "2018-11-11T00:00+01:00",
              "dateString": "November 10th, 2018",
              "tags": null,
              "description": {
                "childMarkdownRemark": {
                  "html": "<p>My attempt at a very basic explanation of the 'this' keyword in JavaScript.</p>"
                }
              },
              "color": null
            }
          },
          {
            "node": {
              "id": "76644d91-6583-5489-b822-c89360b11ff0",
              "title": "Difference between currentColor & Custom Properties",
              "slug": "currentcolor-and-custom-properties",
              "publishDate": "2018-11-11T00:00+00:00",
              "dateString": "November 11th, 2018",
              "tags": [
                "CSS",
                "Custom Properties"
              ],
              "description": {
                "childMarkdownRemark": {
                  "html": "<p>There are some interesting differences between how currentColor and custom properties work. Both are examples of dynamic properties in CSS but how they are resolved differs in some very important ways. I recently came across an example of this that had me scratching my head for a while.</p>"
                }
              },
              "color": "Gold"
            }
          },
          {
            "node": {
              "id": "565dc228-2761-5a54-b40c-30a184e2aae6",
              "title": "New website & some new CSS tricks",
              "slug": "new-website-new-css-tricks",
              "publishDate": "2018-01-10T00:00+10:00",
              "dateString": "January 9th, 2018",
              "tags": [
                "CSS"
              ],
              "description": {
                "childMarkdownRemark": {
                  "html": "<p>New design, content and some new CSS tricks on my website.</p>"
                }
              },
              "color": "Default"
            }
          },
          {
            "node": {
              "id": "33f212d1-aa8d-5ea4-9d34-75c498f4632e",
              "title": "Using CSS variables correctly",
              "slug": "using-css-variables",
              "publishDate": "2017-06-18T00:00+10:00",
              "dateString": "June 17th, 2017",
              "tags": [
                "CSS",
                "Custom Properties"
              ],
              "description": {
                "childMarkdownRemark": {
                  "html": "<p>Custom Properties have the potential to change how we write and think about CSS.</p>"
                }
              },
              "color": "Default"
            }
          },
          {
            "node": {
              "id": "a8818912-1058-588d-9376-6c6621140fdb",
              "title": "Non-linear interpolation in CSS",
              "slug": "non-linear-interpolation-in-css",
              "publishDate": "2017-05-18T00:00+10:00",
              "dateString": "May 17th, 2017",
              "tags": [
                "CSS"
              ],
              "description": {
                "childMarkdownRemark": {
                  "html": "<p>A solution for transitioning lengths values in CSS through more than one 'bending point'.</p>"
                }
              },
              "color": null
            }
          },
          {
            "node": {
              "id": "8e079e1e-0d9c-5e9c-8838-2b0020cbe068",
              "title": "The invisible parts of CSS",
              "slug": "the-invisible-parts-of-css",
              "publishDate": "2017-04-04T00:00+10:00",
              "dateString": "April 3rd, 2017",
              "tags": [
                "CSS"
              ],
              "description": {
                "childMarkdownRemark": {
                  "html": "<p>Explains the box model, cascade, formatting contexts, positioning, stacking and a lot more about how CSS works. A right of passage, I had to write my version.</p>"
                }
              },
              "color": null
            }
          },
          {
            "node": {
              "id": "4d7f0e82-276e-5222-9e4e-57e08cb8fd4e",
              "title": "Interpolation in CSS without animation",
              "slug": "interpolation-without-animation",
              "publishDate": "2016-12-29T00:00+10:00",
              "dateString": "December 28th, 2016",
              "tags": [
                "CSS"
              ],
              "description": {
                "childMarkdownRemark": {
                  "html": "<p>Ideas for a more general purpose interpolation function in CSS.</p>"
                }
              },
              "color": null
            }
          },
          {
            "node": {
              "id": "a2f197ea-93d2-50d7-adfd-b3e34a24a2f2",
              "title": "On maths and coding",
              "slug": "maths-and-code",
              "publishDate": "2016-10-16T00:00+10:00",
              "dateString": "October 15th, 2016",
              "tags": [
                "Personal"
              ],
              "description": {
                "childMarkdownRemark": {
                  "html": "<p>A more personal article on being a developer and having an average mathematical ability.</p>"
                }
              },
              "color": null
            }
          },
          {
            "node": {
              "id": "ce59dc47-13aa-5dc3-85af-a91760a04da7",
              "title": "SVG has more potential",
              "slug": "svg-has-more-potential",
              "publishDate": "2016-09-19T00:00+10:00",
              "dateString": "September 18th, 2016",
              "tags": [
                "SVG",
                "CSS"
              ],
              "description": {
                "childMarkdownRemark": {
                  "html": "<p>A bunch of interesting techniques for using SVG to make unique responsive components.</p>"
                }
              },
              "color": null
            }
          }
        ],
        "pathPrefix": "writing",
        "first": true,
        "last": false,
        "index": 1,
        "pageCount": 3,
        "additionalContext": {}
      },
      "pluginCreator___NODE": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
      "pluginCreatorId": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
      "componentPath": "/c/Users/mike/Development/madebymike/madebymike.github.io/src/templates/writing-index.js",
      "id": "SitePage /writing",
      "parent": null,
      "children": [],
      "internal": {
        "type": "SitePage",
        "contentDigest": "50690667e812a429537cf4afad319044",
        "description": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
        "owner": "internal-data-bridge"
      }
    },
    "SitePage /writing/2": {
      "jsonName": "writing-2-ca2",
      "internalComponentName": "ComponentWriting2",
      "path": "/writing/2",
      "component": "/c/Users/mike/Development/madebymike/madebymike.github.io/src/templates/writing-index.js",
      "componentChunkName": "component---src-templates-writing-index-js",
      "context": {
        "group": [
          {
            "node": {
              "id": "c6021bd8-4e79-5e53-8ada-6ac2fb68027c",
              "title": "Offline content with service workers",
              "slug": "service-workers",
              "publishDate": "2016-08-22T00:00+10:00",
              "dateString": "August 21st, 2016",
              "tags": [
                "Service Workers",
                "Offline"
              ],
              "description": {
                "childMarkdownRemark": {
                  "html": "<p>My experience implementing service workers to cache and serve content offline.</p>"
                }
              },
              "color": null
            }
          },
          {
            "node": {
              "id": "284d5caf-4d3f-5a7d-9365-493ed874b17d",
              "title": "Image manipulation techniques with 2d canvas",
              "slug": "canvas-image-manipulation",
              "publishDate": "2016-07-07T00:00+10:00",
              "dateString": "July 6th, 2016",
              "tags": [
                "canvas",
                "webgl"
              ],
              "description": {
                "childMarkdownRemark": {
                  "html": "<p>A short tutorial on different techniques for manipulating pixel data with the canvas element.</p>"
                }
              },
              "color": "Default"
            }
          },
          {
            "node": {
              "id": "3ee8fe14-1a33-5758-a779-da11375b203a",
              "title": "Style Guides: 50 shades of corporate blue",
              "slug": "style-guides-50-shades-of-corporate-blue",
              "publishDate": "2016-02-26T00:00+10:00",
              "dateString": "February 25th, 2016",
              "tags": [
                "Style Guides",
                "CSS"
              ],
              "description": {
                "childMarkdownRemark": {
                  "html": "<p>Sharing some experiences trying to get a design system\\living style guide working in a corporate environment.</p>"
                }
              },
              "color": null
            }
          },
          {
            "node": {
              "id": "7b95e6bc-209b-5da6-a1fc-5eed05257a3a",
              "title": "A love letter to jQuery",
              "slug": "love-letter-to-jquery",
              "publishDate": "2016-02-19T00:00+10:00",
              "dateString": "February 18th, 2016",
              "tags": null,
              "description": {
                "childMarkdownRemark": {
                  "html": "<p>A very tongue-in-cheek article about why jQuery is good for the web.</p>"
                }
              },
              "color": null
            }
          },
          {
            "node": {
              "id": "8ba8ae2e-6a81-5ea3-9414-0d5884bbe52f",
              "title": "Pattern: Robust icons",
              "slug": "pattern-robust-icons",
              "publishDate": "2015-08-22T00:00+10:00",
              "dateString": "August 21st, 2015",
              "tags": [
                "CSS",
                "Icons"
              ],
              "description": {
                "childMarkdownRemark": {
                  "html": "<p>A little pattern I wanted to share for creating bulletproof icons.</p>"
                }
              },
              "color": null
            }
          },
          {
            "node": {
              "id": "d0d7dd46-3209-5714-b885-f77157e9465c",
              "title": "Fluid typography examples",
              "slug": "fluid-type-calc-examples",
              "publishDate": "2015-07-15T00:00+10:00",
              "dateString": "July 14th, 2015",
              "tags": [
                "CSS",
                "Typography"
              ],
              "description": {
                "childMarkdownRemark": {
                  "html": "<p>Some practical examples of using calc and viewport units for fluid typography and more.</p>"
                }
              },
              "color": null
            }
          },
          {
            "node": {
              "id": "9607cf50-94d1-56ae-90fc-55c96e6add74",
              "title": "How do I CSS?",
              "slug": "how-do-i-css",
              "publishDate": "2015-06-15T00:00+10:00",
              "dateString": "June 14th, 2015",
              "tags": [
                "CSS"
              ],
              "description": {
                "childMarkdownRemark": {
                  "html": "<p>Details of my CSS workflow and frontend development processes in 2015.</p>"
                }
              },
              "color": null
            }
          },
          {
            "node": {
              "id": "4c0495e4-f68f-504d-875d-b783b1399ad0",
              "title": "HTML5 periodic table DMCA takedown request",
              "slug": "html5-periodic-table-dmca-takedown-request",
              "publishDate": "2015-04-16T00:00+10:00",
              "dateString": "April 15th, 2015",
              "tags": [
                "Personal"
              ],
              "description": null,
              "color": null
            }
          },
          {
            "node": {
              "id": "d562810d-ee79-5edc-8a4d-e0546757cda3",
              "title": "Precise control over responsive typography",
              "slug": "precise-control-responsive-typography",
              "publishDate": "2015-03-17T00:00+10:00",
              "dateString": "March 16th, 2015",
              "tags": [
                "CSS",
                "Typography"
              ],
              "description": {
                "childMarkdownRemark": {
                  "html": "<p>Creating fluid responsive typography with calc and viewport units.</p>"
                }
              },
              "color": null
            }
          },
          {
            "node": {
              "id": "11e689e2-017c-57b6-b59f-e6df0d1714fa",
              "title": "Zero element loading animations",
              "slug": "zero-element-loading-animations",
              "publishDate": "2015-01-05T00:00+10:00",
              "dateString": "January 4th, 2015",
              "tags": [
                "CSS"
              ],
              "description": {
                "childMarkdownRemark": {
                  "html": "<p>A technique for loading animations that can be applied to existing elements.</p>"
                }
              },
              "color": null
            }
          }
        ],
        "pathPrefix": "writing",
        "first": false,
        "last": false,
        "index": 2,
        "pageCount": 3,
        "additionalContext": {}
      },
      "pluginCreator___NODE": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
      "pluginCreatorId": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
      "componentPath": "/c/Users/mike/Development/madebymike/madebymike.github.io/src/templates/writing-index.js",
      "id": "SitePage /writing/2",
      "parent": null,
      "children": [],
      "internal": {
        "type": "SitePage",
        "contentDigest": "c04100c06f2ad22701e78201c270c000",
        "description": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
        "owner": "internal-data-bridge"
      }
    },
    "SitePage /writing/3": {
      "jsonName": "writing-3-27b",
      "internalComponentName": "ComponentWriting3",
      "path": "/writing/3",
      "component": "/c/Users/mike/Development/madebymike/madebymike.github.io/src/templates/writing-index.js",
      "componentChunkName": "component---src-templates-writing-index-js",
      "context": {
        "group": [
          {
            "node": {
              "id": "6cd6dd13-9477-50bd-923e-6a60cb9d51bb",
              "title": "Determine the quality of light in live video streams",
              "slug": "html5-video-streaming",
              "publishDate": "2014-12-12T00:00+10:00",
              "dateString": "December 11th, 2014",
              "tags": [
                "Canvas"
              ],
              "description": {
                "childMarkdownRemark": {
                  "html": "<p>Some early experiments with WebRTC.</p>"
                }
              },
              "color": null
            }
          },
          {
            "node": {
              "id": "844f4bd2-a6ee-5f7b-b4f4-eb4d10c3bbb6",
              "title": "Resizing and Cropping Images with Canvas",
              "slug": "resizing-and-cropping-images-with-canvas",
              "publishDate": "2014-10-30T00:00+10:00",
              "dateString": "October 29th, 2014",
              "tags": [
                "Canvas"
              ],
              "description": {
                "childMarkdownRemark": {
                  "html": "<p>A tutorial for Codrops on using HTML5 canvas to crop and resize images on the client side.</p>"
                }
              },
              "color": null
            }
          },
          {
            "node": {
              "id": "f08bd495-cb62-5bd8-ae0b-03bf223a6015",
              "title": "Understanding flexbox",
              "slug": "understanding-flexbox",
              "publishDate": "2014-09-09T00:00+10:00",
              "dateString": "September 8th, 2014",
              "tags": [
                "CSS",
                "Flexbox"
              ],
              "description": {
                "childMarkdownRemark": {
                  "html": "<p>A detailed exploration of how the space and size of items are determined when using flexbox.</p>"
                }
              },
              "color": null
            }
          },
          {
            "node": {
              "id": "47f21b2f-8c31-573c-b016-8af2a56545cf",
              "title": "Merging JSON data sets",
              "slug": "merging-json-data-sets",
              "publishDate": "2014-08-08T00:00+10:00",
              "dateString": "August 7th, 2014",
              "tags": null,
              "description": null,
              "color": null
            }
          },
          {
            "node": {
              "id": "05b0c536-9190-556e-934a-78762e13d05c",
              "title": "Accessible contrast with Less and Sass",
              "slug": "accessible-contrast-with-less-and-sass",
              "publishDate": "2014-06-15T00:00+10:00",
              "dateString": "June 14th, 2014",
              "tags": [
                "color",
                "scss",
                "css"
              ],
              "description": {
                "childMarkdownRemark": {
                  "html": "<p>Contrast is a critical factor in web design, it’s important to get right because it has a strong influence on the visual aesthetic, but it’s especially important for readability and accessibility of text on the page. It’s not a revolutionary idea to suggest that we use Less or Sass to help choose an appropriate text color for a particular background. There are plenty of examples of this, but what is the best way? </p>"
                }
              },
              "color": "Default"
            }
          },
          {
            "node": {
              "id": "4c31379f-ca7f-50b7-a62a-caa5c684f392",
              "title": "Detecting transition start",
              "slug": "detecting-transition-start",
              "publishDate": "2014-06-06T00:00+10:00",
              "dateString": "June 5th, 2014",
              "tags": [
                "css"
              ],
              "description": null,
              "color": null
            }
          },
          {
            "node": {
              "id": "61d5a6ea-d1fb-5cae-97a6-c1bbf402a4f8",
              "title": "Thoughts on design patters in CSS",
              "slug": "thoughts-on-design-patterns-in-css",
              "publishDate": "2014-05-25T00:00+10:00",
              "dateString": "May 24th, 2014",
              "tags": null,
              "description": {
                "childMarkdownRemark": {
                  "html": "<p>Me thinking about component-based architecture for CSS in 2014, before I knew what to call it.</p>"
                }
              },
              "color": null
            }
          }
        ],
        "pathPrefix": "writing",
        "first": false,
        "last": true,
        "index": 3,
        "pageCount": 3,
        "additionalContext": {}
      },
      "pluginCreator___NODE": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
      "pluginCreatorId": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
      "componentPath": "/c/Users/mike/Development/madebymike/madebymike.github.io/src/templates/writing-index.js",
      "id": "SitePage /writing/3",
      "parent": null,
      "children": [],
      "internal": {
        "type": "SitePage",
        "contentDigest": "e15df8bf898f8b4a09b5a1da3145ddfd",
        "description": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
        "owner": "internal-data-bridge"
      }
    },
    "SitePage /hire-me/": {
      "jsonName": "hire-me-4e7",
      "internalComponentName": "ComponentHireMe",
      "path": "/hire-me/",
      "component": "/c/Users/mike/Development/madebymike/madebymike.github.io/src/templates/page.js",
      "componentChunkName": "component---src-templates-page-js",
      "context": {
        "slug": "hire-me"
      },
      "pluginCreator___NODE": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
      "pluginCreatorId": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
      "componentPath": "/c/Users/mike/Development/madebymike/madebymike.github.io/src/templates/page.js",
      "id": "SitePage /hire-me/",
      "parent": null,
      "children": [],
      "internal": {
        "type": "SitePage",
        "contentDigest": "5ddd2b32d73e4e1efb7ac4f6f8ed721d",
        "description": "7374ebf2-d961-52ee-92a2-c25e7cb387a9",
        "owner": "internal-data-bridge"
      }
    },
    "SitePage /404/": {
      "jsonName": "404-22d",
      "internalComponentName": "Component404",
      "path": "/404/",
      "component": "/c/Users/mike/Development/madebymike/madebymike.github.io/src/pages/404.js",
      "componentChunkName": "component---src-pages-404-js",
      "context": {},
      "pluginCreator___NODE": "a4d93223-8fff-57c6-ac53-216f9a832581",
      "pluginCreatorId": "a4d93223-8fff-57c6-ac53-216f9a832581",
      "componentPath": "/c/Users/mike/Development/madebymike/madebymike.github.io/src/pages/404.js",
      "id": "SitePage /404/",
      "parent": null,
      "children": [],
      "internal": {
        "type": "SitePage",
        "contentDigest": "ad1254fed24914eebc32ec1c1d224f4b",
        "description": "a4d93223-8fff-57c6-ac53-216f9a832581",
        "owner": "internal-data-bridge"
      }
    },
    "SitePage /": {
      "jsonName": "index",
      "internalComponentName": "ComponentIndex",
      "path": "/",
      "component": "/c/Users/mike/Development/madebymike/madebymike.github.io/src/pages/index.js",
      "componentChunkName": "component---src-pages-index-js",
      "context": {},
      "pluginCreator___NODE": "a4d93223-8fff-57c6-ac53-216f9a832581",
      "pluginCreatorId": "a4d93223-8fff-57c6-ac53-216f9a832581",
      "componentPath": "/c/Users/mike/Development/madebymike/madebymike.github.io/src/pages/index.js",
      "id": "SitePage /",
      "parent": null,
      "children": [],
      "internal": {
        "type": "SitePage",
        "contentDigest": "fc8c5114bab34641217ae11c60d3a9d1",
        "description": "a4d93223-8fff-57c6-ac53-216f9a832581",
        "owner": "internal-data-bridge"
      }
    },
    "SitePage /404.html": {
      "jsonName": "404-html-516",
      "internalComponentName": "Component404Html",
      "path": "/404.html",
      "component": "/c/Users/mike/Development/madebymike/madebymike.github.io/src/pages/404.js",
      "componentChunkName": "component---src-pages-404-js",
      "context": {},
      "pluginCreator___NODE": "f795702c-a3b8-5a88-88ee-5d06019d44fa",
      "pluginCreatorId": "f795702c-a3b8-5a88-88ee-5d06019d44fa",
      "componentPath": "/c/Users/mike/Development/madebymike/madebymike.github.io/src/pages/404.js",
      "id": "SitePage /404.html",
      "parent": null,
      "children": [],
      "internal": {
        "type": "SitePage",
        "contentDigest": "3077ba700a10c722ff5ee9383cee11a6",
        "description": "f795702c-a3b8-5a88-88ee-5d06019d44fa",
        "owner": "internal-data-bridge"
      }
    }
  },
  "status": {
    "plugins": {
      "gatsby-source-contentful": {
        "2cb7djx9f8kv-master-cdn.contentful.com": "w5ZGw6JFwqZmVcKsE8Kow4grw45QdyY4w7zDjXxvdcOVa8Kjw7vDmh4HwqPDp8OQw7XDvsOce8O4w5tKw5XDoWhLw7Rew5_DtXvCujXDuMKAwocSwqTCsFDDrMODQMO5QmfCpcOsU1bClcKZLMKLZMONwrnDk8KrwrwqVMOY"
      }
    },
    "PLUGINS_HASH": "3eaa319936b7a2ce2857c82fcaad6abd"
  },
  "componentDataDependencies": {
    "nodes": {
      "199a7631-d10c-580d-a568-d1d310305a9f": [
        "/",
        "/writing/getting-the-heck-out-of-react/"
      ],
      "0932c157-ca35-5676-af96-da8aafc3554d": [
        "/",
        "/writing/this-in-javascript/"
      ],
      "2874f855-f45b-5dd2-a1b8-8851a376ffb7": [
        "/",
        "/writing/currentcolor-and-custom-properties/"
      ],
      "08c74e4a-4ddb-5ff1-a4a9-3e038bde1a0f": [
        "/",
        "/writing/new-website-new-css-tricks/"
      ],
      "bc9bf393-6e61-5355-a730-0b2e0916ea12": [
        "/",
        "/writing/using-css-variables/"
      ],
      "7211b149-f415-5cb0-a4ff-aac39a578d73": [
        "/",
        "/writing/non-linear-interpolation-in-css/"
      ],
      "3a5203f8-e756-57a1-8c78-80d5b9da33c4": [
        "/",
        "/writing/the-invisible-parts-of-css/"
      ],
      "a80ddecb-8905-5c76-a8c7-002b50024020": [
        "/",
        "/writing/interpolation-without-animation/"
      ],
      "94f77e6c-3427-56f8-beb5-984846348062": [
        "/",
        "/writing/maths-and-code/"
      ],
      "70e1f972-b4fb-5bc5-a537-7dd452c62767": [
        "/",
        "/writing/svg-has-more-potential/"
      ],
      "3efb439f-b7ac-543d-baf6-ece41d990898": [
        "/",
        "/writing/service-workers/"
      ],
      "9a47d419-9186-55bf-b1f9-e58855d46859": [
        "/",
        "/writing/canvas-image-manipulation/"
      ],
      "894edf2d-e701-5b58-8997-646afa8f834a": [
        "/",
        "/writing/style-guides-50-shades-of-corporate-blue/"
      ],
      "a7bdaa30-4cbf-5a24-8f2c-0cb4eb0eef41": [
        "/",
        "/writing/love-letter-to-jquery/"
      ],
      "8a964b1b-2e87-5899-8e8f-6df6de3d4b55": [
        "/",
        "/writing/pattern-robust-icons/"
      ],
      "cafbb96f-8489-5af7-9b6f-45908bc1638b": [
        "/",
        "/writing/fluid-type-calc-examples/"
      ],
      "f3ba2b4b-6e7f-5870-b7cf-5cc21e58ce8c": [
        "/",
        "/writing/how-do-i-css/"
      ],
      "953a7add-782d-5c98-9b05-db47236fa8cd": [
        "/",
        "/writing/precise-control-responsive-typography/"
      ],
      "0dbc01af-f742-5068-843d-77a80963ed36": [
        "/",
        "/writing/zero-element-loading-animations/"
      ],
      "80899290-155b-59e7-8265-6e07fbf72705": [
        "/hire-me/"
      ],
      "9f8ce28c-46ed-53e2-953e-c137a753c839": [
        "/writing/getting-the-heck-out-of-react/"
      ],
      "2cc84a29-b335-555a-a3e4-c99f05b52ad7": [
        "/writing/this-in-javascript/"
      ],
      "5d1e67dd-cd7a-529d-84e9-09e2444c2a49": [
        "/"
      ],
      "3805ff28-5c9a-5d5d-8df7-74bc59fff16f": [
        "/"
      ],
      "1f79f607-139c-5e7f-8154-90b4c5414a31": [
        "/"
      ],
      "4b43b077-20e6-5f99-8f1b-9a3a310423e5": [
        "/"
      ],
      "0c2e2d87-a2ce-569d-b44f-18dce18657c8": [
        "/"
      ],
      "0b9cc435-f213-5f02-a13b-ada210048d1e": [
        "/"
      ],
      "edf8346c-99ed-5ecc-aff9-228fca50a022": [
        "/"
      ],
      "995d7aad-5031-54b4-b808-245353aa9e5c": [
        "/"
      ],
      "1dd64149-0c42-55c6-b6aa-c8b9f97e3d1a": [
        "/"
      ],
      "23cdebc3-6994-58dc-aa58-16513593783e": [
        "/"
      ],
      "cdec7352-a10c-5151-87e6-7ed1944951cd": [
        "/"
      ],
      "ae744db3-b0fd-5eb0-ab23-5a68e523c210": [
        "/"
      ],
      "42d2ab12-f858-558a-b3e8-01809bbc9c87": [
        "/",
        "/writing/getting-the-heck-out-of-react/"
      ],
      "ad6bcb86-a31e-540b-a741-b9881c11a73a": [
        "/",
        "/writing/this-in-javascript/"
      ],
      "780e2dc2-67c9-5443-9cfc-47610b7ecd36": [
        "/",
        "/writing/currentcolor-and-custom-properties/"
      ],
      "a24bbccc-aea3-5b6a-8abe-684134d709f1": [
        "/",
        "/writing/new-website-new-css-tricks/"
      ],
      "bfe81f4d-ec12-55fe-981c-b8606f1d245e": [
        "/",
        "/writing/using-css-variables/"
      ],
      "befdb6a6-db3f-539d-9702-fe719b3d6a1c": [
        "/",
        "/writing/non-linear-interpolation-in-css/"
      ],
      "49ea92ac-c62d-58a4-8436-4325aed670f4": [
        "/",
        "/writing/the-invisible-parts-of-css/"
      ],
      "2fa8a8a7-d415-51a5-a21e-ff8b0511903e": [
        "/",
        "/writing/interpolation-without-animation/"
      ],
      "f8c5451f-cb6a-56aa-8ed3-cd4cd9822c3d": [
        "/",
        "/writing/maths-and-code/"
      ],
      "356913e5-6f2d-5cb4-a897-f1a3eb269adf": [
        "/",
        "/writing/svg-has-more-potential/"
      ],
      "2a1bfe1e-bb0b-50e7-a43c-ed69f78c8101": [
        "/",
        "/writing/service-workers/"
      ],
      "a8c8ae21-7ead-5519-988b-b4d3bd671b18": [
        "/",
        "/writing/canvas-image-manipulation/"
      ],
      "6ad3e664-a44e-5355-a9d9-f48f976b2be5": [
        "/",
        "/writing/style-guides-50-shades-of-corporate-blue/"
      ],
      "526e9e64-6d53-52d0-bcaa-5aa949032b59": [
        "/",
        "/writing/love-letter-to-jquery/"
      ],
      "dc5578ae-b10e-5a42-947f-f08b3e72a891": [
        "/",
        "/writing/pattern-robust-icons/"
      ],
      "14a33037-42a2-5e73-9e14-b46115e99403": [
        "/",
        "/writing/fluid-type-calc-examples/"
      ],
      "31579d99-c3aa-5e9f-922a-b764fad2b56f": [
        "/",
        "/writing/how-do-i-css/"
      ],
      "43ff1ece-e5b7-5d9f-9ead-0230390b9c56": [
        "/",
        "/writing/precise-control-responsive-typography/"
      ],
      "f35395be-8f5f-5883-abcd-ecfe7ae1165e": [
        "/",
        "/writing/zero-element-loading-animations/"
      ],
      "f38021cd-33c9-50fb-97f3-d4abbb271e15": [
        "/hire-me/"
      ],
      "08d59f81-40d2-5a28-a903-20f2237756f7": [
        "/hire-me/"
      ],
      "be6af314-ebc7-5fef-92b1-7c3b6e86fe98": [
        "/hire-me/"
      ],
      "25f0dc3b-b0ff-550d-851c-869c10a098ff": [
        "/writing/getting-the-heck-out-of-react/"
      ],
      "2f5acfad-2a61-502c-a61e-7c5d127b4c54": [
        "/writing/this-in-javascript/"
      ],
      "ad791795-fd76-5ebb-92aa-c9740498ebf9": [
        "/"
      ],
      "66fd2765-0ca6-59b8-926a-a9afe47fb853": [
        "/"
      ],
      "96591036-1a23-5f3e-bdc3-0da7e77a7614": [
        "/"
      ],
      "bd35813f-364f-5b26-af20-22409663f27c": [
        "/"
      ],
      "6bb9ecd1-8610-5bf9-a2ad-1b83da6d4729": [
        "/"
      ],
      "b1f09196-55a0-5b6c-83e7-555ec6006b12": [
        "/"
      ],
      "7ff93b7c-fa19-5835-9f80-fba76a467f5f": [
        "/"
      ],
      "95f25e61-ae2c-58c8-b40a-e4b78f53f834": [
        "/"
      ],
      "6186dd06-7b1c-5395-b68b-77ec11f5fd04": [
        "/"
      ],
      "96aa0a75-7b72-5d6e-a493-3e8408c55856": [
        "/hire-me/"
      ],
      "e1dba7d6-a4ec-5896-83e9-63041d471206": [
        "/hire-me/"
      ],
      "fbd2a532-272b-5830-85c2-5c8b140ba892": [
        "/hire-me/"
      ],
      "8541e5c9-619a-58e2-bb48-a09126320af5": [
        "/writing/getting-the-heck-out-of-react/"
      ],
      "479da221-e984-5c18-853d-a5d8edff3717": [
        "/writing/this-in-javascript/"
      ],
      "76644d91-6583-5489-b822-c89360b11ff0": [
        "/writing/currentcolor-and-custom-properties/"
      ],
      "1df335a7-d623-5e24-8a29-5c438e0b1e5f": [
        "/writing/currentcolor-and-custom-properties/"
      ],
      "5e891d27-8efe-5e28-9b51-3f210c33daee": [
        "/writing/currentcolor-and-custom-properties/"
      ],
      "565dc228-2761-5a54-b40c-30a184e2aae6": [
        "/writing/new-website-new-css-tricks/"
      ],
      "33f212d1-aa8d-5ea4-9d34-75c498f4632e": [
        "/writing/using-css-variables/"
      ],
      "a8818912-1058-588d-9376-6c6621140fdb": [
        "/writing/non-linear-interpolation-in-css/"
      ],
      "7e6d88cf-aae1-584d-9159-208ff5a8e1b9": [
        "/writing/new-website-new-css-tricks/"
      ],
      "62b3e0c8-638d-5b7c-adaf-0a3adbfab453": [
        "/writing/using-css-variables/"
      ],
      "d4412520-8f39-58a6-ac7f-23612cf49f92": [
        "/writing/non-linear-interpolation-in-css/"
      ],
      "a90a4e74-2696-551b-883f-de669a903acd": [
        "/writing/new-website-new-css-tricks/"
      ],
      "e58a4175-933b-5247-9c96-09ee2cf67200": [
        "/writing/using-css-variables/"
      ],
      "af56f6cc-9f71-5f91-8123-ff59e47befd1": [
        "/writing/non-linear-interpolation-in-css/"
      ],
      "8e079e1e-0d9c-5e9c-8838-2b0020cbe068": [
        "/writing/the-invisible-parts-of-css/"
      ],
      "a62cea07-f354-5149-a8ba-d464f2a336a5": [
        "/writing/the-invisible-parts-of-css/"
      ],
      "bd1692e3-5694-527b-b958-9982156ec065": [
        "/writing/the-invisible-parts-of-css/"
      ],
      "4d7f0e82-276e-5222-9e4e-57e08cb8fd4e": [
        "/writing/interpolation-without-animation/"
      ],
      "f6491b0b-d4b6-5216-a807-95bd18eb4ac8": [
        "/writing/interpolation-without-animation/"
      ],
      "20c7a7e0-bc45-5127-b917-a67dce92c9cb": [
        "/writing/interpolation-without-animation/"
      ],
      "a2f197ea-93d2-50d7-adfd-b3e34a24a2f2": [
        "/writing/maths-and-code/"
      ],
      "ce59dc47-13aa-5dc3-85af-a91760a04da7": [
        "/writing/svg-has-more-potential/"
      ],
      "0d3f20f9-0a59-5827-93be-03b9ec6df855": [
        "/writing/maths-and-code/"
      ],
      "c48f80ac-3145-53fd-8f4b-f7a2cb05de16": [
        "/writing/svg-has-more-potential/"
      ],
      "c8a06606-0027-516e-9391-3ca5a86d1b02": [
        "/writing/svg-has-more-potential/"
      ],
      "472177d7-84a3-5d4c-ac73-82053877b36b": [
        "/writing/svg-has-more-potential/"
      ],
      "85655e10-d94f-5cba-aa70-fa3425dff26f": [
        "/writing/maths-and-code/"
      ],
      "a922708e-f857-56ad-826b-f41c58cc739e": [
        "/writing/svg-has-more-potential/"
      ],
      "c6021bd8-4e79-5e53-8ada-6ac2fb68027c": [
        "/writing/service-workers/"
      ],
      "edfd379f-9adc-5b92-baeb-ecae57cff7a1": [
        "/writing/service-workers/"
      ],
      "5e46b326-64db-572b-a140-15a2fe4bfdf1": [
        "/writing/service-workers/"
      ],
      "9ff5728a-3db0-5a4c-b0a2-e4b5aa030ec9": [
        "/writing/service-workers/"
      ],
      "d9691426-ce96-5049-a9f4-f12125a1665e": [
        "/writing/service-workers/"
      ],
      "284d5caf-4d3f-5a7d-9365-493ed874b17d": [
        "/writing/canvas-image-manipulation/"
      ],
      "3ee8fe14-1a33-5758-a779-da11375b203a": [
        "/writing/style-guides-50-shades-of-corporate-blue/"
      ],
      "134e8913-076c-599f-aa35-5754ac4805ce": [
        "/writing/canvas-image-manipulation/"
      ],
      "5890fe96-7bd1-56b5-b84d-9facc5a27739": [
        "/writing/style-guides-50-shades-of-corporate-blue/"
      ],
      "898a56f5-55ef-5513-9e63-cea1c09c8e48": [
        "/writing/canvas-image-manipulation/"
      ],
      "b899bbbf-97a6-5195-9c80-e4cfb9cf094c": [
        "/writing/style-guides-50-shades-of-corporate-blue/"
      ],
      "7b95e6bc-209b-5da6-a1fc-5eed05257a3a": [
        "/writing/love-letter-to-jquery/"
      ],
      "8882dfb4-a256-5f64-9b6c-abaa1bf71b86": [
        "/writing/love-letter-to-jquery/"
      ],
      "a1d227e0-244f-51ef-b713-c361cf1fc45d": [
        "/writing/love-letter-to-jquery/"
      ],
      "8ba8ae2e-6a81-5ea3-9414-0d5884bbe52f": [
        "/writing/pattern-robust-icons/"
      ],
      "9fefdebb-0172-5ad5-96e1-717fe3a28fea": [
        "/writing/pattern-robust-icons/"
      ],
      "b5e6787d-7e68-58d3-ab18-432325ecd715": [
        "/writing/pattern-robust-icons/"
      ],
      "c2d27e8b-53be-5a04-a30a-8e67adb054f5": [
        "/writing/pattern-robust-icons/"
      ],
      "d0d7dd46-3209-5714-b885-f77157e9465c": [
        "/writing/fluid-type-calc-examples/"
      ],
      "9607cf50-94d1-56ae-90fc-55c96e6add74": [
        "/writing/how-do-i-css/"
      ],
      "e0cb0a30-a6cd-522f-a826-58579b181bb8": [
        "/writing/fluid-type-calc-examples/"
      ],
      "19c28b57-e9de-5728-9904-e60a0b29c5b1": [
        "/writing/fluid-type-calc-examples/"
      ],
      "fb571099-b2bd-50d9-86fa-bac3fea518cb": [
        "/writing/how-do-i-css/"
      ],
      "aab62576-341d-5551-8ca3-b2de36174327": [
        "/writing/how-do-i-css/"
      ],
      "9cbd10f5-d084-57d6-9bc5-e5e6a935278b": [
        "/writing/fluid-type-calc-examples/"
      ],
      "9f0239cb-b07a-5817-b4ea-7cca5194ad31": [
        "/writing/how-do-i-css/"
      ],
      "4783e06f-705c-5e04-b647-0b475e5a8116": [
        "/writing/how-do-i-css/"
      ],
      "4c0495e4-f68f-504d-875d-b783b1399ad0": [
        "/writing/html5-periodic-table-dmca-takedown-request/"
      ],
      "77f61876-bfcb-5f48-bc9c-64cf15937b21": [
        "/writing/html5-periodic-table-dmca-takedown-request/"
      ],
      "e82b9da5-5753-574b-ab10-9cf7a87205b3": [
        "/writing/html5-periodic-table-dmca-takedown-request/"
      ],
      "d562810d-ee79-5edc-8a4d-e0546757cda3": [
        "/writing/precise-control-responsive-typography/"
      ],
      "4d8876be-0337-50e2-9044-eb7bc16b973c": [
        "/writing/precise-control-responsive-typography/"
      ],
      "ecbb9040-429a-5f61-a310-e1baf415c6f0": [
        "/writing/precise-control-responsive-typography/"
      ],
      "27c62192-a391-5b17-858b-b7d510546866": [
        "/writing/precise-control-responsive-typography/"
      ],
      "11e689e2-017c-57b6-b59f-e6df0d1714fa": [
        "/writing/zero-element-loading-animations/"
      ],
      "e447a460-b7ae-56db-992b-7a982f9c1c63": [
        "/writing/zero-element-loading-animations/"
      ],
      "65f897cf-dad1-5603-93a0-22a39e2c7a0f": [
        "/writing/zero-element-loading-animations/"
      ],
      "42e07311-fc68-573b-ba82-5e2ed7690dbf": [
        "/writing/zero-element-loading-animations/"
      ],
      "6cd6dd13-9477-50bd-923e-6a60cb9d51bb": [
        "/writing/html5-video-streaming/"
      ],
      "fe842c12-0073-57bf-9ace-d02d6dfcc40c": [
        "/writing/html5-video-streaming/"
      ],
      "efd12b4a-ed97-5a4c-a022-e620def935a3": [
        "/writing/html5-video-streaming/"
      ],
      "e1690f65-94c8-5d91-88c1-37aafe697610": [
        "/writing/html5-video-streaming/"
      ],
      "6a268ce0-e6cb-593e-97ef-d3f01e8c4b06": [
        "/writing/html5-video-streaming/"
      ],
      "844f4bd2-a6ee-5f7b-b4f4-eb4d10c3bbb6": [
        "/writing/resizing-and-cropping-images-with-canvas/"
      ],
      "6d09f4e3-b5f4-5745-ab25-8247ae61a599": [
        "/writing/resizing-and-cropping-images-with-canvas/"
      ],
      "c0b00b48-7402-5d9f-971c-61d3cfab3fbe": [
        "/writing/resizing-and-cropping-images-with-canvas/"
      ],
      "a25ddaf6-c3cd-5995-9ca7-fcfc9df530e1": [
        "/writing/resizing-and-cropping-images-with-canvas/"
      ],
      "e7425620-202f-5349-a861-7d420bd3ba99": [
        "/writing/resizing-and-cropping-images-with-canvas/"
      ],
      "f08bd495-cb62-5bd8-ae0b-03bf223a6015": [
        "/writing/understanding-flexbox/"
      ],
      "26d7a417-f231-572e-9c83-fd12952aa7bf": [
        "/writing/understanding-flexbox/"
      ],
      "9f99c124-9efc-5525-889e-5b3a2e97152f": [
        "/writing/understanding-flexbox/"
      ],
      "54fc6d41-fc84-586f-b70f-a3455882d736": [
        "/writing/understanding-flexbox/"
      ],
      "3ce7ed04-e965-55f6-ab77-5ca4d40f841c": [
        "/writing/understanding-flexbox/"
      ],
      "19f7c7b5-34e2-5045-a101-7aa54f8dfd6f": [
        "/writing/understanding-flexbox/"
      ],
      "47f21b2f-8c31-573c-b016-8af2a56545cf": [
        "/writing/merging-json-data-sets/"
      ],
      "05b0c536-9190-556e-934a-78762e13d05c": [
        "/writing/accessible-contrast-with-less-and-sass/"
      ],
      "b9f2ada5-ca57-5d1a-9ba3-629df8351a6d": [
        "/writing/merging-json-data-sets/"
      ],
      "d7f66d94-46ad-5006-b1c3-8d470a427940": [
        "/writing/accessible-contrast-with-less-and-sass/"
      ],
      "282a38a2-4762-570d-93f5-c47b1e332254": [
        "/writing/accessible-contrast-with-less-and-sass/"
      ],
      "d49a5870-a6dd-54ca-a3ce-5362458f6c86": [
        "/writing/merging-json-data-sets/"
      ],
      "091d4edf-e7c9-5d1b-9ba6-0c6d800249d3": [
        "/writing/accessible-contrast-with-less-and-sass/"
      ],
      "057e26cd-5d7c-5cdf-b999-b57cb83a3905": [
        "/writing/accessible-contrast-with-less-and-sass/"
      ],
      "4c31379f-ca7f-50b7-a62a-caa5c684f392": [
        "/writing/detecting-transition-start/"
      ],
      "b662b1cf-1d20-5ab8-8229-327a802660f4": [
        "/writing/detecting-transition-start/"
      ],
      "8995ec68-52e1-5ca7-8b9c-07299324bfb0": [
        "/writing/detecting-transition-start/"
      ],
      "61d5a6ea-d1fb-5cae-97a6-c1bbf402a4f8": [
        "/writing/thoughts-on-design-patterns-in-css/"
      ],
      "ce8a8962-f0a6-5d17-a5e6-d807af493943": [
        "/writing/thoughts-on-design-patterns-in-css/"
      ],
      "f88193a9-2b71-517f-8473-a856ee592d6a": [
        "/writing/thoughts-on-design-patterns-in-css/"
      ],
      "6c6773dc-5d26-542b-bd2e-82c9524c8ec9": [
        "/writing/thoughts-on-design-patterns-in-css/"
      ],
      "01f51edb-62ef-5f06-99b9-f328701e5682": [
        "/writing/thoughts-on-design-patterns-in-css/"
      ]
    },
    "connections": {
      "ContentfulWriting": [
        null,
        "/",
        null
      ],
      "ContentfulPage": [
        null,
        null
      ],
      "ContentfulExternalArticle": [
        "/"
      ],
      "ContentfulCard": [
        "/"
      ]
    }
  },
  "jsonDataPaths": {
    "writing-getting-the-heck-out-of-react-0f2": "150/path---writing-getting-the-heck-out-of-react-0-f-2-dc4-H7aZJIedu0gLUHJIPKUf32MV7Q0",
    "index": "486/path---index-6a9-MWLiwpT5UVyCV9IdveOjLjdoH3c",
    "writing-currentcolor-and-custom-properties-1d0": "477/path---writing-currentcolor-and-custom-properties-1-d-0-f76-dIBpw1ALFzkJOKayHyTQoPCn6E",
    "writing-this-in-javascript-54b": "569/path---writing-this-in-javascript-54-b-89a-oC3k5hSVTWGDqy9E5QSJw0PiGXI",
    "writing-new-website-new-css-tricks-7ef": "707/path---writing-new-website-new-css-tricks-7-ef-554-wzuDJtQB64BOwFh91YELwiw6a1U",
    "writing-the-invisible-parts-of-css-b5d": "619/path---writing-the-invisible-parts-of-css-b-5-d-4f4-xPxFKDt2flkGFtJwnbhm9EQKeQ",
    "writing-using-css-variables-aec": "111/path---writing-using-css-variables-aec-2a8-BWVmQra9L0Aj531n3hH55n7aA",
    "writing-non-linear-interpolation-in-css-d25": "476/path---writing-non-linear-interpolation-in-css-d-25-987-BcSM7bgjJnFzUdcAKCWP5l2Bz4",
    "writing-interpolation-without-animation-3ae": "494/path---writing-interpolation-without-animation-3-ae-6bb-Wcqryq0fVsRHa2iLsXJES93Ng",
    "writing-maths-and-code-df9": "256/path---writing-maths-and-code-df-9-ff4-oYDONovX1iqz3RSqRvnGyJffxug",
    "writing-svg-has-more-potential-4fb": "80/path---writing-svg-has-more-potential-4-fb-b44-BDQqbcytKveFbCd8aV8B7vkit3o",
    "writing-service-workers-75a": "34/path---writing-service-workers-75-a-3b8-uuSYCjDz7VEOJbRMTe4ZId4hCPs",
    "writing-canvas-image-manipulation-430": "67/path---writing-canvas-image-manipulation-430-dda-b24zlQwqiRKgvVGqvMhFxSQlX4U",
    "writing-style-guides-50-shades-of-corporate-blue-3d3": "548/path---writing-style-guides-50-shades-of-corporate-blue-3-d-3-f61-vrZsQCnDm9ni3DB92CSkBSrIFw",
    "writing-love-letter-to-jquery-bab": "563/path---writing-love-letter-to-jquery-bab-915-dSb8cFdHfIav1H6U1TOjTEB5PY",
    "writing-pattern-robust-icons-a82": "614/path---writing-pattern-robust-icons-a-82-4f4-3hzcg1BGXZ8jP4DllTwKjUy5rU",
    "writing-fluid-type-calc-examples-b25": "166/path---writing-fluid-type-calc-examples-b-25-b77-dLFrzUOGxrTnPJZsZLahNlffE",
    "writing-html-5-periodic-table-dmca-takedown-request-a5c": "620/path---writing-html-5-periodic-table-dmca-takedown-request-a-5-c-2b4-TKHKBkJRG0g5ppMjO8mAts",
    "writing-how-do-i-css-7f2": "411/path---writing-how-do-i-css-7-f-2-142-1WOnqnPbgwCY2c6HSBVWe0Z2Y",
    "writing-precise-control-responsive-typography-183": "253/path---writing-precise-control-responsive-typography-183-61d-4G1wVGDRJCafhA2YZZGn4D0R1Y",
    "writing-html-5-video-streaming-442": "530/path---writing-html-5-video-streaming-442-450-gAuSnE5VSNCdGH4ZguZGbPwvvI",
    "writing-zero-element-loading-animations-26f": "854/path---writing-zero-element-loading-animations-26-f-1c7-vDiGUnSQKcm5iBqXG2ZwAzHnbDA",
    "writing-resizing-and-cropping-images-with-canvas-791": "653/path---writing-resizing-and-cropping-images-with-canvas-791-fb3-ccBK4Rl77Dx2Fkm3vhZSYIpQmYw",
    "writing-understanding-flexbox-0b4": "42/path---writing-understanding-flexbox-0-b-4-dc4-rolAQ6ZQF8zd5w3LjtzaVX83X4",
    "writing-merging-json-data-sets-1b7": "826/path---writing-merging-json-data-sets-1-b-7-f58-6utI2q5Wusc5ZwGhzFLcce49y94",
    "writing-accessible-contrast-with-less-and-sass-ace": "259/path---writing-accessible-contrast-with-less-and-sass-ace-b98-Be38ADrie9kDYRmZvFJ2i6N3ips",
    "writing-detecting-transition-start-5d4": "438/path---writing-detecting-transition-start-5-d-4-4b2-8UgGBFPGUAWVBCoCCcvn58k8pc",
    "writing-thoughts-on-design-patterns-in-css-2f1": "748/path---writing-thoughts-on-design-patterns-in-css-2-f-1-dcf-jW9SRnxQOuvfCAbGNLIBFWp9DY",
    "writing-e3d": "213/path---writing-e-3-d-3ba-YyDENIFhRPaWKsjhaS8rGlUGM",
    "hire-me-4e7": "154/path---hire-me-4-e-7-f96-isLjtu3rxHJLJ7v6w1QEqKbvS4",
    "writing-2-ca2": "91/path---writing-2-ca-2-6ee-burMYXGKVsMl3QvNwESPflfxF8",
    "dev-404-page-5f9": "920/path---dev-404-page-5-f-9-fab-NZuapzHg3X9TaN1iIixfv1W23E",
    "writing-3-27b": "747/path---writing-3-27-b-692-WYFKGtEkYsvTzmXYopWk6wOo",
    "404-22d": "44/path---404-22-d-bce-NZuapzHg3X9TaN1iIixfv1W23E",
    "404-html-516": "164/path---404-html-516-62a-NZuapzHg3X9TaN1iIixfv1W23E",
    "offline-plugin-app-shell-fallback-a30": "520/path---offline-plugin-app-shell-fallback-a-30-c5a-NZuapzHg3X9TaN1iIixfv1W23E"
  },
  "components": {
    "/c/Users/mike/Development/madebymike/madebymike.github.io/node_modules/gatsby-plugin-offline/app-shell.js": {
      "query": "",
      "componentPath": "/c/Users/mike/Development/madebymike/madebymike.github.io/node_modules/gatsby-plugin-offline/app-shell.js"
    },
    "/c/Users/mike/Development/madebymike/madebymike.github.io/src/templates/writing.js": {
      "query": "query WritingBySlug(\n  $slug: String!\n) {\n  contentfulWriting(slug: {eq: $slug}) {\n    title\n    publishDate(formatString: \"MMMM Do, YYYY\")\n    body {\n      childMarkdownRemark {\n        html\n      }\n    }\n    update {\n      childMarkdownRemark {\n        html\n      }\n    }\n    description {\n      childMarkdownRemark {\n        html\n        excerpt\n      }\n    }\n    dateString: publishDate(formatString: \"MMMM Do, YYYY\")\n    extraCss {\n      file {\n        url\n        fileName\n        contentType\n      }\n    }\n    extraJs {\n      file {\n        url\n        fileName\n        contentType\n      }\n    }\n  }\n}\n",
      "componentPath": "/c/Users/mike/Development/madebymike/madebymike.github.io/src/templates/writing.js"
    },
    "/c/Users/mike/Development/madebymike/madebymike.github.io/src/templates/writing-index.js": {
      "query": "",
      "componentPath": "/c/Users/mike/Development/madebymike/madebymike.github.io/src/templates/writing-index.js"
    },
    "/c/Users/mike/Development/madebymike/madebymike.github.io/src/templates/page.js": {
      "query": "query PageBySlug(\n  $slug: String!\n) {\n  contentfulPage(slug: {eq: $slug}) {\n    title\n    publishDate(formatString: \"MMMM Do, YYYY\")\n    body {\n      childMarkdownRemark {\n        html\n      }\n    }\n    description {\n      childMarkdownRemark {\n        html\n        excerpt\n      }\n    }\n    sidebar {\n      childMarkdownRemark {\n        html\n      }\n    }\n  }\n}\n",
      "componentPath": "/c/Users/mike/Development/madebymike/madebymike.github.io/src/templates/page.js"
    },
    "/c/Users/mike/Development/madebymike/madebymike.github.io/src/pages/404.js": {
      "query": "",
      "componentPath": "/c/Users/mike/Development/madebymike/madebymike.github.io/src/pages/404.js"
    },
    "/c/Users/mike/Development/madebymike/madebymike.github.io/src/pages/index.js": {
      "query": "query HomeQuery {\n  writing: allContentfulWriting(limit: 20, sort: {fields: [publishDate], order: DESC}) {\n    edges {\n      node {\n        id\n        title\n        slug\n        publishDate\n        dateString: publishDate(formatString: \"MMMM Do, YYYY\")\n        tags\n        description {\n          childMarkdownRemark {\n            html\n          }\n        }\n        color\n        size\n      }\n    }\n  }\n  cards: allContentfulCard(limit: 20, sort: {fields: [publishDate], order: DESC}, filter: {type: {ne: \"Not ad\"}}) {\n    edges {\n      node {\n        id\n        title\n        type\n        publishDate\n        dateString: publishDate(formatString: \"MMMM Do, YYYY\")\n        url\n        color\n        size\n        image {\n          title\n          description\n          file {\n            url\n          }\n        }\n        description {\n          childMarkdownRemark {\n            html\n          }\n        }\n      }\n    }\n  }\n  external: allContentfulExternalArticle(limit: 20, sort: {fields: [publishDate], order: DESC}) {\n    edges {\n      node {\n        id\n        title\n        publishDate\n        dateString: publishDate(formatString: \"MMMM Do, YYYY\")\n        url\n        color\n        size\n        description {\n          childMarkdownRemark {\n            html\n          }\n        }\n      }\n    }\n  }\n  notAds: allContentfulCard(limit: 2, sort: {fields: [publishDate], order: DESC}, filter: {type: {eq: \"Not ad\"}}) {\n    edges {\n      node {\n        id\n        title\n        type\n        publishDate\n        dateString: publishDate(formatString: \"MMMM Do, YYYY\")\n        url\n        color\n        size\n        image {\n          title\n          description\n          file {\n            url\n          }\n        }\n        description {\n          childMarkdownRemark {\n            html\n          }\n        }\n      }\n    }\n  }\n}\n",
      "componentPath": "/c/Users/mike/Development/madebymike/madebymike.github.io/src/pages/index.js"
    }
  },
  "staticQueryComponents": {}
}