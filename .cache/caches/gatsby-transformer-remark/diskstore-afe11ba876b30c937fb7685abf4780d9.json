{"expireTime":9007200803979237000,"key":"transformer-remark-markdown-html-3f2c526283597dd1403a877ab9d549d8-gatsby-remark-prismjs-","val":"<p>Merging deeply nested data in JSON is more difficult than it might seem.</p>\n<p>In the past I've used a brute force approach when dealing with small and well structured data. This approach proved completely inadequate for large volumes of real world data.</p>\n<p>Imagine we have a monthly darts competition and at the end of each month record the scores in a JSON file:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">data_jan <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token string\">\"name\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"mike\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"score\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">47</span> <span class=\"token punctuation\">}</span>\ndata_feb <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token string\">\"name\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"mike\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"score\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">25</span> <span class=\"token punctuation\">}</span></code></pre></div>\n<p>(I have no clue what a darts score should look like)</p>\n<p>At this level getting mike's total score is trivial <code class=\"language-text\">data_jan.score +  data_feb.score</code>. But if we add more players, more months or more data getting totals quickly becomes a bit more involved.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">data_jan <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span> <span class=\"token string\">\"name\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"mike\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"score\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">47</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"team\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"A\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> <span class=\"token string\">\"name\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"jill\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"score\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">51</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"team\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"B\"</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">]</span>\ndata_feb <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span> <span class=\"token string\">\"name\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"mike\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"score\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">25</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"team\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"A\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> <span class=\"token string\">\"name\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"jill\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"score\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">41</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"team\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"B\"</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">]</span></code></pre></div>\n<p>Your first instinct might be to find all the players then for each player, loop over all the months, find score and add this to the current players total.</p>\n<p>With help from something like <a href=\"http://jquery.com/\">jQuery</a> or <a href=\"http://underscorejs.org/\">Underscore</a>, enough nested loops and liberal use filter and map statements you might get a result.</p>\n<p>This will work until you run into some real world situations like players absent or a need for both team and player totals. In short this type of solution is a bit of a house of cards.</p>\n<p>Thinking more about the problem I soon realised that it is similar to the use case for <code class=\"language-text\">.extend()</code> that both jQuery and Underscore provide. The only difference is I want control when merging so that I can change values and not just overwrite.</p>\n<p>It was eventually suggested that I checkout <a href=\"http://lodash.com/\">Lodash</a> and I found the <code class=\"language-text\">.merge()</code> function allows a callback for data manipulation. So to get player totals all we need is:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">_<span class=\"token punctuation\">.</span><span class=\"token function\">merge</span><span class=\"token punctuation\">(</span>data_jan<span class=\"token punctuation\">,</span> data_feb<span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>_<span class=\"token punctuation\">.</span><span class=\"token function\">isNumber</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> _<span class=\"token punctuation\">.</span><span class=\"token function\">isNumber</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  \t<span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> undefined\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>This is much faster and easier to follow than nested loops.</p>\n<p>One small downside is you can only merge 2 objects at a time and my only other complaint is I don't have access to the key in the callback.</p>\n<p>Bonus: If you are using Underscore, Lodash is almost a one for one replacement so it's easy to switch.</p>\n<p><strong>Update</strong></p>\n<p>If you're using jQuery and do not want to add another library to the mix I wrote a jQuery extension to merge objects:</p>\n<p><a href=\"https://gist.github.com/MadeByMike/e57dd16797acf5d105b5\">https://gist.github.com/MadeByMike/e57dd16797acf5d105b5</a></p>\n<p>It works much like <code class=\"language-text\">jQuery.extend()</code> however the first parameter is an array containing the objects to merge. The 2nd parameter is a callback that allows you to modify the data while merging.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">$<span class=\"token punctuation\">.</span><span class=\"token function\">mergeObjects</span><span class=\"token punctuation\">(</span>merge_array<span class=\"token punctuation\">,</span> callback<span class=\"token punctuation\">)</span></code></pre></div>\n<p>E.g.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">merge_array <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span> <span class=\"token string\">\"name\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"mike\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"score\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">47</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">{</span> <span class=\"token string\">\"name\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"mike\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"score\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">11</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n$<span class=\"token punctuation\">.</span><span class=\"token function\">mergeObjects</span><span class=\"token punctuation\">(</span>merge_array<span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>$<span class=\"token punctuation\">.</span><span class=\"token function\">isNumeric</span><span class=\"token punctuation\">(</span> a <span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> $<span class=\"token punctuation\">.</span><span class=\"token function\">isNumeric</span><span class=\"token punctuation\">(</span> a <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    \t<span class=\"token keyword\">return</span> a<span class=\"token operator\">+</span>b<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> b<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Will return: { \"name\": \"mike\", \"score\": 58}</span></code></pre></div>"}