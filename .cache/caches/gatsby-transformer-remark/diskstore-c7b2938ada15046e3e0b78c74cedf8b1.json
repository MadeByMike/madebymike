{"expireTime":9007200803979233000,"key":"transformer-remark-markdown-html-f46758c16334889c28e4ff22c203da1e-gatsby-remark-prismjs-","val":"<p>Like many things, the <code class=\"language-text\">this</code> keyword in JavaScript is something I learned to work with and around, long before I gained any proper understanding of how it works. Recently I was asked to describe it and found despite my experience I still strugled to find simple terms. So I thought I'd write down my best attempt.</p>\n<p>There is a special keyword in JavaScript called <code class=\"language-text\">this</code>. It is a reference to an object. This reference is sometimes called a <code class=\"language-text\">binding</code> because it ties the value of <code class=\"language-text\">this</code> to a specific object. What object, and the value of <code class=\"language-text\">this</code>, depends on how and where the function is called.</p>\n<p>The default value of <code class=\"language-text\">this</code> is the <code class=\"language-text\">window</code> object in browsers or <code class=\"language-text\">undefined</code> when in strict mode. </p>\n<p>We can explicitly set what <code class=\"language-text\">this</code> points by executing functions with methods like <code class=\"language-text\">call</code>, <code class=\"language-text\">bind</code> and <code class=\"language-text\">apply</code>. </p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">myFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">myFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// window</span>\n<span class=\"token keyword\">var</span> myBinding <span class=\"token operator\">=</span> myFunc<span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hello'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// .bind() returns a new function with a different binding</span>\n<span class=\"token function\">myBinding</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 'hello'</span>\nmyFunc<span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hello'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 'hello'</span>\nmyFunc<span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hello'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 'hello'</span></code></pre></div>\n<p>What confuses me sometimes is JavaScript will implicity bind <code class=\"language-text\">this</code> if the function is called within an context owning object. This means when a function is a property of a context owning object, the value of <code class=\"language-text\">this</code> will be the object itself. In the example below the owning object, and therfore value of <code class=\"language-text\">this</code> is <code class=\"language-text\">myObject</code>:  </p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">myFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>greeting<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> myObject <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n\tgreeting<span class=\"token punctuation\">:</span> <span class=\"token string\">'hello'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">function</span><span class=\"token punctuation\">:</span> myFunc\n<span class=\"token punctuation\">}</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>myObject<span class=\"token punctuation\">.</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 'hello'</span></code></pre></div>\n<p>Calling a function with the keyword <code class=\"language-text\">new</code> will result in a new empty object bound to <code class=\"language-text\">this</code>. </p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">myFunc</span><span class=\"token punctuation\">(</span>something<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>thing <span class=\"token operator\">=</span> something<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>thing<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">myFunc</span><span class=\"token punctuation\">(</span><span class=\"token string\">'something'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>This has been a very short introduction that covers only basic information. If you want to know more I was inspired to attempt my own explaination after reading Willian Martins, <a href=\"https://www.smashingmagazine.com/2018/10/taming-this-javascript-bind-operator/\">Taming this In JavaScript With Bind Operator</a> . I could also not write about <code class=\"language-text\">this</code> without recommending Kyle Simpson's explaination in <a href=\"https://github.com/getify/You-Dont-Know-JS/blob/master/this%20%26%20object%20prototypes/ch2.md\">You Don't Know JavaScript</a>, especially the <a href=\"https://github.com/getify/You-Dont-Know-JS/blob/master/this%20%26%20object%20prototypes/ch2.md#review-tldr\">TLDR</a>.</p>"}