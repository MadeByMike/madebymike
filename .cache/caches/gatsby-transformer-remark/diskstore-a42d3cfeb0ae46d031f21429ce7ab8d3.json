{"expireTime":9007200803979237000,"key":"transformer-remark-markdown-ast-3f2c526283597dd1403a877ab9d549d8-gatsby-remark-prismjs-","val":{"type":"root","children":[{"type":"paragraph","children":[{"type":"text","value":"Merging deeply nested data in JSON is more difficult than it might seem.","position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":1,"column":73,"offset":72},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":1,"column":73,"offset":72},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"In the past I've used a brute force approach when dealing with small and well structured data. This approach proved completely inadequate for large volumes of real world data.","position":{"start":{"line":3,"column":1,"offset":74},"end":{"line":3,"column":176,"offset":249},"indent":[]}}],"position":{"start":{"line":3,"column":1,"offset":74},"end":{"line":3,"column":176,"offset":249},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Imagine we have a monthly darts competition and at the end of each month record the scores in a JSON file:","position":{"start":{"line":5,"column":1,"offset":251},"end":{"line":5,"column":107,"offset":357},"indent":[]}}],"position":{"start":{"line":5,"column":1,"offset":251},"end":{"line":5,"column":107,"offset":357},"indent":[]}},{"type":"html","lang":"javascript","value":"<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">data_jan <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token string\">\"name\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"mike\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"score\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">47</span> <span class=\"token punctuation\">}</span>\ndata_feb <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token string\">\"name\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"mike\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"score\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">25</span> <span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":7,"column":1,"offset":359},"end":{"line":10,"column":4,"offset":462},"indent":[1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"(I have no clue what a darts score should look like)","position":{"start":{"line":11,"column":1,"offset":463},"end":{"line":11,"column":53,"offset":515},"indent":[]}}],"position":{"start":{"line":11,"column":1,"offset":463},"end":{"line":11,"column":53,"offset":515},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"At this level getting mike's total score is trivial ","position":{"start":{"line":13,"column":1,"offset":517},"end":{"line":13,"column":53,"offset":569},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">data_jan.score +  data_feb.score</code>","position":{"start":{"line":13,"column":53,"offset":569},"end":{"line":13,"column":87,"offset":603},"indent":[]}},{"type":"text","value":". But if we add more players, more months or more data getting totals quickly becomes a bit more involved.","position":{"start":{"line":13,"column":87,"offset":603},"end":{"line":13,"column":193,"offset":709},"indent":[]}}],"position":{"start":{"line":13,"column":1,"offset":517},"end":{"line":13,"column":193,"offset":709},"indent":[]}},{"type":"html","lang":"javascript","value":"<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">data_jan <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span> <span class=\"token string\">\"name\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"mike\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"score\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">47</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"team\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"A\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> <span class=\"token string\">\"name\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"jill\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"score\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">51</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"team\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"B\"</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">]</span>\ndata_feb <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span> <span class=\"token string\">\"name\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"mike\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"score\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">25</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"team\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"A\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> <span class=\"token string\">\"name\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"jill\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"score\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">41</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"team\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"B\"</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">]</span></code></pre></div>","position":{"start":{"line":15,"column":1,"offset":711},"end":{"line":24,"column":4,"offset":948},"indent":[1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Your first instinct might be to find all the players then for each player, loop over all the months, find score and add this to the current players total.","position":{"start":{"line":26,"column":1,"offset":950},"end":{"line":26,"column":155,"offset":1104},"indent":[]}}],"position":{"start":{"line":26,"column":1,"offset":950},"end":{"line":26,"column":155,"offset":1104},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"With help from something like ","position":{"start":{"line":28,"column":1,"offset":1106},"end":{"line":28,"column":31,"offset":1136},"indent":[]}},{"type":"link","title":null,"url":"http://jquery.com/","children":[{"type":"text","value":"jQuery","position":{"start":{"line":28,"column":32,"offset":1137},"end":{"line":28,"column":38,"offset":1143},"indent":[]}}],"position":{"start":{"line":28,"column":31,"offset":1136},"end":{"line":28,"column":59,"offset":1164},"indent":[]}},{"type":"text","value":" or ","position":{"start":{"line":28,"column":59,"offset":1164},"end":{"line":28,"column":63,"offset":1168},"indent":[]}},{"type":"link","title":null,"url":"http://underscorejs.org/","children":[{"type":"text","value":"Underscore","position":{"start":{"line":28,"column":64,"offset":1169},"end":{"line":28,"column":74,"offset":1179},"indent":[]}}],"position":{"start":{"line":28,"column":63,"offset":1168},"end":{"line":28,"column":101,"offset":1206},"indent":[]}},{"type":"text","value":", enough nested loops and liberal use filter and map statements you might get a result.","position":{"start":{"line":28,"column":101,"offset":1206},"end":{"line":28,"column":188,"offset":1293},"indent":[]}}],"position":{"start":{"line":28,"column":1,"offset":1106},"end":{"line":28,"column":188,"offset":1293},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"This will work until you run into some real world situations like players absent or a need for both team and player totals. In short this type of solution is a bit of a house of cards.","position":{"start":{"line":30,"column":1,"offset":1295},"end":{"line":30,"column":185,"offset":1479},"indent":[]}}],"position":{"start":{"line":30,"column":1,"offset":1295},"end":{"line":30,"column":185,"offset":1479},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Thinking more about the problem I soon realised that it is similar to the use case for ","position":{"start":{"line":32,"column":1,"offset":1481},"end":{"line":32,"column":88,"offset":1568},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">.extend()</code>","position":{"start":{"line":32,"column":88,"offset":1568},"end":{"line":32,"column":99,"offset":1579},"indent":[]}},{"type":"text","value":" that both jQuery and Underscore provide. The only difference is I want control when merging so that I can change values and not just overwrite.","position":{"start":{"line":32,"column":99,"offset":1579},"end":{"line":32,"column":243,"offset":1723},"indent":[]}}],"position":{"start":{"line":32,"column":1,"offset":1481},"end":{"line":32,"column":243,"offset":1723},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"It was eventually suggested that I checkout ","position":{"start":{"line":34,"column":1,"offset":1725},"end":{"line":34,"column":45,"offset":1769},"indent":[]}},{"type":"link","title":null,"url":"http://lodash.com/","children":[{"type":"text","value":"Lodash","position":{"start":{"line":34,"column":46,"offset":1770},"end":{"line":34,"column":52,"offset":1776},"indent":[]}}],"position":{"start":{"line":34,"column":45,"offset":1769},"end":{"line":34,"column":73,"offset":1797},"indent":[]}},{"type":"text","value":" and I found the ","position":{"start":{"line":34,"column":73,"offset":1797},"end":{"line":34,"column":90,"offset":1814},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">.merge()</code>","position":{"start":{"line":34,"column":90,"offset":1814},"end":{"line":34,"column":100,"offset":1824},"indent":[]}},{"type":"text","value":" function allows a callback for data manipulation. So to get player totals all we need is:","position":{"start":{"line":34,"column":100,"offset":1824},"end":{"line":34,"column":190,"offset":1914},"indent":[]}}],"position":{"start":{"line":34,"column":1,"offset":1725},"end":{"line":34,"column":190,"offset":1914},"indent":[]}},{"type":"html","lang":"javascript","value":"<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">_<span class=\"token punctuation\">.</span><span class=\"token function\">merge</span><span class=\"token punctuation\">(</span>data_jan<span class=\"token punctuation\">,</span> data_feb<span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>_<span class=\"token punctuation\">.</span><span class=\"token function\">isNumber</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> _<span class=\"token punctuation\">.</span><span class=\"token function\">isNumber</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  \t<span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> undefined\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>","position":{"start":{"line":36,"column":1,"offset":1916},"end":{"line":43,"column":4,"offset":2056},"indent":[1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"This is much faster and easier to follow than nested loops.","position":{"start":{"line":45,"column":1,"offset":2058},"end":{"line":45,"column":60,"offset":2117},"indent":[]}}],"position":{"start":{"line":45,"column":1,"offset":2058},"end":{"line":45,"column":60,"offset":2117},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"One small downside is you can only merge 2 objects at a time and my only other complaint is I don't have access to the key in the callback.","position":{"start":{"line":47,"column":1,"offset":2119},"end":{"line":47,"column":140,"offset":2258},"indent":[]}}],"position":{"start":{"line":47,"column":1,"offset":2119},"end":{"line":47,"column":140,"offset":2258},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Bonus: If you are using Underscore, Lodash is almost a one for one replacement so it's easy to switch.","position":{"start":{"line":49,"column":1,"offset":2260},"end":{"line":49,"column":103,"offset":2362},"indent":[]}}],"position":{"start":{"line":49,"column":1,"offset":2260},"end":{"line":49,"column":103,"offset":2362},"indent":[]}},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"Update","position":{"start":{"line":51,"column":3,"offset":2366},"end":{"line":51,"column":9,"offset":2372},"indent":[]}}],"position":{"start":{"line":51,"column":1,"offset":2364},"end":{"line":51,"column":11,"offset":2374},"indent":[]}}],"position":{"start":{"line":51,"column":1,"offset":2364},"end":{"line":51,"column":11,"offset":2374},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"If you're using jQuery and do not want to add another library to the mix I wrote a jQuery extension to merge objects:","position":{"start":{"line":53,"column":1,"offset":2376},"end":{"line":53,"column":118,"offset":2493},"indent":[]}}],"position":{"start":{"line":53,"column":1,"offset":2376},"end":{"line":53,"column":118,"offset":2493},"indent":[]}},{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://gist.github.com/MadeByMike/e57dd16797acf5d105b5","children":[{"type":"text","value":"https://gist.github.com/MadeByMike/e57dd16797acf5d105b5","position":{"start":{"line":55,"column":1,"offset":2495},"end":{"line":55,"column":56,"offset":2550},"indent":[]}}],"position":{"start":{"line":55,"column":1,"offset":2495},"end":{"line":55,"column":56,"offset":2550},"indent":[]}}],"position":{"start":{"line":55,"column":1,"offset":2495},"end":{"line":55,"column":56,"offset":2550},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"It works much like ","position":{"start":{"line":57,"column":1,"offset":2552},"end":{"line":57,"column":20,"offset":2571},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">jQuery.extend()</code>","position":{"start":{"line":57,"column":20,"offset":2571},"end":{"line":57,"column":37,"offset":2588},"indent":[]}},{"type":"text","value":" however the first parameter is an array containing the objects to merge. The 2nd parameter is a callback that allows you to modify the data while merging.","position":{"start":{"line":57,"column":37,"offset":2588},"end":{"line":57,"column":192,"offset":2743},"indent":[]}}],"position":{"start":{"line":57,"column":1,"offset":2552},"end":{"line":57,"column":192,"offset":2743},"indent":[]}},{"type":"html","lang":"javascript","value":"<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">$<span class=\"token punctuation\">.</span><span class=\"token function\">mergeObjects</span><span class=\"token punctuation\">(</span>merge_array<span class=\"token punctuation\">,</span> callback<span class=\"token punctuation\">)</span></code></pre></div>","position":{"start":{"line":59,"column":1,"offset":2745},"end":{"line":61,"column":4,"offset":2800},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"E.g.","position":{"start":{"line":63,"column":1,"offset":2802},"end":{"line":63,"column":5,"offset":2806},"indent":[]}}],"position":{"start":{"line":63,"column":1,"offset":2802},"end":{"line":63,"column":5,"offset":2806},"indent":[]}},{"type":"html","lang":"javascript","value":"<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">merge_array <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span> <span class=\"token string\">\"name\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"mike\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"score\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">47</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">{</span> <span class=\"token string\">\"name\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"mike\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"score\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">11</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n$<span class=\"token punctuation\">.</span><span class=\"token function\">mergeObjects</span><span class=\"token punctuation\">(</span>merge_array<span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>$<span class=\"token punctuation\">.</span><span class=\"token function\">isNumeric</span><span class=\"token punctuation\">(</span> a <span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> $<span class=\"token punctuation\">.</span><span class=\"token function\">isNumeric</span><span class=\"token punctuation\">(</span> a <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    \t<span class=\"token keyword\">return</span> a<span class=\"token operator\">+</span>b<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> b<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Will return: { \"name\": \"mike\", \"score\": 58}</span></code></pre></div>","position":{"start":{"line":65,"column":1,"offset":2808},"end":{"line":74,"column":4,"offset":3078},"indent":[1,1,1,1,1,1,1,1,1]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":74,"column":4,"offset":3078}}}}